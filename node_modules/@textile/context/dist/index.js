"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = exports.createAPISig = exports.defaultHost = void 0;
const grpc_web_1 = require("@improbable-eng/grpc-web");
const fast_sha256_1 = require("fast-sha256");
const multibase_1 = __importDefault(require("multibase"));
exports.defaultHost = 'https://api.textile.io:3447';
exports.createAPISig = (secret, date = new Date(Date.now() + 1000 * 60)) => __awaiter(void 0, void 0, void 0, function* () {
    const sec = multibase_1.default.decode(secret);
    const msg = (date !== null && date !== void 0 ? date : new Date()).toISOString();
    const hash = new fast_sha256_1.HMAC(sec);
    const mac = hash.update(Buffer.from(msg)).digest();
    const sig = multibase_1.default.encode('base32', Buffer.from(mac)).toString();
    return { sig, msg };
});
/**
 * Context provides context management for gRPC credentials and config settings.
 */
class Context {
    constructor(
    // To comply with Config interface
    host = exports.defaultHost, 
    // For testing and debugging purposes.
    debug = false, 
    // To comply with Config interface
    transport = grpc_web_1.grpc.WebsocketTransport()) {
        // Internal context variables
        this._context = {};
        this._context['host'] = host;
        this._context['transport'] = transport;
        this._context['debug'] = debug;
    }
    get host() {
        return this._context['host'];
    }
    get transport() {
        return this._context['transport'];
    }
    get debug() {
        return this._context['debug'];
    }
    set(key, value) {
        this._context[key] = value;
        return this;
    }
    get(key) {
        return this._context[key];
    }
    withSession(value) {
        if (value === undefined)
            return this;
        this._context['x-textile-session'] = value;
        return this;
    }
    withThread(value) {
        if (value === undefined)
            return this;
        this._context['x-textile-thread'] = value.toString();
        return this;
    }
    withThreadName(value) {
        if (value === undefined)
            return this;
        this._context['x-textile-thread-name'] = value;
        return this;
    }
    withOrg(value) {
        if (value === undefined)
            return this;
        this._context['x-textile-org'] = value;
        return this;
    }
    withToken(value) {
        if (value === undefined)
            return this;
        this._context['authorization'] = `bearer ${value}`;
        return this;
    }
    withAPIKey(value) {
        if (value === undefined)
            return this;
        this._context['x-textile-api-key'] = value;
        return this;
    }
    withAPISig(value) {
        if (value === undefined)
            return this;
        const { sig, msg } = value;
        this._context['x-textile-api-sig-msg'] = msg;
        this._context['x-textile-api-sig'] = sig;
        return this;
    }
    withContext(value) {
        if (value === undefined)
            return this;
        // Spread to copy rather than reference
        this._context = value.toJSON();
        return this;
    }
    toJSON() {
        // Strip out transport. @todo: phase out transport out entirely
        const _a = this._context, { transport } = _a, context = __rest(_a, ["transport"]);
        return context;
    }
    toMetadata() {
        return new grpc_web_1.grpc.Metadata(this.toJSON());
    }
    static fromJSON(json, host = exports.defaultHost, debug = false, transport = grpc_web_1.grpc.WebsocketTransport()) {
        const newContext = Object.assign({}, json);
        newContext['host'] = host;
        newContext['transport'] = transport;
        newContext['debug'] = debug;
        const ctx = new Context();
        ctx._context = newContext;
        return ctx;
    }
    withUserKey(key, date) {
        return __awaiter(this, void 0, void 0, function* () {
            if (key === undefined)
                return this;
            const sig = yield exports.createAPISig(key.secret, date);
            return this.withAPIKey(key.key).withAPISig(sig);
        });
    }
}
exports.Context = Context;
//# sourceMappingURL=index.js.map