import { grpc } from '@improbable-eng/grpc-web';
import { ThreadID } from '@textile/threads-id';
declare type HostString = 'https://api.textile.io:3447' | 'https://api.staging.textile.io:3447' | 'http://127.0.0.1:3007' | string;
export declare const defaultHost: HostString;
declare type KeyInfo = {
    key: string;
    secret: string;
    type: 0 | 1;
};
export declare const createAPISig: (secret: string, date?: Date) => Promise<{
    sig: string;
    msg: string;
}>;
export interface ContextKeys {
    /**
     * Thread name. Specifies a mapping between human-readable name and a Thread ID.
     */
    ['x-textile-thread-name']?: string;
    /**
     * Thread ID as a string. Should be generated with `ThreadID.toString()` method.
     */
    ['x-textile-thread']?: string;
    /**
     * Session key. Used for various session contexts.
     */
    ['x-textile-session']?: string;
    /**
     * Org slug/name. Used for various org session operations.
     */
    ['x-textile-org']?: string;
    /**
     * API key. Used for user authentication.
     */
    ['x-textile-api-key']?: string;
    /**
     * Authorization token for interacting with remote APIs.
     */
    authorization?: string;
    /**
     * API signature used to authenticate with remote APIs.
     */
    ['x-textile-api-sig']?: string;
    /**
     * Raw message (date as ISO string) used to generate API signature.
     */
    ['x-textile-api-sig-msg']?: string;
    /**
     * The service host address/url. Defaults to https://hub.textile.io.
     */
    host?: HostString;
    /**
     * The transport to use for gRPC calls. Defaults to web-sockets.
     */
    transport?: grpc.TransportFactory;
    /**
     * Whether to enable debugging output during gRPC calls.
     */
    debug?: boolean;
    /**
     * Extras
     */
    [key: string]: any;
}
/**
 * Context provides context management for gRPC credentials and config settings.
 */
export declare class Context {
    private _context;
    constructor(host?: HostString, debug?: boolean, transport?: grpc.TransportFactory);
    get host(): any;
    get transport(): any;
    get debug(): any;
    set(key: keyof ContextKeys, value?: any): this;
    get(key: keyof ContextKeys): any;
    withSession(value?: string): this;
    withThread(value?: ThreadID): this;
    withThreadName(value?: string): this;
    withOrg(value?: string): this;
    withToken(value?: string): this;
    withAPIKey(value?: string): this;
    withAPISig(value?: {
        sig: string;
        msg: string;
    }): this;
    withContext(value?: Context): this;
    toJSON(): {
        [x: string]: any;
        [x: number]: any;
    };
    toMetadata(): grpc.Metadata;
    static fromJSON(json: ContextKeys, host?: HostString, debug?: boolean, transport?: grpc.TransportFactory): Context;
    withUserKey(key?: KeyInfo, date?: Date): Promise<this>;
}
export {};
