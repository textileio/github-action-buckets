"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const _1 = require(".");
describe('Thread ID', () => {
    it('should be able to create a random ID', () => {
        const i = _1.ThreadID.fromRandom(_1.ThreadID.Variant.Raw, 16);
        chai_1.expect(i).to.not.be.undefined;
        chai_1.expect(i.toBytes()).to.have.length(18);
        chai_1.expect(i.isDefined()).to.be.true;
    });
    it('should decode an ID from a base-32 encoded string', () => {
        const i = _1.ThreadID.fromRandom(_1.ThreadID.Variant.Raw, 32);
        const j = _1.ThreadID.fromString(i.toString());
        chai_1.expect(i.toString()).to.equal(j.toString());
    });
    it('should be able to extract the encoding', () => {
        const i = _1.ThreadID.fromRandom(_1.ThreadID.Variant.Raw, 16);
        const e = _1.ThreadID.getEncoding(i.toString());
        chai_1.expect(e).to.equal('base32');
    });
    it('should have a valid version number', () => {
        const i = _1.ThreadID.fromRandom(_1.ThreadID.Variant.Raw, 16);
        const v = i.version();
        chai_1.expect(v).to.equal(_1.ThreadID.V1);
    });
    it('should have a valid variant number', () => {
        let i = _1.ThreadID.fromRandom(_1.ThreadID.Variant.Raw, 16);
        let v = i.variant();
        chai_1.expect(v).to.equal(_1.ThreadID.Variant.Raw);
        i = _1.ThreadID.fromRandom(_1.ThreadID.Variant.AccessControlled, 32);
        v = i.variant();
        chai_1.expect(v).to.equal(_1.ThreadID.Variant.AccessControlled);
    });
    it('should be able to round-trip to and from bytes', () => {
        const i = _1.ThreadID.fromRandom(_1.ThreadID.Variant.Raw, 16);
        const b = i.toBytes();
        const n = _1.ThreadID.fromBytes(b);
        chai_1.expect(n).to.deep.equal(i);
        chai_1.expect(i.equals(n)).to.be.true;
    });
});
//# sourceMappingURL=index.spec.js.map