var textile=function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=26)}([function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var o=r(27),n=r(28),s=r(29);function i(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return p(this,e)}return g(this,e,t,r)}function g(e,t,r,o){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,o){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(o||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===o?new Uint8Array(t):void 0===o?new Uint8Array(t,r):new Uint8Array(t,r,o);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=c(e,t);return e}(e,t,r,o):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var o=0|d(t,r),n=(e=a(e,o)).write(t,r);n!==o&&(e=e.slice(0,n));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|h(t.length);return 0===(e=a(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(o=t.length)!=o?a(e,0):c(e,t);if("Buffer"===t.type&&s(t.data))return c(e,t.data)}var o;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function p(e,t){if(l(t),e=a(e,t<0?0:0|h(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function c(e,t){var r=t.length<0?0:0|h(t.length);e=a(e,r);for(var o=0;o<r;o+=1)e[o]=255&t[o];return e}function h(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function d(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var o=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return x(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return W(e).length;default:if(o)return x(e).length;t=(""+t).toLowerCase(),o=!0}}function f(e,t,r){var o=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return I(this,t,r);case"utf8":case"utf-8":return w(this,t,r);case"ascii":return O(this,t,r);case"latin1":case"binary":return k(this,t,r);case"base64":return A(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return M(this,t,r);default:if(o)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),o=!0}}function b(e,t,r){var o=e[t];e[t]=e[r],e[r]=o}function y(e,t,r,o,n){if(0===e.length)return-1;if("string"==typeof r?(o=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=n?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(n)return-1;r=e.length-1}else if(r<0){if(!n)return-1;r=0}if("string"==typeof t&&(t=u.from(t,o)),u.isBuffer(t))return 0===t.length?-1:m(e,t,r,o,n);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?n?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):m(e,[t],r,o,n);throw new TypeError("val must be string, number or Buffer")}function m(e,t,r,o,n){var s,i=1,a=e.length,u=t.length;if(void 0!==o&&("ucs2"===(o=String(o).toLowerCase())||"ucs-2"===o||"utf16le"===o||"utf-16le"===o)){if(e.length<2||t.length<2)return-1;i=2,a/=2,u/=2,r/=2}function g(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(n){var l=-1;for(s=r;s<a;s++)if(g(e,s)===g(t,-1===l?0:s-l)){if(-1===l&&(l=s),s-l+1===u)return l*i}else-1!==l&&(s-=s-l),l=-1}else for(r+u>a&&(r=a-u),s=r;s>=0;s--){for(var p=!0,c=0;c<u;c++)if(g(e,s+c)!==g(t,c)){p=!1;break}if(p)return s}return-1}function S(e,t,r,o){r=Number(r)||0;var n=e.length-r;o?(o=Number(o))>n&&(o=n):o=n;var s=t.length;if(s%2!=0)throw new TypeError("Invalid hex string");o>s/2&&(o=s/2);for(var i=0;i<o;++i){var a=parseInt(t.substr(2*i,2),16);if(isNaN(a))return i;e[r+i]=a}return i}function _(e,t,r,o){return q(x(t,e.length-r),e,r,o)}function R(e,t,r,o){return q(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,o)}function E(e,t,r,o){return R(e,t,r,o)}function T(e,t,r,o){return q(W(t),e,r,o)}function v(e,t,r,o){return q(function(e,t){for(var r,o,n,s=[],i=0;i<e.length&&!((t-=2)<0);++i)r=e.charCodeAt(i),o=r>>8,n=r%256,s.push(n),s.push(o);return s}(t,e.length-r),e,r,o)}function A(e,t,r){return 0===t&&r===e.length?o.fromByteArray(e):o.fromByteArray(e.slice(t,r))}function w(e,t,r){r=Math.min(e.length,r);for(var o=[],n=t;n<r;){var s,i,a,u,g=e[n],l=null,p=g>239?4:g>223?3:g>191?2:1;if(n+p<=r)switch(p){case 1:g<128&&(l=g);break;case 2:128==(192&(s=e[n+1]))&&(u=(31&g)<<6|63&s)>127&&(l=u);break;case 3:s=e[n+1],i=e[n+2],128==(192&s)&&128==(192&i)&&(u=(15&g)<<12|(63&s)<<6|63&i)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:s=e[n+1],i=e[n+2],a=e[n+3],128==(192&s)&&128==(192&i)&&128==(192&a)&&(u=(15&g)<<18|(63&s)<<12|(63&i)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,p=1):l>65535&&(l-=65536,o.push(l>>>10&1023|55296),l=56320|1023&l),o.push(l),n+=p}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",o=0;for(;o<t;)r+=String.fromCharCode.apply(String,e.slice(o,o+=4096));return r}(o)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=i(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return g(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,o){return l(t),t<=0?a(e,t):void 0!==r?"string"==typeof o?a(e,t).fill(r,o):a(e,t).fill(r):a(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return p(null,e)},u.allocUnsafeSlow=function(e){return p(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,o=t.length,n=0,s=Math.min(r,o);n<s;++n)if(e[n]!==t[n]){r=e[n],o=t[n];break}return r<o?-1:o<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!s(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var o=u.allocUnsafe(t),n=0;for(r=0;r<e.length;++r){var i=e[r];if(!u.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(o,n),n+=i.length}return o},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)b(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)b(this,t,t+3),b(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)b(this,t,t+7),b(this,t+1,t+6),b(this,t+2,t+5),b(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?w(this,0,e):f.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,o,n){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===o&&(o=0),void 0===n&&(n=this.length),t<0||r>e.length||o<0||n>this.length)throw new RangeError("out of range index");if(o>=n&&t>=r)return 0;if(o>=n)return-1;if(t>=r)return 1;if(this===e)return 0;for(var s=(n>>>=0)-(o>>>=0),i=(r>>>=0)-(t>>>=0),a=Math.min(s,i),g=this.slice(o,n),l=e.slice(t,r),p=0;p<a;++p)if(g[p]!==l[p]){s=g[p],i=l[p];break}return s<i?-1:i<s?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return y(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return y(this,e,t,r,!1)},u.prototype.write=function(e,t,r,o){if(void 0===t)o="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)o=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===o&&(o="utf8")):(o=r,r=void 0)}var n=this.length-t;if((void 0===r||r>n)&&(r=n),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");o||(o="utf8");for(var s=!1;;)switch(o){case"hex":return S(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":return R(this,e,t,r);case"latin1":case"binary":return E(this,e,t,r);case"base64":return T(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return v(this,e,t,r);default:if(s)throw new TypeError("Unknown encoding: "+o);o=(""+o).toLowerCase(),s=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function O(e,t,r){var o="";r=Math.min(e.length,r);for(var n=t;n<r;++n)o+=String.fromCharCode(127&e[n]);return o}function k(e,t,r){var o="";r=Math.min(e.length,r);for(var n=t;n<r;++n)o+=String.fromCharCode(e[n]);return o}function I(e,t,r){var o=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>o)&&(r=o);for(var n="",s=t;s<r;++s)n+=F(e[s]);return n}function M(e,t,r){for(var o=e.slice(t,r),n="",s=0;s<o.length;s+=2)n+=String.fromCharCode(o[s]+256*o[s+1]);return n}function B(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function j(e,t,r,o,n,s){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>n||t<s)throw new RangeError('"value" argument is out of bounds');if(r+o>e.length)throw new RangeError("Index out of range")}function P(e,t,r,o){t<0&&(t=65535+t+1);for(var n=0,s=Math.min(e.length-r,2);n<s;++n)e[r+n]=(t&255<<8*(o?n:1-n))>>>8*(o?n:1-n)}function L(e,t,r,o){t<0&&(t=4294967295+t+1);for(var n=0,s=Math.min(e.length-r,4);n<s;++n)e[r+n]=t>>>8*(o?n:3-n)&255}function N(e,t,r,o,n,s){if(r+o>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function C(e,t,r,o,s){return s||N(e,0,r,4),n.write(e,t,r,o,23,4),r+4}function U(e,t,r,o,s){return s||N(e,0,r,8),n.write(e,t,r,o,52,8),r+8}u.prototype.slice=function(e,t){var r,o=this.length;if((e=~~e)<0?(e+=o)<0&&(e=0):e>o&&(e=o),(t=void 0===t?o:~~t)<0?(t+=o)<0&&(t=0):t>o&&(t=o),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var n=t-e;r=new u(n,void 0);for(var s=0;s<n;++s)r[s]=this[s+e]}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||B(e,t,this.length);for(var o=this[e],n=1,s=0;++s<t&&(n*=256);)o+=this[e+s]*n;return o},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||B(e,t,this.length);for(var o=this[e+--t],n=1;t>0&&(n*=256);)o+=this[e+--t]*n;return o},u.prototype.readUInt8=function(e,t){return t||B(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||B(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||B(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||B(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||B(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||B(e,t,this.length);for(var o=this[e],n=1,s=0;++s<t&&(n*=256);)o+=this[e+s]*n;return o>=(n*=128)&&(o-=Math.pow(2,8*t)),o},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||B(e,t,this.length);for(var o=t,n=1,s=this[e+--o];o>0&&(n*=256);)s+=this[e+--o]*n;return s>=(n*=128)&&(s-=Math.pow(2,8*t)),s},u.prototype.readInt8=function(e,t){return t||B(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||B(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||B(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||B(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||B(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||B(e,4,this.length),n.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||B(e,4,this.length),n.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||B(e,8,this.length),n.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||B(e,8,this.length),n.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,o){(e=+e,t|=0,r|=0,o)||j(this,e,t,r,Math.pow(2,8*r)-1,0);var n=1,s=0;for(this[t]=255&e;++s<r&&(n*=256);)this[t+s]=e/n&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,o){(e=+e,t|=0,r|=0,o)||j(this,e,t,r,Math.pow(2,8*r)-1,0);var n=r-1,s=1;for(this[t+n]=255&e;--n>=0&&(s*=256);)this[t+n]=e/s&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||j(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||j(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||j(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||j(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):L(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||j(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):L(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,o){if(e=+e,t|=0,!o){var n=Math.pow(2,8*r-1);j(this,e,t,r,n-1,-n)}var s=0,i=1,a=0;for(this[t]=255&e;++s<r&&(i*=256);)e<0&&0===a&&0!==this[t+s-1]&&(a=1),this[t+s]=(e/i>>0)-a&255;return t+r},u.prototype.writeIntBE=function(e,t,r,o){if(e=+e,t|=0,!o){var n=Math.pow(2,8*r-1);j(this,e,t,r,n-1,-n)}var s=r-1,i=1,a=0;for(this[t+s]=255&e;--s>=0&&(i*=256);)e<0&&0===a&&0!==this[t+s+1]&&(a=1),this[t+s]=(e/i>>0)-a&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||j(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||j(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||j(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||j(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):L(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||j(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):L(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return C(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return C(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return U(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return U(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,o){if(r||(r=0),o||0===o||(o=this.length),t>=e.length&&(t=e.length),t||(t=0),o>0&&o<r&&(o=r),o===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(o<0)throw new RangeError("sourceEnd out of bounds");o>this.length&&(o=this.length),e.length-t<o-r&&(o=e.length-t+r);var n,s=o-r;if(this===e&&r<t&&t<o)for(n=s-1;n>=0;--n)e[n+t]=this[n+r];else if(s<1e3||!u.TYPED_ARRAY_SUPPORT)for(n=0;n<s;++n)e[n+t]=this[n+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+s),t);return s},u.prototype.fill=function(e,t,r,o){if("string"==typeof e){if("string"==typeof t?(o=t,t=0,r=this.length):"string"==typeof r&&(o=r,r=this.length),1===e.length){var n=e.charCodeAt(0);n<256&&(e=n)}if(void 0!==o&&"string"!=typeof o)throw new TypeError("encoding must be a string");if("string"==typeof o&&!u.isEncoding(o))throw new TypeError("Unknown encoding: "+o)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var s;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(s=t;s<r;++s)this[s]=e;else{var i=u.isBuffer(e)?e:x(new u(e,o).toString()),a=i.length;for(s=0;s<r-t;++s)this[s+t]=i[s%a]}return this};var D=/[^+\/0-9A-Za-z-_]/g;function F(e){return e<16?"0"+e.toString(16):e.toString(16)}function x(e,t){var r;t=t||1/0;for(var o=e.length,n=null,s=[],i=0;i<o;++i){if((r=e.charCodeAt(i))>55295&&r<57344){if(!n){if(r>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(i+1===o){(t-=3)>-1&&s.push(239,191,189);continue}n=r;continue}if(r<56320){(t-=3)>-1&&s.push(239,191,189),n=r;continue}r=65536+(n-55296<<10|r-56320)}else n&&(t-=3)>-1&&s.push(239,191,189);if(n=null,r<128){if((t-=1)<0)break;s.push(r)}else if(r<2048){if((t-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function W(e){return o.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(D,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function q(e,t,r,o){for(var n=0;n<o&&!(n+r>=t.length||n>=e.length);++n)t[n+r]=e[n];return n}}).call(this,r(6))},function(e,t,r){"use strict";var o=r(16),n=Object.prototype.toString;function s(e){return"[object Array]"===n.call(e)}function i(e){return void 0===e}function a(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===n.call(e)}function g(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),s(e))for(var r=0,o=e.length;r<o;r++)t.call(null,e[r],r,e);else for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.call(null,e[n],n,e)}e.exports={isArray:s,isArrayBuffer:function(e){return"[object ArrayBuffer]"===n.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:i,isDate:function(e){return"[object Date]"===n.call(e)},isFile:function(e){return"[object File]"===n.call(e)},isBlob:function(e){return"[object Blob]"===n.call(e)},isFunction:u,isStream:function(e){return a(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:g,merge:function e(){var t={};function r(r,o){"object"==typeof t[o]&&"object"==typeof r?t[o]=e(t[o],r):t[o]=r}for(var o=0,n=arguments.length;o<n;o++)g(arguments[o],r);return t},deepMerge:function e(){var t={};function r(r,o){"object"==typeof t[o]&&"object"==typeof r?t[o]=e(t[o],r):t[o]="object"==typeof r?e({},r):r}for(var o=0,n=arguments.length;o<n;o++)g(arguments[o],r);return t},extend:function(e,t,r){return g(t,(function(t,n){e[n]=r&&"function"==typeof t?o(t,r):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){e.exports=function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=11)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(4);t.Metadata=o.BrowserHeaders},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.debug?console.debug.apply(null,e):console.log.apply(null,e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=null;t.default=function(e){null===o?(o=[e],setTimeout((function(){!function e(){if(o){var t=o;o=null;for(var r=0;r<t.length;r++)try{t[r]()}catch(s){null===o&&(o=[],setTimeout((function(){e()}),0));for(var n=t.length-1;n>r;n--)o.unshift(t[n]);throw s}}}()}),0)):o.push(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(0),n=r(9),s=r(10),i=r(1),a=r(2),u=r(5),g=r(15);t.client=function(e,t){return new l(e,t)};var l=function(){function e(e,t){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new n.ChunkParser,this.methodDefinition=e,this.props=t,this.createTransport()}return e.prototype.createTransport=function(){var e=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,t={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:e,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(t):this.transport=u.makeDefaultTransport(t)},e.prototype.onTransportHeaders=function(e,t){if(this.props.debug&&i.debug("onHeaders",e,t),this.closed)this.props.debug&&i.debug("grpc.onHeaders received after request was closed - ignoring");else if(0===t);else{this.responseHeaders=e,this.props.debug&&i.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var r=p(e);this.props.debug&&i.debug("onHeaders.gRPCStatus",r);var o=r&&r>=0?r:s.httpStatusToCode(t);this.props.debug&&i.debug("onHeaders.code",o);var n=e.get("grpc-message")||[];if(this.props.debug&&i.debug("onHeaders.gRPCMessage",n),this.rawOnHeaders(e),o!==s.Code.OK){var a=this.decodeGRPCStatus(n[0]);this.rawOnError(o,a,e)}}},e.prototype.onTransportChunk=function(e){var t=this;if(this.closed)this.props.debug&&i.debug("grpc.onChunk received after request was closed - ignoring");else{var r=[];try{r=this.parser.parse(e)}catch(e){return this.props.debug&&i.debug("onChunk.parsing error",e,e.message),void this.rawOnError(s.Code.Internal,"parsing error: "+e.message)}r.forEach((function(e){if(e.chunkType===n.ChunkType.MESSAGE){var r=t.methodDefinition.responseType.deserializeBinary(e.data);t.rawOnMessage(r)}else e.chunkType===n.ChunkType.TRAILERS&&(t.responseHeaders?(t.responseTrailers=new o.Metadata(e.trailers),t.props.debug&&i.debug("onChunk.trailers",t.responseTrailers)):(t.responseHeaders=new o.Metadata(e.trailers),t.rawOnHeaders(t.responseHeaders)))}))}},e.prototype.onTransportEnd=function(){if(this.props.debug&&i.debug("grpc.onEnd"),this.closed)this.props.debug&&i.debug("grpc.onEnd received after request was closed - ignoring");else if(void 0!==this.responseTrailers){var e=p(this.responseTrailers);if(null!==e){var t=this.responseTrailers.get("grpc-message"),r=this.decodeGRPCStatus(t[0]);this.rawOnEnd(e,r,this.responseTrailers)}else this.rawOnError(s.Code.Internal,"Response closed without grpc-status (Trailers provided)")}else{if(void 0===this.responseHeaders)return void this.rawOnError(s.Code.Unknown,"Response closed without headers");var o=p(this.responseHeaders),n=this.responseHeaders.get("grpc-message");if(this.props.debug&&i.debug("grpc.headers only response ",o,n),null===o)return void this.rawOnEnd(s.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var a=this.decodeGRPCStatus(n[0]);this.rawOnEnd(o,a,this.responseHeaders)}},e.prototype.decodeGRPCStatus=function(e){if(!e)return"";try{return decodeURIComponent(e)}catch(t){return e}},e.prototype.rawOnEnd=function(e,t,r){var o=this;this.props.debug&&i.debug("rawOnEnd",e,t,r),this.completed||(this.completed=!0,this.onEndCallbacks.forEach((function(n){a.default((function(){o.closed||n(e,t,r)}))})))},e.prototype.rawOnHeaders=function(e){this.props.debug&&i.debug("rawOnHeaders",e),this.completed||this.onHeadersCallbacks.forEach((function(t){a.default((function(){t(e)}))}))},e.prototype.rawOnError=function(e,t,r){var n=this;void 0===r&&(r=new o.Metadata),this.props.debug&&i.debug("rawOnError",e,t),this.completed||(this.completed=!0,this.onEndCallbacks.forEach((function(o){a.default((function(){n.closed||o(e,t,r)}))})))},e.prototype.rawOnMessage=function(e){var t=this;this.props.debug&&i.debug("rawOnMessage",e.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach((function(r){a.default((function(){t.closed||r(e)}))}))},e.prototype.onHeaders=function(e){this.onHeadersCallbacks.push(e)},e.prototype.onMessage=function(e){this.onMessageCallbacks.push(e)},e.prototype.onEnd=function(e){this.onEndCallbacks.push(e)},e.prototype.start=function(e){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var t=new o.Metadata(e||{});t.set("content-type","application/grpc-web+proto"),t.set("x-grpc-web","1"),this.transport.start(t)},e.prototype.send=function(e){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var t=g.frameRequest(e);this.transport.sendMessage(t)},e.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend()},e.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&i.debug("request.abort aborting request"),this.transport.cancel()},e}();function p(e){var t=e.get("grpc-status")||[];if(t.length>0)try{var r=t[0];return parseInt(r,10)}catch(e){return null}return null}},function(e,t,r){var o;o=function(){return function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.i=function(e){return e},r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(3),n=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={splitValues:!1});var r,n=this;this.headersMap={},e&&("undefined"!=typeof Headers&&e instanceof Headers?o.getHeaderKeys(e).forEach((function(r){o.getHeaderValues(e,r).forEach((function(e){t.splitValues?n.append(r,o.splitHeaderValue(e)):n.append(r,e)}))})):"object"==typeof(r=e)&&"object"==typeof r.headersMap&&"function"==typeof r.forEach?e.forEach((function(e,t){n.append(e,t)})):"undefined"!=typeof Map&&e instanceof Map?e.forEach((function(e,t){n.append(t,e)})):"string"==typeof e?this.appendFromString(e):"object"==typeof e&&Object.getOwnPropertyNames(e).forEach((function(t){var r=e[t];Array.isArray(r)?r.forEach((function(e){n.append(t,e)})):n.append(t,r)})))}return e.prototype.appendFromString=function(e){for(var t=e.split("\r\n"),r=0;r<t.length;r++){var o=t[r],n=o.indexOf(":");if(n>0){var s=o.substring(0,n).trim(),i=o.substring(n+1).trim();this.append(s,i)}}},e.prototype.delete=function(e,t){var r=o.normalizeName(e);if(void 0===t)delete this.headersMap[r];else{var n=this.headersMap[r];if(n){var s=n.indexOf(t);s>=0&&n.splice(s,1),0===n.length&&delete this.headersMap[r]}}},e.prototype.append=function(e,t){var r=this,n=o.normalizeName(e);Array.isArray(this.headersMap[n])||(this.headersMap[n]=[]),Array.isArray(t)?t.forEach((function(e){r.headersMap[n].push(o.normalizeValue(e))})):this.headersMap[n].push(o.normalizeValue(t))},e.prototype.set=function(e,t){var r=o.normalizeName(e);if(Array.isArray(t)){var n=[];t.forEach((function(e){n.push(o.normalizeValue(e))})),this.headersMap[r]=n}else this.headersMap[r]=[o.normalizeValue(t)]},e.prototype.has=function(e,t){var r=this.headersMap[o.normalizeName(e)];if(!Array.isArray(r))return!1;if(void 0!==t){var n=o.normalizeValue(t);return r.indexOf(n)>=0}return!0},e.prototype.get=function(e){var t=this.headersMap[o.normalizeName(e)];return void 0!==t?t.concat():[]},e.prototype.forEach=function(e){var t=this;Object.getOwnPropertyNames(this.headersMap).forEach((function(r){e(r,t.headersMap[r])}),this)},e.prototype.toHeaders=function(){if("undefined"!=typeof Headers){var e=new Headers;return this.forEach((function(t,r){r.forEach((function(r){e.append(t,r)}))})),e}throw new Error("Headers class is not defined")},e}();t.BrowserHeaders=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(0);t.BrowserHeaders=o.BrowserHeaders},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.iterateHeaders=function(e,t){for(var r=e[Symbol.iterator](),o=r.next();!o.done;)t(o.value[0]),o=r.next()},t.iterateHeadersKeys=function(e,t){for(var r=e.keys(),o=r.next();!o.done;)t(o.value),o=r.next()}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(2);t.normalizeName=function(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()},t.normalizeValue=function(e){return"string"!=typeof e&&(e=String(e)),e},t.getHeaderValues=function(e,t){var r=e;if(r instanceof Headers&&r.getAll)return r.getAll(t);var o=r.get(t);return o&&"string"==typeof o?[o]:o},t.getHeaderKeys=function(e){var t=e,r={},n=[];return t.keys?o.iterateHeadersKeys(t,(function(e){r[e]||(r[e]=!0,n.push(e))})):t.forEach?t.forEach((function(e,t){r[t]||(r[t]=!0,n.push(t))})):o.iterateHeaders(t,(function(e){var t=e[0];r[t]||(r[t]=!0,n.push(t))})),n},t.splitHeaderValue=function(e){var t=[];return e.split(", ").forEach((function(e){e.split(",").forEach((function(e){t.push(e)}))})),t}}])},e.exports=o()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(6),n=function(e){return o.CrossBrowserHttpTransport({withCredentials:!1})(e)};t.setDefaultTransportFactory=function(e){n=e},t.makeDefaultTransport=function(e){return n(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(7),n=r(8);t.CrossBrowserHttpTransport=function(e){if(o.detectFetchSupport()){var t={credentials:e.withCredentials?"include":"same-origin"};return o.FetchReadableStreamTransport(t)}return n.XhrTransport({withCredentials:e.withCredentials})}},function(e,t,r){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(e){for(var t,r=1,o=arguments.length;r<o;r++)for(var n in t=arguments[r])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var n=r(0),s=r(1),i=r(2);t.FetchReadableStreamTransport=function(e){return function(t){return function(e,t){return e.debug&&s.debug("fetchRequest",e),new a(e,t)}(t,e)}};var a=function(){function e(e,t){this.cancelled=!1,this.controller=self.AbortController&&new AbortController,this.options=e,this.init=t}return e.prototype.pump=function(e,t){var r=this;if(this.reader=e,this.cancelled)return this.options.debug&&s.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel();this.reader.read().then((function(e){if(e.done)return i.default((function(){r.options.onEnd()})),t;i.default((function(){r.options.onChunk(e.value)})),r.pump(r.reader,t)})).catch((function(e){r.cancelled?r.options.debug&&s.debug("Fetch.catch - request cancelled"):(r.cancelled=!0,r.options.debug&&s.debug("Fetch.catch",e.message),i.default((function(){r.options.onEnd(e)})))}))},e.prototype.send=function(e){var t=this;fetch(this.options.url,o({},this.init,{headers:this.metadata.toHeaders(),method:"POST",body:e,signal:this.controller&&this.controller.signal})).then((function(e){if(t.options.debug&&s.debug("Fetch.response",e),i.default((function(){t.options.onHeaders(new n.Metadata(e.headers),e.status)})),!e.body)return e;t.pump(e.body.getReader(),e)})).catch((function(e){t.cancelled?t.options.debug&&s.debug("Fetch.catch - request cancelled"):(t.cancelled=!0,t.options.debug&&s.debug("Fetch.catch",e.message),i.default((function(){t.options.onEnd(e)})))}))},e.prototype.sendMessage=function(e){this.send(e)},e.prototype.finishSend=function(){},e.prototype.start=function(e){this.metadata=e},e.prototype.cancel=function(){this.cancelled?this.options.debug&&s.debug("Fetch.abort.cancel already cancelled"):(this.cancelled=!0,this.reader?(this.options.debug&&s.debug("Fetch.abort.cancel"),this.reader.cancel()):this.options.debug&&s.debug("Fetch.abort.cancel before reader"),this.controller&&this.controller.abort())},e}();t.detectFetchSupport=function(){return"undefined"!=typeof Response&&Response.prototype.hasOwnProperty("body")&&"function"==typeof Headers}},function(e,t,r){"use strict";var o,n=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var s=r(0),i=r(1),a=r(2),u=r(12);t.XhrTransport=function(e){return function(t){if(u.detectMozXHRSupport())return new l(t,e);if(u.detectXHROverrideMimeTypeSupport())return new g(t,e);throw new Error("This environment's XHR implementation cannot support binary transfer.")}};var g=function(){function e(e,t){this.options=e,this.init=t}return e.prototype.onProgressEvent=function(){var e=this;this.options.debug&&i.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var t=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var r=c(t);a.default((function(){e.options.onChunk(r)}))},e.prototype.onLoadEvent=function(){var e=this;this.options.debug&&i.debug("XHR.onLoadEvent"),a.default((function(){e.options.onEnd()}))},e.prototype.onStateChange=function(){var e=this;this.options.debug&&i.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&a.default((function(){e.options.onHeaders(new s.Metadata(e.xhr.getAllResponseHeaders()),e.xhr.status)}))},e.prototype.sendMessage=function(e){this.xhr.send(e)},e.prototype.finishSend=function(){},e.prototype.start=function(e){var t=this;this.metadata=e;var r=new XMLHttpRequest;this.xhr=r,r.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach((function(e,t){r.setRequestHeader(e,t.join(", "))})),r.withCredentials=Boolean(this.init.withCredentials),r.addEventListener("readystatechange",this.onStateChange.bind(this)),r.addEventListener("progress",this.onProgressEvent.bind(this)),r.addEventListener("loadend",this.onLoadEvent.bind(this)),r.addEventListener("error",(function(e){t.options.debug&&i.debug("XHR.error",e),a.default((function(){t.options.onEnd(e.error)}))}))},e.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined")},e.prototype.cancel=function(){this.options.debug&&i.debug("XHR.abort"),this.xhr.abort()},e}();t.XHR=g;var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n(t,e),t.prototype.configureXhr=function(){this.options.debug&&i.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer"},t.prototype.onProgressEvent=function(){var e=this,t=this.xhr.response;this.options.debug&&i.debug("MozXHR.onProgressEvent: ",new Uint8Array(t)),a.default((function(){e.options.onChunk(new Uint8Array(t))}))},t}(g);function p(e,t){var r=e.charCodeAt(t);if(r>=55296&&r<=56319){var o=e.charCodeAt(t+1);o>=56320&&o<=57343&&(r=65536+(r-55296<<10)+(o-56320))}return r}function c(e){for(var t=new Uint8Array(e.length),r=0,o=0;o<e.length;o++){var n=String.prototype.codePointAt?e.codePointAt(o):p(e,o);t[r++]=255&n}return t}t.MozChunkedArrayBufferXHR=l,t.stringToArrayBuffer=c},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,n=r(0);function s(e){return function(e){return 9===e||10===e||13===e}(e)||e>=32&&e<=126}function i(e){for(var t=0;t!==e.length;++t)if(!s(e[t]))throw new Error("Metadata is not valid (printable) ASCII");return String.fromCharCode.apply(String,Array.prototype.slice.call(e))}function a(e){return 128==(128&e.getUint8(0))}function u(e){return e.getUint32(1,!1)}function g(e,t,r){return e.byteLength-t>=r}function l(e,t,r){if(e.slice)return e.slice(t,r);var o=e.length;void 0!==r&&(o=r);for(var n=new Uint8Array(o-t),s=0,i=t;i<o;i++)n[s++]=e[i];return n}t.decodeASCII=i,t.encodeASCII=function(e){for(var t=new Uint8Array(e.length),r=0;r!==e.length;++r){var o=e.charCodeAt(r);if(!s(o))throw new Error("Metadata contains invalid ASCII");t[r]=o}return t},function(e){e[e.MESSAGE=1]="MESSAGE",e[e.TRAILERS=2]="TRAILERS"}(o=t.ChunkType||(t.ChunkType={}));var p=function(){function e(){this.buffer=null,this.position=0}return e.prototype.parse=function(e,t){if(0===e.length&&t)return[];var r,s=[];if(null==this.buffer)this.buffer=e,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=e,this.position=0;else{var p=this.buffer.byteLength-this.position,c=new Uint8Array(p+e.byteLength),h=l(this.buffer,this.position);c.set(h,0);var d=new Uint8Array(e);c.set(d,p),this.buffer=c,this.position=0}for(;;){if(!g(this.buffer,this.position,5))return s;var f=l(this.buffer,this.position,this.position+5),b=new DataView(f.buffer,f.byteOffset,f.byteLength),y=u(b);if(!g(this.buffer,this.position,5+y))return s;var m=l(this.buffer,this.position+5,this.position+5+y);if(this.position+=5+y,a(b))return s.push({chunkType:o.TRAILERS,trailers:(r=m,new n.Metadata(i(r)))}),s;s.push({chunkType:o.MESSAGE,data:m})}},e}();t.ChunkParser=p},function(e,t,r){"use strict";var o;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.OK=0]="OK",e[e.Canceled=1]="Canceled",e[e.Unknown=2]="Unknown",e[e.InvalidArgument=3]="InvalidArgument",e[e.DeadlineExceeded=4]="DeadlineExceeded",e[e.NotFound=5]="NotFound",e[e.AlreadyExists=6]="AlreadyExists",e[e.PermissionDenied=7]="PermissionDenied",e[e.ResourceExhausted=8]="ResourceExhausted",e[e.FailedPrecondition=9]="FailedPrecondition",e[e.Aborted=10]="Aborted",e[e.OutOfRange=11]="OutOfRange",e[e.Unimplemented=12]="Unimplemented",e[e.Internal=13]="Internal",e[e.Unavailable=14]="Unavailable",e[e.DataLoss=15]="DataLoss",e[e.Unauthenticated=16]="Unauthenticated"}(o=t.Code||(t.Code={})),t.httpStatusToCode=function(e){switch(e){case 0:return o.Internal;case 200:return o.OK;case 400:return o.InvalidArgument;case 401:return o.Unauthenticated;case 403:return o.PermissionDenied;case 404:return o.NotFound;case 409:return o.Aborted;case 412:return o.FailedPrecondition;case 429:return o.ResourceExhausted;case 499:return o.Canceled;case 500:return o.Unknown;case 501:return o.Unimplemented;case 503:return o.Unavailable;case 504:return o.DeadlineExceeded;default:return o.Unknown}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(4),n=r(5),s=r(7),i=r(13),a=r(8),u=r(6),g=r(10),l=r(14),p=r(16),c=r(3);!function(e){e.setDefaultTransport=n.setDefaultTransportFactory,e.CrossBrowserHttpTransport=u.CrossBrowserHttpTransport,e.FetchReadableStreamTransport=s.FetchReadableStreamTransport,e.XhrTransport=a.XhrTransport,e.WebsocketTransport=i.WebsocketTransport,e.Code=g.Code,e.Metadata=o.BrowserHeaders,e.client=function(e,t){return c.client(e,t)},e.invoke=l.invoke,e.unary=p.unary}(t.grpc||(t.grpc={}))},function(e,t,r){"use strict";var o;function n(e){var t=function(){if(void 0!==o)return o;if(XMLHttpRequest){o=new XMLHttpRequest;try{o.open("GET","https://localhost")}catch(e){}}return o}();if(!t)return!1;try{return t.responseType=e,t.responseType===e}catch(e){}return!1}Object.defineProperty(t,"__esModule",{value:!0}),t.xhrSupportsResponseType=n,t.detectMozXHRSupport=function(){return"undefined"!=typeof XMLHttpRequest&&n("moz-chunked-arraybuffer")},t.detectXHROverrideMimeTypeSupport=function(){return"undefined"!=typeof XMLHttpRequest&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType")}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,n=r(1),s=r(2),i=r(9);!function(e){e[e.FINISH_SEND=1]="FINISH_SEND"}(o||(o={}));var a=new Uint8Array([1]);t.WebsocketTransport=function(){return function(e){return function(e){e.debug&&n.debug("websocketRequest",e);var t,r=function(e){if("https://"===e.substr(0,8))return"wss://"+e.substr(8);if("http://"===e.substr(0,7))return"ws://"+e.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.")}(e.url),u=[];function g(e){if(e===o.FINISH_SEND)t.send(a);else{var r=e,n=new Int8Array(r.byteLength+1);n.set(new Uint8Array([0])),n.set(r,1),t.send(n)}}return{sendMessage:function(e){t&&t.readyState!==t.CONNECTING?g(e):u.push(e)},finishSend:function(){t&&t.readyState!==t.CONNECTING?g(o.FINISH_SEND):u.push(o.FINISH_SEND)},start:function(o){(t=new WebSocket(r,["grpc-websockets"])).binaryType="arraybuffer",t.onopen=function(){var r;e.debug&&n.debug("websocketRequest.onopen"),t.send((r="",o.forEach((function(e,t){r+=e+": "+t.join(", ")+"\r\n"})),i.encodeASCII(r))),u.forEach((function(e){g(e)}))},t.onclose=function(t){e.debug&&n.debug("websocketRequest.onclose",t),s.default((function(){e.onEnd()}))},t.onerror=function(t){e.debug&&n.debug("websocketRequest.onerror",t)},t.onmessage=function(t){s.default((function(){e.onChunk(new Uint8Array(t.data))}))}},cancel:function(){e.debug&&n.debug("websocket.abort"),s.default((function(){t.close()}))}}}(e)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(3);t.invoke=function(e,t){if(e.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var r=o.client(e,{host:t.host,transport:t.transport,debug:t.debug});return t.onHeaders&&r.onHeaders(t.onHeaders),t.onMessage&&r.onMessage(t.onMessage),t.onEnd&&r.onEnd(t.onEnd),r.start(t.metadata),r.send(t.request),r.finishSend(),{close:function(){r.close()}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.frameRequest=function(e){var t=e.serializeBinary(),r=new ArrayBuffer(t.byteLength+5);return new DataView(r,1,4).setUint32(0,t.length,!1),new Uint8Array(r,5).set(t),new Uint8Array(r)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=r(0),n=r(3);t.unary=function(e,t){if(e.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(e.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var r=null,s=null,i=n.client(e,{host:t.host,transport:t.transport,debug:t.debug});return i.onHeaders((function(e){r=e})),i.onMessage((function(e){s=e})),i.onEnd((function(e,n,i){t.onEnd({status:e,statusMessage:n,headers:r||new o.Metadata,message:s,trailers:i})})),i.start(t.metadata),i.send(t.request),i.finishSend(),{close:function(){i.close()}}}}])},function(e){e.exports=JSON.parse('{"identity":0,"ip4":4,"tcp":6,"sha1":17,"sha2-256":18,"sha2-512":19,"sha3-512":20,"sha3-384":21,"sha3-256":22,"sha3-224":23,"shake-128":24,"shake-256":25,"keccak-224":26,"keccak-256":27,"keccak-384":28,"keccak-512":29,"dccp":33,"murmur3-128":34,"murmur3-32":35,"ip6":41,"ip6zone":42,"path":47,"multicodec":48,"multihash":49,"multiaddr":50,"multibase":51,"dns":53,"dns4":54,"dns6":55,"dnsaddr":56,"protobuf":80,"cbor":81,"raw":85,"dbl-sha2-256":86,"rlp":96,"bencode":99,"dag-pb":112,"dag-cbor":113,"libp2p-key":114,"git-raw":120,"torrent-info":123,"torrent-file":124,"leofcoin-block":129,"leofcoin-tx":130,"leofcoin-pr":131,"sctp":132,"eth-block":144,"eth-block-list":145,"eth-tx-trie":146,"eth-tx":147,"eth-tx-receipt-trie":148,"eth-tx-receipt":149,"eth-state-trie":150,"eth-account-snapshot":151,"eth-storage-trie":152,"bitcoin-block":176,"bitcoin-tx":177,"zcash-block":192,"zcash-tx":193,"stellar-block":208,"stellar-tx":209,"md4":212,"md5":213,"bmt":214,"decred-block":224,"decred-tx":225,"ipld-ns":226,"ipfs-ns":227,"swarm-ns":228,"ipns-ns":229,"zeronet":230,"ed25519-pub":237,"dash-block":240,"dash-tx":241,"swarm-manifest":250,"swarm-feed":251,"udp":273,"p2p-webrtc-star":275,"p2p-webrtc-direct":276,"p2p-stardust":277,"p2p-circuit":290,"dag-json":297,"udt":301,"utp":302,"unix":400,"p2p":421,"ipfs":421,"https":443,"onion":444,"onion3":445,"garlic64":446,"garlic32":447,"tls":448,"quic":460,"ws":477,"wss":478,"p2p-websocket-star":479,"http":480,"json":512,"messagepack":513,"x11":4352,"blake2b-8":45569,"blake2b-16":45570,"blake2b-24":45571,"blake2b-32":45572,"blake2b-40":45573,"blake2b-48":45574,"blake2b-56":45575,"blake2b-64":45576,"blake2b-72":45577,"blake2b-80":45578,"blake2b-88":45579,"blake2b-96":45580,"blake2b-104":45581,"blake2b-112":45582,"blake2b-120":45583,"blake2b-128":45584,"blake2b-136":45585,"blake2b-144":45586,"blake2b-152":45587,"blake2b-160":45588,"blake2b-168":45589,"blake2b-176":45590,"blake2b-184":45591,"blake2b-192":45592,"blake2b-200":45593,"blake2b-208":45594,"blake2b-216":45595,"blake2b-224":45596,"blake2b-232":45597,"blake2b-240":45598,"blake2b-248":45599,"blake2b-256":45600,"blake2b-264":45601,"blake2b-272":45602,"blake2b-280":45603,"blake2b-288":45604,"blake2b-296":45605,"blake2b-304":45606,"blake2b-312":45607,"blake2b-320":45608,"blake2b-328":45609,"blake2b-336":45610,"blake2b-344":45611,"blake2b-352":45612,"blake2b-360":45613,"blake2b-368":45614,"blake2b-376":45615,"blake2b-384":45616,"blake2b-392":45617,"blake2b-400":45618,"blake2b-408":45619,"blake2b-416":45620,"blake2b-424":45621,"blake2b-432":45622,"blake2b-440":45623,"blake2b-448":45624,"blake2b-456":45625,"blake2b-464":45626,"blake2b-472":45627,"blake2b-480":45628,"blake2b-488":45629,"blake2b-496":45630,"blake2b-504":45631,"blake2b-512":45632,"blake2s-8":45633,"blake2s-16":45634,"blake2s-24":45635,"blake2s-32":45636,"blake2s-40":45637,"blake2s-48":45638,"blake2s-56":45639,"blake2s-64":45640,"blake2s-72":45641,"blake2s-80":45642,"blake2s-88":45643,"blake2s-96":45644,"blake2s-104":45645,"blake2s-112":45646,"blake2s-120":45647,"blake2s-128":45648,"blake2s-136":45649,"blake2s-144":45650,"blake2s-152":45651,"blake2s-160":45652,"blake2s-168":45653,"blake2s-176":45654,"blake2s-184":45655,"blake2s-192":45656,"blake2s-200":45657,"blake2s-208":45658,"blake2s-216":45659,"blake2s-224":45660,"blake2s-232":45661,"blake2s-240":45662,"blake2s-248":45663,"blake2s-256":45664,"skein256-8":45825,"skein256-16":45826,"skein256-24":45827,"skein256-32":45828,"skein256-40":45829,"skein256-48":45830,"skein256-56":45831,"skein256-64":45832,"skein256-72":45833,"skein256-80":45834,"skein256-88":45835,"skein256-96":45836,"skein256-104":45837,"skein256-112":45838,"skein256-120":45839,"skein256-128":45840,"skein256-136":45841,"skein256-144":45842,"skein256-152":45843,"skein256-160":45844,"skein256-168":45845,"skein256-176":45846,"skein256-184":45847,"skein256-192":45848,"skein256-200":45849,"skein256-208":45850,"skein256-216":45851,"skein256-224":45852,"skein256-232":45853,"skein256-240":45854,"skein256-248":45855,"skein256-256":45856,"skein512-8":45857,"skein512-16":45858,"skein512-24":45859,"skein512-32":45860,"skein512-40":45861,"skein512-48":45862,"skein512-56":45863,"skein512-64":45864,"skein512-72":45865,"skein512-80":45866,"skein512-88":45867,"skein512-96":45868,"skein512-104":45869,"skein512-112":45870,"skein512-120":45871,"skein512-128":45872,"skein512-136":45873,"skein512-144":45874,"skein512-152":45875,"skein512-160":45876,"skein512-168":45877,"skein512-176":45878,"skein512-184":45879,"skein512-192":45880,"skein512-200":45881,"skein512-208":45882,"skein512-216":45883,"skein512-224":45884,"skein512-232":45885,"skein512-240":45886,"skein512-248":45887,"skein512-256":45888,"skein512-264":45889,"skein512-272":45890,"skein512-280":45891,"skein512-288":45892,"skein512-296":45893,"skein512-304":45894,"skein512-312":45895,"skein512-320":45896,"skein512-328":45897,"skein512-336":45898,"skein512-344":45899,"skein512-352":45900,"skein512-360":45901,"skein512-368":45902,"skein512-376":45903,"skein512-384":45904,"skein512-392":45905,"skein512-400":45906,"skein512-408":45907,"skein512-416":45908,"skein512-424":45909,"skein512-432":45910,"skein512-440":45911,"skein512-448":45912,"skein512-456":45913,"skein512-464":45914,"skein512-472":45915,"skein512-480":45916,"skein512-488":45917,"skein512-496":45918,"skein512-504":45919,"skein512-512":45920,"skein1024-8":45921,"skein1024-16":45922,"skein1024-24":45923,"skein1024-32":45924,"skein1024-40":45925,"skein1024-48":45926,"skein1024-56":45927,"skein1024-64":45928,"skein1024-72":45929,"skein1024-80":45930,"skein1024-88":45931,"skein1024-96":45932,"skein1024-104":45933,"skein1024-112":45934,"skein1024-120":45935,"skein1024-128":45936,"skein1024-136":45937,"skein1024-144":45938,"skein1024-152":45939,"skein1024-160":45940,"skein1024-168":45941,"skein1024-176":45942,"skein1024-184":45943,"skein1024-192":45944,"skein1024-200":45945,"skein1024-208":45946,"skein1024-216":45947,"skein1024-224":45948,"skein1024-232":45949,"skein1024-240":45950,"skein1024-248":45951,"skein1024-256":45952,"skein1024-264":45953,"skein1024-272":45954,"skein1024-280":45955,"skein1024-288":45956,"skein1024-296":45957,"skein1024-304":45958,"skein1024-312":45959,"skein1024-320":45960,"skein1024-328":45961,"skein1024-336":45962,"skein1024-344":45963,"skein1024-352":45964,"skein1024-360":45965,"skein1024-368":45966,"skein1024-376":45967,"skein1024-384":45968,"skein1024-392":45969,"skein1024-400":45970,"skein1024-408":45971,"skein1024-416":45972,"skein1024-424":45973,"skein1024-432":45974,"skein1024-440":45975,"skein1024-448":45976,"skein1024-456":45977,"skein1024-464":45978,"skein1024-472":45979,"skein1024-480":45980,"skein1024-488":45981,"skein1024-496":45982,"skein1024-504":45983,"skein1024-512":45984,"skein1024-520":45985,"skein1024-528":45986,"skein1024-536":45987,"skein1024-544":45988,"skein1024-552":45989,"skein1024-560":45990,"skein1024-568":45991,"skein1024-576":45992,"skein1024-584":45993,"skein1024-592":45994,"skein1024-600":45995,"skein1024-608":45996,"skein1024-616":45997,"skein1024-624":45998,"skein1024-632":45999,"skein1024-640":46000,"skein1024-648":46001,"skein1024-656":46002,"skein1024-664":46003,"skein1024-672":46004,"skein1024-680":46005,"skein1024-688":46006,"skein1024-696":46007,"skein1024-704":46008,"skein1024-712":46009,"skein1024-720":46010,"skein1024-728":46011,"skein1024-736":46012,"skein1024-744":46013,"skein1024-752":46014,"skein1024-760":46015,"skein1024-768":46016,"skein1024-776":46017,"skein1024-784":46018,"skein1024-792":46019,"skein1024-800":46020,"skein1024-808":46021,"skein1024-816":46022,"skein1024-824":46023,"skein1024-832":46024,"skein1024-840":46025,"skein1024-848":46026,"skein1024-856":46027,"skein1024-864":46028,"skein1024-872":46029,"skein1024-880":46030,"skein1024-888":46031,"skein1024-896":46032,"skein1024-904":46033,"skein1024-912":46034,"skein1024-920":46035,"skein1024-928":46036,"skein1024-936":46037,"skein1024-944":46038,"skein1024-952":46039,"skein1024-960":46040,"skein1024-968":46041,"skein1024-976":46042,"skein1024-984":46043,"skein1024-992":46044,"skein1024-1000":46045,"skein1024-1008":46046,"skein1024-1016":46047,"skein1024-1024":46048,"holochain-adr-v0":8417572,"holochain-adr-v1":8483108,"holochain-key-v0":9728292,"holochain-key-v1":9793828,"holochain-sig-v0":10645796,"holochain-sig-v1":10711332}')},function(e,t,r){e.exports={encode:r(45),decode:r(46),encodingLength:r(47)}},function(e,t,r){"use strict";(function(e){var o=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(n,s){function i(e){try{u(o.next(e))}catch(e){s(e)}}function a(e){try{u(o.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,a)}u((o=o.apply(e,t||[])).next())}))},n=this&&this.__rest||function(e,t){var r={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.indexOf(o)<0&&(r[o]=e[o]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(o=Object.getOwnPropertySymbols(e);n<o.length;n++)t.indexOf(o[n])<0&&Object.prototype.propertyIsEnumerable.call(e,o[n])&&(r[o[n]]=e[o[n]])}return r},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Context=t.createAPISig=t.defaultHost=void 0;const i=r(2),a=r(10),u=s(r(7));t.defaultHost="https://api.textile.io:3447",t.createAPISig=(t,r=new Date(Date.now()+6e4))=>o(void 0,void 0,void 0,(function*(){const o=u.default.decode(t),n=(null!=r?r:new Date).toISOString(),s=new a.HMAC(o).update(e.from(n)).digest();return{sig:u.default.encode("base32",e.from(s)).toString(),msg:n}}));class g{constructor(e=t.defaultHost,r=!1,o=i.grpc.WebsocketTransport()){this._context={},this._context.host=e,this._context.transport=o,this._context.debug=r}get host(){return this._context.host}get transport(){return this._context.transport}get debug(){return this._context.debug}set(e,t){return this._context[e]=t,this}get(e){return this._context[e]}withSession(e){return void 0===e||(this._context["x-textile-session"]=e),this}withThread(e){return void 0===e||(this._context["x-textile-thread"]=e.toString()),this}withThreadName(e){return void 0===e||(this._context["x-textile-thread-name"]=e),this}withOrg(e){return void 0===e||(this._context["x-textile-org"]=e),this}withToken(e){return void 0===e||(this._context.authorization="bearer "+e),this}withAPIKey(e){return void 0===e||(this._context["x-textile-api-key"]=e),this}withAPISig(e){if(void 0===e)return this;const{sig:t,msg:r}=e;return this._context["x-textile-api-sig-msg"]=r,this._context["x-textile-api-sig"]=t,this}withContext(e){return void 0===e||(this._context=e.toJSON()),this}toJSON(){const e=this._context,{transport:t}=e;return n(e,["transport"])}toMetadata(){return new i.grpc.Metadata(this.toJSON())}static fromJSON(e,r=t.defaultHost,o=!1,n=i.grpc.WebsocketTransport()){const s=Object.assign({},e);s.host=r,s.transport=n,s.debug=o;const a=new g;return a._context=s,a}withUserKey(e,r){return o(this,void 0,void 0,(function*(){if(void 0===e)return this;const o=yield t.createAPISig(e.secret,r);return this.withAPIKey(e.key).withAPISig(o)}))}}t.Context=g}).call(this,r(0).Buffer)},function(e,t){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){"use strict";const{Buffer:o}=r(0),n=r(30);function s(e,t){if(!t)throw new Error("requires an encoded buffer");const r=i(e),n=o.from(r.code);return function(e,t){i(e).decode(t.toString())}(r.name,t),o.concat([n,t])}function i(e){let t;if(n.names[e])t=n.names[e];else{if(!n.codes[e])throw new Error("Unsupported encoding");t=n.codes[e]}if(!t.isImplemented())throw new Error("Base "+e+" is not implemented yet");return t}(t=e.exports=s).encode=function(e,t){const r=i(e);return s(r.name,o.from(r.encode(t)))},t.decode=function(e){o.isBuffer(e)&&(e=e.toString());const t=e.substring(0,1);"string"==typeof(e=e.substring(1,e.length))&&(e=o.from(e));const r=i(t);return o.from(r.decode(e.toString()))},t.isEncoded=function(e){o.isBuffer(e)&&(e=e.toString());if("[object String]"!==Object.prototype.toString.call(e))return!1;const t=e.substring(0,1);try{return i(t).name}catch(e){return!1}},t.names=Object.freeze(Object.keys(n.names)),t.codes=Object.freeze(Object.keys(n.codes))},function(e,t,r){"use strict";var o=r(32).Buffer;e.exports=function(e){if(e.length>=255)throw new TypeError("Alphabet too long");for(var t=new Uint8Array(256),r=0;r<t.length;r++)t[r]=255;for(var n=0;n<e.length;n++){var s=e.charAt(n),i=s.charCodeAt(0);if(255!==t[i])throw new TypeError(s+" is ambiguous");t[i]=n}var a=e.length,u=e.charAt(0),g=Math.log(a)/Math.log(256),l=Math.log(256)/Math.log(a);function p(e){if("string"!=typeof e)throw new TypeError("Expected String");if(0===e.length)return o.alloc(0);var r=0;if(" "!==e[r]){for(var n=0,s=0;e[r]===u;)n++,r++;for(var i=(e.length-r)*g+1>>>0,l=new Uint8Array(i);e[r];){var p=t[e.charCodeAt(r)];if(255===p)return;for(var c=0,h=i-1;(0!==p||c<s)&&-1!==h;h--,c++)p+=a*l[h]>>>0,l[h]=p%256>>>0,p=p/256>>>0;if(0!==p)throw new Error("Non-zero carry");s=c,r++}if(" "!==e[r]){for(var d=i-s;d!==i&&0===l[d];)d++;var f=o.allocUnsafe(n+(i-d));f.fill(0,0,n);for(var b=n;d!==i;)f[b++]=l[d++];return f}}}return{encode:function(t){if((Array.isArray(t)||t instanceof Uint8Array)&&(t=o.from(t)),!o.isBuffer(t))throw new TypeError("Expected Buffer");if(0===t.length)return"";for(var r=0,n=0,s=0,i=t.length;s!==i&&0===t[s];)s++,r++;for(var g=(i-s)*l+1>>>0,p=new Uint8Array(g);s!==i;){for(var c=t[s],h=0,d=g-1;(0!==c||h<n)&&-1!==d;d--,h++)c+=256*p[d]>>>0,p[d]=c%a>>>0,c=c/a>>>0;if(0!==c)throw new Error("Non-zero carry");n=h,s++}for(var f=g-n;f!==g&&0===p[f];)f++;for(var b=u.repeat(r);f<g;++f)b+=e.charAt(p[f]);return b},decodeUnsafe:p,decode:function(e){var t=p(e);if(t)return t;throw new Error("Non-base"+a+" character")}}}},function(module,exports,__webpack_require__){(function(global,Buffer){var $jscomp=$jscomp||{};$jscomp.scope={},$jscomp.findInternal=function(e,t,r){e instanceof String&&(e=String(e));for(var o=e.length,n=0;n<o;n++){var s=e[n];if(t.call(r,s,n,e))return{i:n,v:s}}return{i:-1,v:void 0}},$jscomp.ASSUME_ES5=!1,$jscomp.ASSUME_NO_NATIVE_MAP=!1,$jscomp.ASSUME_NO_NATIVE_SET=!1,$jscomp.SIMPLE_FROUND_POLYFILL=!1,$jscomp.defineProperty=$jscomp.ASSUME_ES5||"function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,r){e!=Array.prototype&&e!=Object.prototype&&(e[t]=r.value)},$jscomp.getGlobal=function(e){return"undefined"!=typeof window&&window===e?e:void 0!==global&&null!=global?global:e},$jscomp.global=$jscomp.getGlobal(this),$jscomp.polyfill=function(e,t,r,o){if(t){for(r=$jscomp.global,e=e.split("."),o=0;o<e.length-1;o++){var n=e[o];n in r||(r[n]={}),r=r[n]}(t=t(o=r[e=e[e.length-1]]))!=o&&null!=t&&$jscomp.defineProperty(r,e,{configurable:!0,writable:!0,value:t})}},$jscomp.polyfill("Array.prototype.findIndex",(function(e){return e||function(e,t){return $jscomp.findInternal(this,e,t).i}}),"es6","es3"),$jscomp.checkStringArgs=function(e,t,r){if(null==e)throw new TypeError("The 'this' value for String.prototype."+r+" must not be null or undefined");if(t instanceof RegExp)throw new TypeError("First argument to String.prototype."+r+" must not be a regular expression");return e+""},$jscomp.polyfill("String.prototype.endsWith",(function(e){return e||function(e,t){var r=$jscomp.checkStringArgs(this,e,"endsWith");e+="",void 0===t&&(t=r.length),t=Math.max(0,Math.min(0|t,r.length));for(var o=e.length;0<o&&0<t;)if(r[--t]!=e[--o])return!1;return 0>=o}}),"es6","es3"),$jscomp.polyfill("Array.prototype.find",(function(e){return e||function(e,t){return $jscomp.findInternal(this,e,t).v}}),"es6","es3"),$jscomp.polyfill("String.prototype.startsWith",(function(e){return e||function(e,t){var r=$jscomp.checkStringArgs(this,e,"startsWith");e+="";var o=r.length,n=e.length;t=Math.max(0,Math.min(0|t,r.length));for(var s=0;s<n&&t<o;)if(r[t++]!=e[s++])return!1;return s>=n}}),"es6","es3"),$jscomp.polyfill("String.prototype.repeat",(function(e){return e||function(e){var t=$jscomp.checkStringArgs(this,null,"repeat");if(0>e||1342177279<e)throw new RangeError("Invalid count value");e|=0;for(var r="";e;)1&e&&(r+=t),(e>>>=1)&&(t+=t);return r}}),"es6","es3");var COMPILED=!0,goog=goog||{};goog.global=this||self,goog.isDef=function(e){return void 0!==e},goog.isString=function(e){return"string"==typeof e},goog.isBoolean=function(e){return"boolean"==typeof e},goog.isNumber=function(e){return"number"==typeof e},goog.exportPath_=function(e,t,r){e=e.split("."),r=r||goog.global,e[0]in r||void 0===r.execScript||r.execScript("var "+e[0]);for(var o;e.length&&(o=e.shift());)!e.length&&goog.isDef(t)?r[o]=t:r=r[o]&&r[o]!==Object.prototype[o]?r[o]:r[o]={}},goog.define=function(e,t){if(!COMPILED){var r=goog.global.CLOSURE_UNCOMPILED_DEFINES,o=goog.global.CLOSURE_DEFINES;r&&void 0===r.nodeType&&Object.prototype.hasOwnProperty.call(r,e)?t=r[e]:o&&void 0===o.nodeType&&Object.prototype.hasOwnProperty.call(o,e)&&(t=o[e])}return t},goog.FEATURESET_YEAR=2012,goog.DEBUG=!0,goog.LOCALE="en",goog.TRUSTED_SITE=!0,goog.STRICT_MODE_COMPATIBLE=!1,goog.DISALLOW_TEST_ONLY_CODE=COMPILED&&!goog.DEBUG,goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1,goog.provide=function(e){if(goog.isInModuleLoader_())throw Error("goog.provide cannot be used within a module.");if(!COMPILED&&goog.isProvided_(e))throw Error('Namespace "'+e+'" already declared.');goog.constructNamespace_(e)},goog.constructNamespace_=function(e,t){if(!COMPILED){delete goog.implicitNamespaces_[e];for(var r=e;(r=r.substring(0,r.lastIndexOf(".")))&&!goog.getObjectByName(r);)goog.implicitNamespaces_[r]=!0}goog.exportPath_(e,t)},goog.getScriptNonce=function(e){return e&&e!=goog.global?goog.getScriptNonce_(e.document):(null===goog.cspNonce_&&(goog.cspNonce_=goog.getScriptNonce_(goog.global.document)),goog.cspNonce_)},goog.NONCE_PATTERN_=/^[\w+/_-]+[=]{0,2}$/,goog.cspNonce_=null,goog.getScriptNonce_=function(e){return(e=e.querySelector&&e.querySelector("script[nonce]"))&&(e=e.nonce||e.getAttribute("nonce"))&&goog.NONCE_PATTERN_.test(e)?e:""},goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/,goog.module=function(e){if(!goog.isString(e)||!e||-1==e.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInGoogModuleLoader_())throw Error("Module "+e+" has been loaded incorrectly. Note, modules cannot be loaded as normal scripts. They require some kind of pre-processing step. You're likely trying to load a module via a script tag or as a part of a concatenated bundle without rewriting the module. For more info see: https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.");if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");if(goog.moduleLoaderState_.moduleName=e,!COMPILED){if(goog.isProvided_(e))throw Error('Namespace "'+e+'" already declared.');delete goog.implicitNamespaces_[e]}},goog.module.get=function(e){return goog.module.getInternal_(e)},goog.module.getInternal_=function(e){if(!COMPILED){if(e in goog.loadedModules_)return goog.loadedModules_[e].exports;if(!goog.implicitNamespaces_[e])return null!=(e=goog.getObjectByName(e))?e:null}return null},goog.ModuleType={ES6:"es6",GOOG:"goog"},goog.moduleLoaderState_=null,goog.isInModuleLoader_=function(){return goog.isInGoogModuleLoader_()||goog.isInEs6ModuleLoader_()},goog.isInGoogModuleLoader_=function(){return!!goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.GOOG},goog.isInEs6ModuleLoader_=function(){if(goog.moduleLoaderState_&&goog.moduleLoaderState_.type==goog.ModuleType.ES6)return!0;var e=goog.global.$jscomp;return!!e&&("function"==typeof e.getCurrentModulePath&&!!e.getCurrentModulePath())},goog.module.declareLegacyNamespace=function(){if(!COMPILED&&!goog.isInGoogModuleLoader_())throw Error("goog.module.declareLegacyNamespace must be called from within a goog.module");if(!COMPILED&&!goog.moduleLoaderState_.moduleName)throw Error("goog.module must be called prior to goog.module.declareLegacyNamespace.");goog.moduleLoaderState_.declareLegacyNamespace=!0},goog.declareModuleId=function(e){if(!COMPILED){if(!goog.isInEs6ModuleLoader_())throw Error("goog.declareModuleId may only be called from within an ES6 module");if(goog.moduleLoaderState_&&goog.moduleLoaderState_.moduleName)throw Error("goog.declareModuleId may only be called once per module.");if(e in goog.loadedModules_)throw Error('Module with namespace "'+e+'" already exists.')}if(goog.moduleLoaderState_)goog.moduleLoaderState_.moduleName=e;else{var t=goog.global.$jscomp;if(!t||"function"!=typeof t.getCurrentModulePath)throw Error('Module with namespace "'+e+'" has been loaded incorrectly.');t=t.require(t.getCurrentModulePath()),goog.loadedModules_[e]={exports:t,type:goog.ModuleType.ES6,moduleId:e}}},goog.setTestOnly=function(e){if(goog.DISALLOW_TEST_ONLY_CODE)throw e=e||"",Error("Importing test-only code into non-debug environment"+(e?": "+e:"."))},goog.forwardDeclare=function(e){},COMPILED||(goog.isProvided_=function(e){return e in goog.loadedModules_||!goog.implicitNamespaces_[e]&&goog.isDefAndNotNull(goog.getObjectByName(e))},goog.implicitNamespaces_={"goog.module":!0}),goog.getObjectByName=function(e,t){e=e.split("."),t=t||goog.global;for(var r=0;r<e.length;r++)if(t=t[e[r]],!goog.isDefAndNotNull(t))return null;return t},goog.globalize=function(e,t){for(var r in t=t||goog.global,e)t[r]=e[r]},goog.addDependency=function(e,t,r,o){!COMPILED&&goog.DEPENDENCIES_ENABLED&&goog.debugLoader_.addDependency(e,t,r,o)},goog.ENABLE_DEBUG_LOADER=!0,goog.logToConsole_=function(e){goog.global.console&&goog.global.console.error(e)},goog.require=function(e){if(!COMPILED){if(goog.ENABLE_DEBUG_LOADER&&goog.debugLoader_.requested(e),goog.isProvided_(e)){if(goog.isInModuleLoader_())return goog.module.getInternal_(e)}else if(goog.ENABLE_DEBUG_LOADER){var t=goog.moduleLoaderState_;goog.moduleLoaderState_=null;try{goog.debugLoader_.load_(e)}finally{goog.moduleLoaderState_=t}}return null}},goog.requireType=function(e){return{}},goog.basePath="",goog.nullFunction=function(){},goog.abstractMethod=function(){throw Error("unimplemented abstract method")},goog.addSingletonGetter=function(e){e.instance_=void 0,e.getInstance=function(){return e.instance_?e.instance_:(goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=e),e.instance_=new e)}},goog.instantiatedSingletons_=[],goog.LOAD_MODULE_USING_EVAL=!0,goog.SEAL_MODULE_EXPORTS=goog.DEBUG,goog.loadedModules_={},goog.DEPENDENCIES_ENABLED=!COMPILED&&goog.ENABLE_DEBUG_LOADER,goog.TRANSPILE="detect",goog.ASSUME_ES_MODULES_TRANSPILED=!1,goog.TRANSPILE_TO_LANGUAGE="",goog.TRANSPILER="transpile.js",goog.hasBadLetScoping=null,goog.useSafari10Workaround=function(){if(null==goog.hasBadLetScoping){try{var a=!eval('"use strict";let x = 1; function f() { return typeof x; };f() == "number";')}catch(e){a=!1}goog.hasBadLetScoping=a}return goog.hasBadLetScoping},goog.workaroundSafari10EvalBug=function(e){return"(function(){"+e+"\n;})();\n"},goog.loadModule=function(e){var t=goog.moduleLoaderState_;try{if(goog.moduleLoaderState_={moduleName:"",declareLegacyNamespace:!1,type:goog.ModuleType.GOOG},goog.isFunction(e))var r=e.call(void 0,{});else{if(!goog.isString(e))throw Error("Invalid module definition");goog.useSafari10Workaround()&&(e=goog.workaroundSafari10EvalBug(e)),r=goog.loadModuleFromSource_.call(void 0,e)}var o=goog.moduleLoaderState_.moduleName;if(!goog.isString(o)||!o)throw Error('Invalid module name "'+o+'"');goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(o,r):goog.SEAL_MODULE_EXPORTS&&Object.seal&&"object"==typeof r&&null!=r&&Object.seal(r),goog.loadedModules_[o]={exports:r,type:goog.ModuleType.GOOG,moduleId:goog.moduleLoaderState_.moduleName}}finally{goog.moduleLoaderState_=t}},goog.loadModuleFromSource_=function(a){return eval(a),{}},goog.normalizePath_=function(e){e=e.split("/");for(var t=0;t<e.length;)"."==e[t]?e.splice(t,1):t&&".."==e[t]&&e[t-1]&&".."!=e[t-1]?e.splice(--t,2):t++;return e.join("/")},goog.loadFileSync_=function(e){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(e);try{var t=new goog.global.XMLHttpRequest;return t.open("get",e,!1),t.send(),0==t.status||200==t.status?t.responseText:null}catch(e){return null}},goog.transpile_=function(e,t,r){var o=goog.global.$jscomp;o||(goog.global.$jscomp=o={});var n=o.transpile;if(!n){var s=goog.basePath+goog.TRANSPILER,i=goog.loadFileSync_(s);if(i){if(function(){(0,eval)(i+"\n//# sourceURL="+s)}.call(goog.global),goog.global.$gwtExport&&goog.global.$gwtExport.$jscomp&&!goog.global.$gwtExport.$jscomp.transpile)throw Error('The transpiler did not properly export the "transpile" method. $gwtExport: '+JSON.stringify(goog.global.$gwtExport));goog.global.$jscomp.transpile=goog.global.$gwtExport.$jscomp.transpile,n=(o=goog.global.$jscomp).transpile}}return n||(n=o.transpile=function(e,t){return goog.logToConsole_(t+" requires transpilation but no transpiler was found."),e}),n(e,t,r)},goog.typeOf=function(e){var t=typeof e;if("object"==t){if(!e)return"null";if(e instanceof Array)return"array";if(e instanceof Object)return t;var r=Object.prototype.toString.call(e);if("[object Window]"==r)return"object";if("[object Array]"==r||"number"==typeof e.length&&void 0!==e.splice&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("splice"))return"array";if("[object Function]"==r||void 0!==e.call&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("call"))return"function"}else if("function"==t&&void 0===e.call)return"object";return t},goog.isNull=function(e){return null===e},goog.isDefAndNotNull=function(e){return null!=e},goog.isArray=function(e){return"array"==goog.typeOf(e)},goog.isArrayLike=function(e){var t=goog.typeOf(e);return"array"==t||"object"==t&&"number"==typeof e.length},goog.isDateLike=function(e){return goog.isObject(e)&&"function"==typeof e.getFullYear},goog.isFunction=function(e){return"function"==goog.typeOf(e)},goog.isObject=function(e){var t=typeof e;return"object"==t&&null!=e||"function"==t},goog.getUid=function(e){return e[goog.UID_PROPERTY_]||(e[goog.UID_PROPERTY_]=++goog.uidCounter_)},goog.hasUid=function(e){return!!e[goog.UID_PROPERTY_]},goog.removeUid=function(e){null!==e&&"removeAttribute"in e&&e.removeAttribute(goog.UID_PROPERTY_);try{delete e[goog.UID_PROPERTY_]}catch(e){}},goog.UID_PROPERTY_="closure_uid_"+(1e9*Math.random()>>>0),goog.uidCounter_=0,goog.getHashCode=goog.getUid,goog.removeHashCode=goog.removeUid,goog.cloneObject=function(e){var t=goog.typeOf(e);if("object"==t||"array"==t){if("function"==typeof e.clone)return e.clone();for(var r in t="array"==t?[]:{},e)t[r]=goog.cloneObject(e[r]);return t}return e},goog.bindNative_=function(e,t,r){return e.call.apply(e.bind,arguments)},goog.bindJs_=function(e,t,r){if(!e)throw Error();if(2<arguments.length){var o=Array.prototype.slice.call(arguments,2);return function(){var r=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(r,o),e.apply(t,r)}}return function(){return e.apply(t,arguments)}},goog.bind=function(e,t,r){return Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_,goog.bind.apply(null,arguments)},goog.partial=function(e,t){var r=Array.prototype.slice.call(arguments,1);return function(){var t=r.slice();return t.push.apply(t,arguments),e.apply(this,t)}},goog.mixin=function(e,t){for(var r in t)e[r]=t[r]},goog.now=goog.TRUSTED_SITE&&Date.now||function(){return+new Date},goog.globalEval=function(e){if(goog.global.execScript)goog.global.execScript(e,"JavaScript");else{if(!goog.global.eval)throw Error("goog.globalEval not available");if(null==goog.evalWorksForGlobals_){try{goog.global.eval("var _evalTest_ = 1;")}catch(e){}if(void 0!==goog.global._evalTest_){try{delete goog.global._evalTest_}catch(e){}goog.evalWorksForGlobals_=!0}else goog.evalWorksForGlobals_=!1}if(goog.evalWorksForGlobals_)goog.global.eval(e);else{var t=goog.global.document,r=t.createElement("SCRIPT");r.type="text/javascript",r.defer=!1,r.appendChild(t.createTextNode(e)),t.head.appendChild(r),t.head.removeChild(r)}}},goog.evalWorksForGlobals_=null,goog.getCssName=function(e,t){if("."==String(e).charAt(0))throw Error('className passed in goog.getCssName must not start with ".". You passed: '+e);var r=function(e){return goog.cssNameMapping_[e]||e},o=function(e){e=e.split("-");for(var t=[],o=0;o<e.length;o++)t.push(r(e[o]));return t.join("-")};return o=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?r:o:function(e){return e},e=t?e+"-"+o(t):o(e),goog.global.CLOSURE_CSS_NAME_MAP_FN?goog.global.CLOSURE_CSS_NAME_MAP_FN(e):e},goog.setCssNameMapping=function(e,t){goog.cssNameMapping_=e,goog.cssNameMappingStyle_=t},!COMPILED&&goog.global.CLOSURE_CSS_NAME_MAPPING&&(goog.cssNameMapping_=goog.global.CLOSURE_CSS_NAME_MAPPING),goog.getMsg=function(e,t,r){return r&&r.html&&(e=e.replace(/</g,"&lt;")),t&&(e=e.replace(/\{\$([^}]+)}/g,(function(e,r){return null!=t&&r in t?t[r]:e}))),e},goog.getMsgWithFallback=function(e,t){return e},goog.exportSymbol=function(e,t,r){goog.exportPath_(e,t,r)},goog.exportProperty=function(e,t,r){e[t]=r},goog.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.superClass_=t.prototype,e.prototype=new r,e.prototype.constructor=e,e.base=function(e,r,o){for(var n=Array(arguments.length-2),s=2;s<arguments.length;s++)n[s-2]=arguments[s];return t.prototype[r].apply(e,n)}},goog.base=function(e,t,r){var o=arguments.callee.caller;if(goog.STRICT_MODE_COMPATIBLE||goog.DEBUG&&!o)throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");if(void 0!==o.superClass_){for(var n=Array(arguments.length-1),s=1;s<arguments.length;s++)n[s-1]=arguments[s];return o.superClass_.constructor.apply(e,n)}if("string"!=typeof t&&"symbol"!=typeof t)throw Error("method names provided to goog.base must be a string or a symbol");for(n=Array(arguments.length-2),s=2;s<arguments.length;s++)n[s-2]=arguments[s];s=!1;for(var i=e.constructor.prototype;i;i=Object.getPrototypeOf(i))if(i[t]===o)s=!0;else if(s)return i[t].apply(e,n);if(e[t]===o)return e.constructor.prototype[t].apply(e,n);throw Error("goog.base called from a method of one name to a method of a different name")},goog.scope=function(e){if(goog.isInModuleLoader_())throw Error("goog.scope is not supported within a module.");e.call(goog.global)},COMPILED||(goog.global.COMPILED=COMPILED),goog.defineClass=function(e,t){var r=t.constructor,o=t.statics;return r&&r!=Object.prototype.constructor||(r=function(){throw Error("cannot instantiate an interface (no constructor defined).")}),r=goog.defineClass.createSealingConstructor_(r,e),e&&goog.inherits(r,e),delete t.constructor,delete t.statics,goog.defineClass.applyProperties_(r.prototype,t),null!=o&&(o instanceof Function?o(r):goog.defineClass.applyProperties_(r,o)),r},goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG,goog.defineClass.createSealingConstructor_=function(e,t){if(!goog.defineClass.SEAL_CLASS_INSTANCES)return e;var r=!goog.defineClass.isUnsealable_(t),o=function(){var t=e.apply(this,arguments)||this;return t[goog.UID_PROPERTY_]=t[goog.UID_PROPERTY_],this.constructor===o&&r&&Object.seal instanceof Function&&Object.seal(t),t};return o},goog.defineClass.isUnsealable_=function(e){return e&&e.prototype&&e.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]},goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),goog.defineClass.applyProperties_=function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);for(var o=0;o<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;o++)r=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[o],Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},goog.tagUnsealableClass=function(e){!COMPILED&&goog.defineClass.SEAL_CLASS_INSTANCES&&(e.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]=!0)},goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_="goog_defineClass_legacy_unsealable",!COMPILED&&goog.DEPENDENCIES_ENABLED&&(goog.inHtmlDocument_=function(){var e=goog.global.document;return null!=e&&"write"in e},goog.isDocumentLoading_=function(){var e=goog.global.document;return e.attachEvent?"complete"!=e.readyState:"loading"==e.readyState},goog.findBasePath_=function(){if(goog.isDef(goog.global.CLOSURE_BASE_PATH)&&goog.isString(goog.global.CLOSURE_BASE_PATH))goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_()){var e=goog.global.document,t=e.currentScript;for(t=(e=t?[t]:e.getElementsByTagName("SCRIPT")).length-1;0<=t;--t){var r=e[t].src,o=r.lastIndexOf("?");if(o=-1==o?r.length:o,"base.js"==r.substr(o-7,7)){goog.basePath=r.substr(0,o-7);break}}}},goog.findBasePath_(),goog.Transpiler=function(){this.requiresTranspilation_=null,this.transpilationTarget_=goog.TRANSPILE_TO_LANGUAGE},goog.Transpiler.prototype.createRequiresTranspilation_=function(){function a(t,r){e?d[t]=!0:r()?(c=t,d[t]=!1):e=d[t]=!0}function b(a){try{return!!eval(a)}catch(e){return!1}}var c="es3",d={es3:!1},e=!1,f=goog.global.navigator&&goog.global.navigator.userAgent?goog.global.navigator.userAgent:"";return a("es5",(function(){return b("[1,].length==1")})),a("es6",(function(){return!f.match(/Edge\/(\d+)(\.\d)*/i)&&b('(()=>{"use strict";class X{constructor(){if(new.target!=String)throw 1;this.x=42}}let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof String))throw 1;for(const a of[2,3]){if(a==2)continue;function f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()==3}})()')})),a("es7",(function(){return b("2 ** 2 == 4")})),a("es8",(function(){return b("async () => 1, true")})),a("es9",(function(){return b("({...rest} = {}), true")})),a("es_next",(function(){return!1})),{target:c,map:d}},goog.Transpiler.prototype.needsTranspile=function(e,t){if("always"==goog.TRANSPILE)return!0;if("never"==goog.TRANSPILE)return!1;if(!this.requiresTranspilation_){var r=this.createRequiresTranspilation_();this.requiresTranspilation_=r.map,this.transpilationTarget_=this.transpilationTarget_||r.target}if(e in this.requiresTranspilation_)return!!this.requiresTranspilation_[e]||!(!goog.inHtmlDocument_()||"es6"!=t||"noModule"in goog.global.document.createElement("script"));throw Error("Unknown language mode: "+e)},goog.Transpiler.prototype.transpile=function(e,t){return goog.transpile_(e,t,this.transpilationTarget_)},goog.transpiler_=new goog.Transpiler,goog.protectScriptTag_=function(e){return e.replace(/<\/(SCRIPT)/gi,"\\x3c/$1")},goog.DebugLoader_=function(){this.dependencies_={},this.idToPath_={},this.written_={},this.loadingDeps_=[],this.depsToLoad_=[],this.paused_=!1,this.factory_=new goog.DependencyFactory(goog.transpiler_),this.deferredCallbacks_={},this.deferredQueue_=[]},goog.DebugLoader_.prototype.bootstrap=function(e,t){function r(){o&&(goog.global.setTimeout(o,0),o=null)}var o=t;if(e.length){t=[];for(var n=0;n<e.length;n++){var s=this.getPathFromDeps_(e[n]);if(!s)throw Error("Unregonized namespace: "+e[n]);t.push(this.dependencies_[s])}s=goog.require;var i=0;for(n=0;n<e.length;n++)s(e[n]),t[n].onLoad((function(){++i==e.length&&r()}))}else r()},goog.DebugLoader_.prototype.loadClosureDeps=function(){this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath+"deps.js"),"deps.js",[],[],{},!1)),this.loadDeps_()},goog.DebugLoader_.prototype.requested=function(e,t){(e=this.getPathFromDeps_(e))&&(t||this.areDepsLoaded_(this.dependencies_[e].requires))&&(t=this.deferredCallbacks_[e])&&(delete this.deferredCallbacks_[e],t())},goog.DebugLoader_.prototype.setDependencyFactory=function(e){this.factory_=e},goog.DebugLoader_.prototype.load_=function(e){if(!this.getPathFromDeps_(e))throw e="goog.require could not find: "+e,goog.logToConsole_(e),Error(e);var t=this,r=[],o=function(e){var n=t.getPathFromDeps_(e);if(!n)throw Error("Bad dependency path or symbol: "+e);if(!t.written_[n]){for(t.written_[n]=!0,e=t.dependencies_[n],n=0;n<e.requires.length;n++)goog.isProvided_(e.requires[n])||o(e.requires[n]);r.push(e)}};o(e),e=!!this.depsToLoad_.length,this.depsToLoad_=this.depsToLoad_.concat(r),this.paused_||e||this.loadDeps_()},goog.DebugLoader_.prototype.loadDeps_=function(){for(var e=this,t=this.paused_;this.depsToLoad_.length&&!t;)!function(){var r=!1,o=e.depsToLoad_.shift(),n=!1;e.loading_(o);var s={pause:function(){if(r)throw Error("Cannot call pause after the call to load.");t=!0},resume:function(){r?e.resume_():t=!1},loaded:function(){if(n)throw Error("Double call to loaded.");n=!0,e.loaded_(o)},pending:function(){for(var t=[],r=0;r<e.loadingDeps_.length;r++)t.push(e.loadingDeps_[r]);return t},setModuleState:function(e){goog.moduleLoaderState_={type:e,moduleName:"",declareLegacyNamespace:!1}},registerEs6ModuleExports:function(e,t,r){r&&(goog.loadedModules_[r]={exports:t,type:goog.ModuleType.ES6,moduleId:r||""})},registerGoogModuleExports:function(e,t){goog.loadedModules_[e]={exports:t,type:goog.ModuleType.GOOG,moduleId:e}},clearModuleState:function(){goog.moduleLoaderState_=null},defer:function(t){if(r)throw Error("Cannot register with defer after the call to load.");e.defer_(o,t)},areDepsLoaded:function(){return e.areDepsLoaded_(o.requires)}};try{o.load(s)}finally{r=!0}}();t&&this.pause_()},goog.DebugLoader_.prototype.pause_=function(){this.paused_=!0},goog.DebugLoader_.prototype.resume_=function(){this.paused_&&(this.paused_=!1,this.loadDeps_())},goog.DebugLoader_.prototype.loading_=function(e){this.loadingDeps_.push(e)},goog.DebugLoader_.prototype.loaded_=function(e){for(var t=0;t<this.loadingDeps_.length;t++)if(this.loadingDeps_[t]==e){this.loadingDeps_.splice(t,1);break}for(t=0;t<this.deferredQueue_.length;t++)if(this.deferredQueue_[t]==e.path){this.deferredQueue_.splice(t,1);break}if(this.loadingDeps_.length==this.deferredQueue_.length&&!this.depsToLoad_.length)for(;this.deferredQueue_.length;)this.requested(this.deferredQueue_.shift(),!0);e.loaded()},goog.DebugLoader_.prototype.areDepsLoaded_=function(e){for(var t=0;t<e.length;t++){var r=this.getPathFromDeps_(e[t]);if(!r||!(r in this.deferredCallbacks_)&&!goog.isProvided_(e[t]))return!1}return!0},goog.DebugLoader_.prototype.getPathFromDeps_=function(e){return e in this.idToPath_?this.idToPath_[e]:e in this.dependencies_?e:null},goog.DebugLoader_.prototype.defer_=function(e,t){this.deferredCallbacks_[e.path]=t,this.deferredQueue_.push(e.path)},goog.LoadController=function(){},goog.LoadController.prototype.pause=function(){},goog.LoadController.prototype.resume=function(){},goog.LoadController.prototype.loaded=function(){},goog.LoadController.prototype.pending=function(){},goog.LoadController.prototype.registerEs6ModuleExports=function(e,t,r){},goog.LoadController.prototype.setModuleState=function(e){},goog.LoadController.prototype.clearModuleState=function(){},goog.LoadController.prototype.defer=function(e){},goog.LoadController.prototype.areDepsLoaded=function(){},goog.Dependency=function(e,t,r,o,n){this.path=e,this.relativePath=t,this.provides=r,this.requires=o,this.loadFlags=n,this.loaded_=!1,this.loadCallbacks_=[]},goog.Dependency.prototype.getPathName=function(){var e=this.path,t=e.indexOf("://");return 0<=t&&(0<=(t=(e=e.substring(t+3)).indexOf("/"))&&(e=e.substring(t+1))),e},goog.Dependency.prototype.onLoad=function(e){this.loaded_?e():this.loadCallbacks_.push(e)},goog.Dependency.prototype.loaded=function(){this.loaded_=!0;var e=this.loadCallbacks_;this.loadCallbacks_=[];for(var t=0;t<e.length;t++)e[t]()},goog.Dependency.defer_=!1,goog.Dependency.callbackMap_={},goog.Dependency.registerCallback_=function(e){var t=Math.random().toString(32);return goog.Dependency.callbackMap_[t]=e,t},goog.Dependency.unregisterCallback_=function(e){delete goog.Dependency.callbackMap_[e]},goog.Dependency.callback_=function(e,t){if(!(e in goog.Dependency.callbackMap_))throw Error("Callback key "+e+" does not exist (was base.js loaded more than once?).");for(var r=goog.Dependency.callbackMap_[e],o=[],n=1;n<arguments.length;n++)o.push(arguments[n]);r.apply(void 0,o)},goog.Dependency.prototype.load=function(e){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?e.loaded():e.pause();else if(goog.inHtmlDocument_()){var t=goog.global.document;if("complete"==t.readyState&&!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING){if(/\bdeps.js$/.test(this.path))return void e.loaded();throw Error('Cannot write "'+this.path+'" after document load')}if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&goog.isDocumentLoading_()){var r=goog.Dependency.registerCallback_((function(t){goog.DebugLoader_.IS_OLD_IE_&&"complete"!=t.readyState||(goog.Dependency.unregisterCallback_(r),e.loaded())})),o=!goog.DebugLoader_.IS_OLD_IE_&&goog.getScriptNonce()?' nonce="'+goog.getScriptNonce()+'"':"";o='<script src="'+this.path+'" '+(goog.DebugLoader_.IS_OLD_IE_?"onreadystatechange":"onload")+"=\"goog.Dependency.callback_('"+r+'\', this)" type="text/javascript" '+(goog.Dependency.defer_?"defer":"")+o+"><\/script>",t.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(o):o)}else{var n=t.createElement("script");n.defer=goog.Dependency.defer_,n.async=!1,n.type="text/javascript",(o=goog.getScriptNonce())&&n.setAttribute("nonce",o),goog.DebugLoader_.IS_OLD_IE_?(e.pause(),n.onreadystatechange=function(){"loaded"!=n.readyState&&"complete"!=n.readyState||(e.loaded(),e.resume())}):n.onload=function(){n.onload=null,e.loaded()},n.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(this.path):this.path,t.head.appendChild(n)}}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),"deps.js"==this.relativePath?(goog.logToConsole_("Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, or setting CLOSURE_NO_DEPS to true."),e.loaded()):e.pause()},goog.Es6ModuleDependency=function(e,t,r,o,n){goog.Dependency.call(this,e,t,r,o,n)},goog.inherits(goog.Es6ModuleDependency,goog.Dependency),goog.Es6ModuleDependency.prototype.load=function(e){if(goog.global.CLOSURE_IMPORT_SCRIPT)goog.global.CLOSURE_IMPORT_SCRIPT(this.path)?e.loaded():e.pause();else if(goog.inHtmlDocument_()){var t=goog.global.document,r=this;if(goog.isDocumentLoading_()){var o=function(e,r){e=r?'<script type="module" crossorigin>'+r+"<\/script>":'<script type="module" crossorigin src="'+e+'"><\/script>',t.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(e):e)};goog.Dependency.defer_=!0}else o=function(e,r){var o=t.createElement("script");o.defer=!0,o.async=!1,o.type="module",o.setAttribute("crossorigin",!0);var n=goog.getScriptNonce();n&&o.setAttribute("nonce",n),r?o.textContent=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScript(r):r:o.src=goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createScriptURL(e):e,t.head.appendChild(o)};var n=goog.Dependency.registerCallback_((function(){goog.Dependency.unregisterCallback_(n),e.setModuleState(goog.ModuleType.ES6)}));o(void 0,'goog.Dependency.callback_("'+n+'")'),o(this.path,void 0);var s=goog.Dependency.registerCallback_((function(t){goog.Dependency.unregisterCallback_(s),e.registerEs6ModuleExports(r.path,t,goog.moduleLoaderState_.moduleName)}));o(void 0,'import * as m from "'+this.path+'"; goog.Dependency.callback_("'+s+'", m)');var i=goog.Dependency.registerCallback_((function(){goog.Dependency.unregisterCallback_(i),e.clearModuleState(),e.loaded()}));o(void 0,'goog.Dependency.callback_("'+i+'")')}else goog.logToConsole_("Cannot use default debug loader outside of HTML documents."),e.pause()},goog.TransformedDependency=function(e,t,r,o,n){goog.Dependency.call(this,e,t,r,o,n),this.contents_=null,this.lazyFetch_=!goog.inHtmlDocument_()||!("noModule"in goog.global.document.createElement("script"))},goog.inherits(goog.TransformedDependency,goog.Dependency),goog.TransformedDependency.prototype.load=function(e){function t(){o.contents_=goog.loadFileSync_(o.path),o.contents_&&(o.contents_=o.transform(o.contents_),o.contents_&&(o.contents_+="\n//# sourceURL="+o.path))}function r(){if(o.lazyFetch_&&t(),o.contents_){n&&e.setModuleState(goog.ModuleType.ES6);try{var r=o.contents_;if(o.contents_=null,goog.globalEval(r),n)var s=goog.moduleLoaderState_.moduleName}finally{n&&e.clearModuleState()}n&&goog.global.$jscomp.require.ensure([o.getPathName()],(function(){e.registerEs6ModuleExports(o.path,goog.global.$jscomp.require(o.getPathName()),s)})),e.loaded()}}var o=this;if(goog.global.CLOSURE_IMPORT_SCRIPT)t(),this.contents_&&goog.global.CLOSURE_IMPORT_SCRIPT("",this.contents_)?(this.contents_=null,e.loaded()):e.pause();else{var n=this.loadFlags.module==goog.ModuleType.ES6;this.lazyFetch_||t();var s=1<e.pending().length,i=s&&goog.DebugLoader_.IS_OLD_IE_;if(s=goog.Dependency.defer_&&(s||goog.isDocumentLoading_()),i||s)e.defer((function(){r()}));else{var a=goog.global.document;if(i=goog.inHtmlDocument_()&&"ActiveXObject"in goog.global,n&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()&&!i){goog.Dependency.defer_=!0,e.pause();var u=a.onreadystatechange;a.onreadystatechange=function(){"interactive"==a.readyState&&(a.onreadystatechange=u,r(),e.resume()),goog.isFunction(u)&&u.apply(void 0,arguments)}}else!goog.DebugLoader_.IS_OLD_IE_&&goog.inHtmlDocument_()&&goog.isDocumentLoading_()?function(){var e=goog.global.document,t=goog.Dependency.registerCallback_((function(){goog.Dependency.unregisterCallback_(t),r()})),o='<script type="text/javascript">'+goog.protectScriptTag_('goog.Dependency.callback_("'+t+'");')+"<\/script>";e.write(goog.TRUSTED_TYPES_POLICY_?goog.TRUSTED_TYPES_POLICY_.createHTML(o):o)}():r()}}},goog.TransformedDependency.prototype.transform=function(e){},goog.TranspiledDependency=function(e,t,r,o,n,s){goog.TransformedDependency.call(this,e,t,r,o,n),this.transpiler=s},goog.inherits(goog.TranspiledDependency,goog.TransformedDependency),goog.TranspiledDependency.prototype.transform=function(e){return this.transpiler.transpile(e,this.getPathName())},goog.PreTranspiledEs6ModuleDependency=function(e,t,r,o,n){goog.TransformedDependency.call(this,e,t,r,o,n)},goog.inherits(goog.PreTranspiledEs6ModuleDependency,goog.TransformedDependency),goog.PreTranspiledEs6ModuleDependency.prototype.transform=function(e){return e},goog.GoogModuleDependency=function(e,t,r,o,n,s,i){goog.TransformedDependency.call(this,e,t,r,o,n),this.needsTranspile_=s,this.transpiler_=i},goog.inherits(goog.GoogModuleDependency,goog.TransformedDependency),goog.GoogModuleDependency.prototype.transform=function(e){return this.needsTranspile_&&(e=this.transpiler_.transpile(e,this.getPathName())),goog.LOAD_MODULE_USING_EVAL&&goog.isDef(goog.global.JSON)?"goog.loadModule("+goog.global.JSON.stringify(e+"\n//# sourceURL="+this.path+"\n")+");":'goog.loadModule(function(exports) {"use strict";'+e+"\n;return exports});\n//# sourceURL="+this.path+"\n"},goog.DebugLoader_.IS_OLD_IE_=!(goog.global.atob||!goog.global.document||!goog.global.document.all),goog.DebugLoader_.prototype.addDependency=function(e,t,r,o){t=t||[],e=e.replace(/\\/g,"/");var n=goog.normalizePath_(goog.basePath+e);for(o&&"boolean"!=typeof o||(o=o?{module:goog.ModuleType.GOOG}:{}),r=this.factory_.createDependency(n,e,t,r,o,goog.transpiler_.needsTranspile(o.lang||"es3",o.module)),this.dependencies_[n]=r,r=0;r<t.length;r++)this.idToPath_[t[r]]=n;this.idToPath_[e]=n},goog.DependencyFactory=function(e){this.transpiler=e},goog.DependencyFactory.prototype.createDependency=function(e,t,r,o,n,s){return n.module==goog.ModuleType.GOOG?new goog.GoogModuleDependency(e,t,r,o,n,s,this.transpiler):s?new goog.TranspiledDependency(e,t,r,o,n,this.transpiler):n.module==goog.ModuleType.ES6?"never"==goog.TRANSPILE&&goog.ASSUME_ES_MODULES_TRANSPILED?new goog.PreTranspiledEs6ModuleDependency(e,t,r,o,n):new goog.Es6ModuleDependency(e,t,r,o,n):new goog.Dependency(e,t,r,o,n)},goog.debugLoader_=new goog.DebugLoader_,goog.loadClosureDeps=function(){goog.debugLoader_.loadClosureDeps()},goog.setDependencyFactory=function(e){goog.debugLoader_.setDependencyFactory(e)},goog.global.CLOSURE_NO_DEPS||goog.debugLoader_.loadClosureDeps(),goog.bootstrap=function(e,t){goog.debugLoader_.bootstrap(e,t)}),goog.TRUSTED_TYPES_POLICY_NAME="",goog.identity_=function(e){return e},goog.createTrustedTypesPolicy=function(e){var t=null;if("undefined"==typeof TrustedTypes||!TrustedTypes.createPolicy)return t;try{t=TrustedTypes.createPolicy(e,{createHTML:goog.identity_,createScript:goog.identity_,createScriptURL:goog.identity_,createURL:goog.identity_})}catch(e){goog.logToConsole_(e.message)}return t},goog.TRUSTED_TYPES_POLICY_=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#base"):null;var jspb={BinaryConstants:{},ConstBinaryMessage:function(){},BinaryMessage:function(){}};jspb.BinaryConstants.FieldType={INVALID:-1,DOUBLE:1,FLOAT:2,INT64:3,UINT64:4,INT32:5,FIXED64:6,FIXED32:7,BOOL:8,STRING:9,GROUP:10,MESSAGE:11,BYTES:12,UINT32:13,ENUM:14,SFIXED32:15,SFIXED64:16,SINT32:17,SINT64:18,FHASH64:30,VHASH64:31},jspb.BinaryConstants.WireType={INVALID:-1,VARINT:0,FIXED64:1,DELIMITED:2,START_GROUP:3,END_GROUP:4,FIXED32:5},jspb.BinaryConstants.FieldTypeToWireType=function(e){var t=jspb.BinaryConstants.FieldType,r=jspb.BinaryConstants.WireType;switch(e){case t.INT32:case t.INT64:case t.UINT32:case t.UINT64:case t.SINT32:case t.SINT64:case t.BOOL:case t.ENUM:case t.VHASH64:return r.VARINT;case t.DOUBLE:case t.FIXED64:case t.SFIXED64:case t.FHASH64:return r.FIXED64;case t.STRING:case t.MESSAGE:case t.BYTES:return r.DELIMITED;case t.FLOAT:case t.FIXED32:case t.SFIXED32:return r.FIXED32;default:return r.INVALID}},jspb.BinaryConstants.INVALID_FIELD_NUMBER=-1,jspb.BinaryConstants.FLOAT32_EPS=1401298464324817e-60,jspb.BinaryConstants.FLOAT32_MIN=11754943508222875e-54,jspb.BinaryConstants.FLOAT32_MAX=34028234663852886e22,jspb.BinaryConstants.FLOAT64_EPS=5e-324,jspb.BinaryConstants.FLOAT64_MIN=22250738585072014e-324,jspb.BinaryConstants.FLOAT64_MAX=17976931348623157e292,jspb.BinaryConstants.TWO_TO_20=1048576,jspb.BinaryConstants.TWO_TO_23=8388608,jspb.BinaryConstants.TWO_TO_31=2147483648,jspb.BinaryConstants.TWO_TO_32=4294967296,jspb.BinaryConstants.TWO_TO_52=4503599627370496,jspb.BinaryConstants.TWO_TO_63=0x8000000000000000,jspb.BinaryConstants.TWO_TO_64=0x10000000000000000,jspb.BinaryConstants.ZERO_HASH="\0\0\0\0\0\0\0\0",goog.dom={},goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12},goog.debug={},goog.debug.Error=function(e){if(Error.captureStackTrace)Error.captureStackTrace(this,goog.debug.Error);else{var t=Error().stack;t&&(this.stack=t)}e&&(this.message=String(e)),this.reportErrorToServer=!0},goog.inherits(goog.debug.Error,Error),goog.debug.Error.prototype.name="CustomError",goog.asserts={},goog.asserts.ENABLE_ASSERTS=goog.DEBUG,goog.asserts.AssertionError=function(e,t){goog.debug.Error.call(this,goog.asserts.subs_(e,t)),this.messagePattern=e},goog.inherits(goog.asserts.AssertionError,goog.debug.Error),goog.asserts.AssertionError.prototype.name="AssertionError",goog.asserts.DEFAULT_ERROR_HANDLER=function(e){throw e},goog.asserts.errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER,goog.asserts.subs_=function(e,t){for(var r="",o=(e=e.split("%s")).length-1,n=0;n<o;n++)r+=e[n]+(n<t.length?t[n]:"%s");return r+e[o]},goog.asserts.doAssertFailure_=function(e,t,r,o){var n="Assertion failed";if(r){n+=": "+r;var s=o}else e&&(n+=": "+e,s=t);e=new goog.asserts.AssertionError(""+n,s||[]),goog.asserts.errorHandler_(e)},goog.asserts.setErrorHandler=function(e){goog.asserts.ENABLE_ASSERTS&&(goog.asserts.errorHandler_=e)},goog.asserts.assert=function(e,t,r){return goog.asserts.ENABLE_ASSERTS&&!e&&goog.asserts.doAssertFailure_("",null,t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertExists=function(e,t,r){return goog.asserts.ENABLE_ASSERTS&&null==e&&goog.asserts.doAssertFailure_("Expected to exist: %s.",[e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.fail=function(e,t){goog.asserts.ENABLE_ASSERTS&&goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure"+(e?": "+e:""),Array.prototype.slice.call(arguments,1)))},goog.asserts.assertNumber=function(e,t,r){return goog.asserts.ENABLE_ASSERTS&&!goog.isNumber(e)&&goog.asserts.doAssertFailure_("Expected number but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertString=function(e,t,r){return goog.asserts.ENABLE_ASSERTS&&!goog.isString(e)&&goog.asserts.doAssertFailure_("Expected string but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertFunction=function(e,t,r){return goog.asserts.ENABLE_ASSERTS&&!goog.isFunction(e)&&goog.asserts.doAssertFailure_("Expected function but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertObject=function(e,t,r){return goog.asserts.ENABLE_ASSERTS&&!goog.isObject(e)&&goog.asserts.doAssertFailure_("Expected object but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertArray=function(e,t,r){return goog.asserts.ENABLE_ASSERTS&&!goog.isArray(e)&&goog.asserts.doAssertFailure_("Expected array but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertBoolean=function(e,t,r){return goog.asserts.ENABLE_ASSERTS&&!goog.isBoolean(e)&&goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertElement=function(e,t,r){return!goog.asserts.ENABLE_ASSERTS||goog.isObject(e)&&e.nodeType==goog.dom.NodeType.ELEMENT||goog.asserts.doAssertFailure_("Expected Element but got %s: %s.",[goog.typeOf(e),e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertInstanceof=function(e,t,r,o){return!goog.asserts.ENABLE_ASSERTS||e instanceof t||goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.",[goog.asserts.getType_(t),goog.asserts.getType_(e)],r,Array.prototype.slice.call(arguments,3)),e},goog.asserts.assertFinite=function(e,t,r){return!goog.asserts.ENABLE_ASSERTS||"number"==typeof e&&isFinite(e)||goog.asserts.doAssertFailure_("Expected %s to be a finite number but it is not.",[e],t,Array.prototype.slice.call(arguments,2)),e},goog.asserts.assertObjectPrototypeIsIntact=function(){for(var e in Object.prototype)goog.asserts.fail(e+" should not be enumerable in Object.prototype.")},goog.asserts.getType_=function(e){return e instanceof Function?e.displayName||e.name||"unknown type name":e instanceof Object?e.constructor.displayName||e.constructor.name||Object.prototype.toString.call(e):null===e?"null":typeof e},goog.array={},goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE,goog.array.ASSUME_NATIVE_FUNCTIONS=2012<goog.FEATURESET_YEAR,goog.array.peek=function(e){return e[e.length-1]},goog.array.last=goog.array.peek,goog.array.indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(e,t,r){return goog.asserts.assert(null!=e.length),Array.prototype.indexOf.call(e,t,r)}:function(e,t,r){if(r=null==r?0:0>r?Math.max(0,e.length+r):r,goog.isString(e))return goog.isString(t)&&1==t.length?e.indexOf(t,r):-1;for(;r<e.length;r++)if(r in e&&e[r]===t)return r;return-1},goog.array.lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(e,t,r){return goog.asserts.assert(null!=e.length),Array.prototype.lastIndexOf.call(e,t,null==r?e.length-1:r)}:function(e,t,r){if(0>(r=null==r?e.length-1:r)&&(r=Math.max(0,e.length+r)),goog.isString(e))return goog.isString(t)&&1==t.length?e.lastIndexOf(t,r):-1;for(;0<=r;r--)if(r in e&&e[r]===t)return r;return-1},goog.array.forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(e,t,r){goog.asserts.assert(null!=e.length),Array.prototype.forEach.call(e,t,r)}:function(e,t,r){for(var o=e.length,n=goog.isString(e)?e.split(""):e,s=0;s<o;s++)s in n&&t.call(r,n[s],s,e)},goog.array.forEachRight=function(e,t,r){var o=e.length,n=goog.isString(e)?e.split(""):e;for(--o;0<=o;--o)o in n&&t.call(r,n[o],o,e)},goog.array.filter=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(e,t,r){return goog.asserts.assert(null!=e.length),Array.prototype.filter.call(e,t,r)}:function(e,t,r){for(var o=e.length,n=[],s=0,i=goog.isString(e)?e.split(""):e,a=0;a<o;a++)if(a in i){var u=i[a];t.call(r,u,a,e)&&(n[s++]=u)}return n},goog.array.map=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(e,t,r){return goog.asserts.assert(null!=e.length),Array.prototype.map.call(e,t,r)}:function(e,t,r){for(var o=e.length,n=Array(o),s=goog.isString(e)?e.split(""):e,i=0;i<o;i++)i in s&&(n[i]=t.call(r,s[i],i,e));return n},goog.array.reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(e,t,r,o){return goog.asserts.assert(null!=e.length),o&&(t=goog.bind(t,o)),Array.prototype.reduce.call(e,t,r)}:function(e,t,r,o){var n=r;return goog.array.forEach(e,(function(r,s){n=t.call(o,n,r,s,e)})),n},goog.array.reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(e,t,r,o){return goog.asserts.assert(null!=e.length),goog.asserts.assert(null!=t),o&&(t=goog.bind(t,o)),Array.prototype.reduceRight.call(e,t,r)}:function(e,t,r,o){var n=r;return goog.array.forEachRight(e,(function(r,s){n=t.call(o,n,r,s,e)})),n},goog.array.some=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(e,t,r){return goog.asserts.assert(null!=e.length),Array.prototype.some.call(e,t,r)}:function(e,t,r){for(var o=e.length,n=goog.isString(e)?e.split(""):e,s=0;s<o;s++)if(s in n&&t.call(r,n[s],s,e))return!0;return!1},goog.array.every=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(e,t,r){return goog.asserts.assert(null!=e.length),Array.prototype.every.call(e,t,r)}:function(e,t,r){for(var o=e.length,n=goog.isString(e)?e.split(""):e,s=0;s<o;s++)if(s in n&&!t.call(r,n[s],s,e))return!1;return!0},goog.array.count=function(e,t,r){var o=0;return goog.array.forEach(e,(function(e,n,s){t.call(r,e,n,s)&&++o}),r),o},goog.array.find=function(e,t,r){return 0>(t=goog.array.findIndex(e,t,r))?null:goog.isString(e)?e.charAt(t):e[t]},goog.array.findIndex=function(e,t,r){for(var o=e.length,n=goog.isString(e)?e.split(""):e,s=0;s<o;s++)if(s in n&&t.call(r,n[s],s,e))return s;return-1},goog.array.findRight=function(e,t,r){return 0>(t=goog.array.findIndexRight(e,t,r))?null:goog.isString(e)?e.charAt(t):e[t]},goog.array.findIndexRight=function(e,t,r){var o=e.length,n=goog.isString(e)?e.split(""):e;for(--o;0<=o;o--)if(o in n&&t.call(r,n[o],o,e))return o;return-1},goog.array.contains=function(e,t){return 0<=goog.array.indexOf(e,t)},goog.array.isEmpty=function(e){return 0==e.length},goog.array.clear=function(e){if(!goog.isArray(e))for(var t=e.length-1;0<=t;t--)delete e[t];e.length=0},goog.array.insert=function(e,t){goog.array.contains(e,t)||e.push(t)},goog.array.insertAt=function(e,t,r){goog.array.splice(e,r,0,t)},goog.array.insertArrayAt=function(e,t,r){goog.partial(goog.array.splice,e,r,0).apply(null,t)},goog.array.insertBefore=function(e,t,r){var o;2==arguments.length||0>(o=goog.array.indexOf(e,r))?e.push(t):goog.array.insertAt(e,t,o)},goog.array.remove=function(e,t){var r;return(r=0<=(t=goog.array.indexOf(e,t)))&&goog.array.removeAt(e,t),r},goog.array.removeLast=function(e,t){return 0<=(t=goog.array.lastIndexOf(e,t))&&(goog.array.removeAt(e,t),!0)},goog.array.removeAt=function(e,t){return goog.asserts.assert(null!=e.length),1==Array.prototype.splice.call(e,t,1).length},goog.array.removeIf=function(e,t,r){return 0<=(t=goog.array.findIndex(e,t,r))&&(goog.array.removeAt(e,t),!0)},goog.array.removeAllIf=function(e,t,r){var o=0;return goog.array.forEachRight(e,(function(n,s){t.call(r,n,s,e)&&goog.array.removeAt(e,s)&&o++})),o},goog.array.concat=function(e){return Array.prototype.concat.apply([],arguments)},goog.array.join=function(e){return Array.prototype.concat.apply([],arguments)},goog.array.toArray=function(e){var t=e.length;if(0<t){for(var r=Array(t),o=0;o<t;o++)r[o]=e[o];return r}return[]},goog.array.clone=goog.array.toArray,goog.array.extend=function(e,t){for(var r=1;r<arguments.length;r++){var o=arguments[r];if(goog.isArrayLike(o)){var n=e.length||0,s=o.length||0;e.length=n+s;for(var i=0;i<s;i++)e[n+i]=o[i]}else e.push(o)}},goog.array.splice=function(e,t,r,o){return goog.asserts.assert(null!=e.length),Array.prototype.splice.apply(e,goog.array.slice(arguments,1))},goog.array.slice=function(e,t,r){return goog.asserts.assert(null!=e.length),2>=arguments.length?Array.prototype.slice.call(e,t):Array.prototype.slice.call(e,t,r)},goog.array.removeDuplicates=function(e,t,r){t=t||e;var o=function(e){return goog.isObject(e)?"o"+goog.getUid(e):(typeof e).charAt(0)+e};r=r||o,o={};for(var n=0,s=0;s<e.length;){var i=e[s++],a=r(i);Object.prototype.hasOwnProperty.call(o,a)||(o[a]=!0,t[n++]=i)}t.length=n},goog.array.binarySearch=function(e,t,r){return goog.array.binarySearch_(e,r||goog.array.defaultCompare,!1,t)},goog.array.binarySelect=function(e,t,r){return goog.array.binarySearch_(e,t,!0,void 0,r)},goog.array.binarySearch_=function(e,t,r,o,n){for(var s,i=0,a=e.length;i<a;){var u=i+a>>1,g=r?t.call(n,e[u],u,e):t(o,e[u]);0<g?i=u+1:(a=u,s=!g)}return s?i:~i},goog.array.sort=function(e,t){e.sort(t||goog.array.defaultCompare)},goog.array.stableSort=function(e,t){for(var r=Array(e.length),o=0;o<e.length;o++)r[o]={index:o,value:e[o]};var n=t||goog.array.defaultCompare;for(goog.array.sort(r,(function(e,t){return n(e.value,t.value)||e.index-t.index})),o=0;o<e.length;o++)e[o]=r[o].value},goog.array.sortByKey=function(e,t,r){var o=r||goog.array.defaultCompare;goog.array.sort(e,(function(e,r){return o(t(e),t(r))}))},goog.array.sortObjectsByKey=function(e,t,r){goog.array.sortByKey(e,(function(e){return e[t]}),r)},goog.array.isSorted=function(e,t,r){t=t||goog.array.defaultCompare;for(var o=1;o<e.length;o++){var n=t(e[o-1],e[o]);if(0<n||0==n&&r)return!1}return!0},goog.array.equals=function(e,t,r){if(!goog.isArrayLike(e)||!goog.isArrayLike(t)||e.length!=t.length)return!1;var o=e.length;r=r||goog.array.defaultCompareEquality;for(var n=0;n<o;n++)if(!r(e[n],t[n]))return!1;return!0},goog.array.compare3=function(e,t,r){r=r||goog.array.defaultCompare;for(var o=Math.min(e.length,t.length),n=0;n<o;n++){var s=r(e[n],t[n]);if(0!=s)return s}return goog.array.defaultCompare(e.length,t.length)},goog.array.defaultCompare=function(e,t){return e>t?1:e<t?-1:0},goog.array.inverseDefaultCompare=function(e,t){return-goog.array.defaultCompare(e,t)},goog.array.defaultCompareEquality=function(e,t){return e===t},goog.array.binaryInsert=function(e,t,r){return 0>(r=goog.array.binarySearch(e,t,r))&&(goog.array.insertAt(e,t,-(r+1)),!0)},goog.array.binaryRemove=function(e,t,r){return 0<=(t=goog.array.binarySearch(e,t,r))&&goog.array.removeAt(e,t)},goog.array.bucket=function(e,t,r){for(var o={},n=0;n<e.length;n++){var s=e[n],i=t.call(r,s,n,e);goog.isDef(i)&&(o[i]||(o[i]=[])).push(s)}return o},goog.array.toObject=function(e,t,r){var o={};return goog.array.forEach(e,(function(n,s){o[t.call(r,n,s,e)]=n})),o},goog.array.range=function(e,t,r){var o=[],n=0,s=e;if(void 0!==t&&(n=e,s=t),0>(r=r||1)*(s-n))return[];if(0<r)for(e=n;e<s;e+=r)o.push(e);else for(e=n;e>s;e+=r)o.push(e);return o},goog.array.repeat=function(e,t){for(var r=[],o=0;o<t;o++)r[o]=e;return r},goog.array.flatten=function(e){for(var t=[],r=0;r<arguments.length;r++){var o=arguments[r];if(goog.isArray(o))for(var n=0;n<o.length;n+=8192){var s=goog.array.slice(o,n,n+8192);s=goog.array.flatten.apply(null,s);for(var i=0;i<s.length;i++)t.push(s[i])}else t.push(o)}return t},goog.array.rotate=function(e,t){return goog.asserts.assert(null!=e.length),e.length&&(0<(t%=e.length)?Array.prototype.unshift.apply(e,e.splice(-t,t)):0>t&&Array.prototype.push.apply(e,e.splice(0,-t))),e},goog.array.moveItem=function(e,t,r){goog.asserts.assert(0<=t&&t<e.length),goog.asserts.assert(0<=r&&r<e.length),t=Array.prototype.splice.call(e,t,1),Array.prototype.splice.call(e,r,0,t[0])},goog.array.zip=function(e){if(!arguments.length)return[];for(var t=[],r=arguments[0].length,o=1;o<arguments.length;o++)arguments[o].length<r&&(r=arguments[o].length);for(o=0;o<r;o++){for(var n=[],s=0;s<arguments.length;s++)n.push(arguments[s][o]);t.push(n)}return t},goog.array.shuffle=function(e,t){t=t||Math.random;for(var r=e.length-1;0<r;r--){var o=Math.floor(t()*(r+1)),n=e[r];e[r]=e[o],e[o]=n}},goog.array.copyByIndex=function(e,t){var r=[];return goog.array.forEach(t,(function(t){r.push(e[t])})),r},goog.array.concatMap=function(e,t,r){return goog.array.concat.apply([],goog.array.map(e,t,r))},goog.crypt={},goog.crypt.stringToByteArray=function(e){for(var t=[],r=0,o=0;o<e.length;o++){var n=e.charCodeAt(o);255<n&&(t[r++]=255&n,n>>=8),t[r++]=n}return t},goog.crypt.byteArrayToString=function(e){if(8192>=e.length)return String.fromCharCode.apply(null,e);for(var t="",r=0;r<e.length;r+=8192){var o=goog.array.slice(e,r,r+8192);t+=String.fromCharCode.apply(null,o)}return t},goog.crypt.byteArrayToHex=function(e,t){return goog.array.map(e,(function(e){return 1<(e=e.toString(16)).length?e:"0"+e})).join(t||"")},goog.crypt.hexToByteArray=function(e){goog.asserts.assert(0==e.length%2,"Key string length must be multiple of 2");for(var t=[],r=0;r<e.length;r+=2)t.push(parseInt(e.substring(r,r+2),16));return t},goog.crypt.stringToUtf8ByteArray=function(e){for(var t=[],r=0,o=0;o<e.length;o++){var n=e.charCodeAt(o);128>n?t[r++]=n:(2048>n?t[r++]=n>>6|192:(55296==(64512&n)&&o+1<e.length&&56320==(64512&e.charCodeAt(o+1))?(n=65536+((1023&n)<<10)+(1023&e.charCodeAt(++o)),t[r++]=n>>18|240,t[r++]=n>>12&63|128):t[r++]=n>>12|224,t[r++]=n>>6&63|128),t[r++]=63&n|128)}return t},goog.crypt.utf8ByteArrayToString=function(e){for(var t=[],r=0,o=0;r<e.length;){var n=e[r++];if(128>n)t[o++]=String.fromCharCode(n);else if(191<n&&224>n){var s=e[r++];t[o++]=String.fromCharCode((31&n)<<6|63&s)}else if(239<n&&365>n){s=e[r++];var i=e[r++];n=((7&n)<<18|(63&s)<<12|(63&i)<<6|63&e[r++])-65536,t[o++]=String.fromCharCode(55296+(n>>10)),t[o++]=String.fromCharCode(56320+(1023&n))}else s=e[r++],i=e[r++],t[o++]=String.fromCharCode((15&n)<<12|(63&s)<<6|63&i)}return t.join("")},goog.crypt.xorByteArray=function(e,t){goog.asserts.assert(e.length==t.length,"XOR array lengths must match");for(var r=[],o=0;o<e.length;o++)r.push(e[o]^t[o]);return r},goog.string={},goog.string.internal={},goog.string.internal.startsWith=function(e,t){return 0==e.lastIndexOf(t,0)},goog.string.internal.endsWith=function(e,t){var r=e.length-t.length;return 0<=r&&e.indexOf(t,r)==r},goog.string.internal.caseInsensitiveStartsWith=function(e,t){return 0==goog.string.internal.caseInsensitiveCompare(t,e.substr(0,t.length))},goog.string.internal.caseInsensitiveEndsWith=function(e,t){return 0==goog.string.internal.caseInsensitiveCompare(t,e.substr(e.length-t.length,t.length))},goog.string.internal.caseInsensitiveEquals=function(e,t){return e.toLowerCase()==t.toLowerCase()},goog.string.internal.isEmptyOrWhitespace=function(e){return/^[\s\xa0]*$/.test(e)},goog.string.internal.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(e){return e.trim()}:function(e){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(e)[1]},goog.string.internal.caseInsensitiveCompare=function(e,t){return(e=String(e).toLowerCase())<(t=String(t).toLowerCase())?-1:e==t?0:1},goog.string.internal.newLineToBr=function(e,t){return e.replace(/(\r\n|\r|\n)/g,t?"<br />":"<br>")},goog.string.internal.htmlEscape=function(e,t){if(t)e=e.replace(goog.string.internal.AMP_RE_,"&amp;").replace(goog.string.internal.LT_RE_,"&lt;").replace(goog.string.internal.GT_RE_,"&gt;").replace(goog.string.internal.QUOT_RE_,"&quot;").replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;").replace(goog.string.internal.NULL_RE_,"&#0;");else{if(!goog.string.internal.ALL_RE_.test(e))return e;-1!=e.indexOf("&")&&(e=e.replace(goog.string.internal.AMP_RE_,"&amp;")),-1!=e.indexOf("<")&&(e=e.replace(goog.string.internal.LT_RE_,"&lt;")),-1!=e.indexOf(">")&&(e=e.replace(goog.string.internal.GT_RE_,"&gt;")),-1!=e.indexOf('"')&&(e=e.replace(goog.string.internal.QUOT_RE_,"&quot;")),-1!=e.indexOf("'")&&(e=e.replace(goog.string.internal.SINGLE_QUOTE_RE_,"&#39;")),-1!=e.indexOf("\0")&&(e=e.replace(goog.string.internal.NULL_RE_,"&#0;"))}return e},goog.string.internal.AMP_RE_=/&/g,goog.string.internal.LT_RE_=/</g,goog.string.internal.GT_RE_=/>/g,goog.string.internal.QUOT_RE_=/"/g,goog.string.internal.SINGLE_QUOTE_RE_=/'/g,goog.string.internal.NULL_RE_=/\x00/g,goog.string.internal.ALL_RE_=/[\x00&<>"']/,goog.string.internal.whitespaceEscape=function(e,t){return goog.string.internal.newLineToBr(e.replace(/  /g," &#160;"),t)},goog.string.internal.contains=function(e,t){return-1!=e.indexOf(t)},goog.string.internal.caseInsensitiveContains=function(e,t){return goog.string.internal.contains(e.toLowerCase(),t.toLowerCase())},goog.string.internal.compareVersions=function(e,t){var r=0;e=goog.string.internal.trim(String(e)).split("."),t=goog.string.internal.trim(String(t)).split(".");for(var o=Math.max(e.length,t.length),n=0;0==r&&n<o;n++){var s=e[n]||"",i=t[n]||"";do{if(s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],i=/(\d*)(\D*)(.*)/.exec(i)||["","","",""],0==s[0].length&&0==i[0].length)break;r=0==s[1].length?0:parseInt(s[1],10);var a=0==i[1].length?0:parseInt(i[1],10);r=goog.string.internal.compareElements_(r,a)||goog.string.internal.compareElements_(0==s[2].length,0==i[2].length)||goog.string.internal.compareElements_(s[2],i[2]),s=s[3],i=i[3]}while(0==r)}return r},goog.string.internal.compareElements_=function(e,t){return e<t?-1:e>t?1:0},goog.string.TypedString=function(){},goog.string.Const=function(e,t){this.stringConstValueWithSecurityContract__googStringSecurityPrivate_=e===goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_&&t||"",this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_=goog.string.Const.TYPE_MARKER_},goog.string.Const.prototype.implementsGoogStringTypedString=!0,goog.string.Const.prototype.getTypedStringValue=function(){return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_},goog.string.Const.prototype.toString=function(){return"Const{"+this.stringConstValueWithSecurityContract__googStringSecurityPrivate_+"}"},goog.string.Const.unwrap=function(e){return e instanceof goog.string.Const&&e.constructor===goog.string.Const&&e.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_===goog.string.Const.TYPE_MARKER_?e.stringConstValueWithSecurityContract__googStringSecurityPrivate_:(goog.asserts.fail("expected object of type Const, got '"+e+"'"),"type_error:Const")},goog.string.Const.from=function(e){return new goog.string.Const(goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_,e)},goog.string.Const.TYPE_MARKER_={},goog.string.Const.GOOG_STRING_CONSTRUCTOR_TOKEN_PRIVATE_={},goog.string.Const.EMPTY=goog.string.Const.from(""),goog.fs={},goog.fs.url={},goog.fs.url.createObjectUrl=function(e){return goog.fs.url.getUrlObject_().createObjectURL(e)},goog.fs.url.revokeObjectUrl=function(e){goog.fs.url.getUrlObject_().revokeObjectURL(e)},goog.fs.url.getUrlObject_=function(){var e=goog.fs.url.findUrlObject_();if(null!=e)return e;throw Error("This browser doesn't seem to support blob URLs")},goog.fs.url.findUrlObject_=function(){return goog.isDef(goog.global.URL)&&goog.isDef(goog.global.URL.createObjectURL)?goog.global.URL:goog.isDef(goog.global.webkitURL)&&goog.isDef(goog.global.webkitURL.createObjectURL)?goog.global.webkitURL:goog.isDef(goog.global.createObjectURL)?goog.global:null},goog.fs.url.browserSupportsObjectUrls=function(){return null!=goog.fs.url.findUrlObject_()},goog.html={},goog.html.trustedtypes={},goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY=goog.TRUSTED_TYPES_POLICY_NAME?goog.createTrustedTypesPolicy(goog.TRUSTED_TYPES_POLICY_NAME+"#html"):null,goog.i18n={},goog.i18n.bidi={},goog.i18n.bidi.FORCE_RTL=!1,goog.i18n.bidi.IS_RTL=goog.i18n.bidi.FORCE_RTL||("ar"==goog.LOCALE.substring(0,2).toLowerCase()||"fa"==goog.LOCALE.substring(0,2).toLowerCase()||"he"==goog.LOCALE.substring(0,2).toLowerCase()||"iw"==goog.LOCALE.substring(0,2).toLowerCase()||"ps"==goog.LOCALE.substring(0,2).toLowerCase()||"sd"==goog.LOCALE.substring(0,2).toLowerCase()||"ug"==goog.LOCALE.substring(0,2).toLowerCase()||"ur"==goog.LOCALE.substring(0,2).toLowerCase()||"yi"==goog.LOCALE.substring(0,2).toLowerCase())&&(2==goog.LOCALE.length||"-"==goog.LOCALE.substring(2,3)||"_"==goog.LOCALE.substring(2,3))||3<=goog.LOCALE.length&&"ckb"==goog.LOCALE.substring(0,3).toLowerCase()&&(3==goog.LOCALE.length||"-"==goog.LOCALE.substring(3,4)||"_"==goog.LOCALE.substring(3,4))||7<=goog.LOCALE.length&&("-"==goog.LOCALE.substring(2,3)||"_"==goog.LOCALE.substring(2,3))&&("adlm"==goog.LOCALE.substring(3,7).toLowerCase()||"arab"==goog.LOCALE.substring(3,7).toLowerCase()||"hebr"==goog.LOCALE.substring(3,7).toLowerCase()||"nkoo"==goog.LOCALE.substring(3,7).toLowerCase()||"rohg"==goog.LOCALE.substring(3,7).toLowerCase()||"thaa"==goog.LOCALE.substring(3,7).toLowerCase())||8<=goog.LOCALE.length&&("-"==goog.LOCALE.substring(3,4)||"_"==goog.LOCALE.substring(3,4))&&("adlm"==goog.LOCALE.substring(4,8).toLowerCase()||"arab"==goog.LOCALE.substring(4,8).toLowerCase()||"hebr"==goog.LOCALE.substring(4,8).toLowerCase()||"nkoo"==goog.LOCALE.substring(4,8).toLowerCase()||"rohg"==goog.LOCALE.substring(4,8).toLowerCase()||"thaa"==goog.LOCALE.substring(4,8).toLowerCase()),goog.i18n.bidi.Format={LRE:"‪",RLE:"‫",PDF:"‬",LRM:"‎",RLM:"‏"},goog.i18n.bidi.Dir={LTR:1,RTL:-1,NEUTRAL:0},goog.i18n.bidi.RIGHT="right",goog.i18n.bidi.LEFT="left",goog.i18n.bidi.I18N_RIGHT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.LEFT:goog.i18n.bidi.RIGHT,goog.i18n.bidi.I18N_LEFT=goog.i18n.bidi.IS_RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT,goog.i18n.bidi.toDir=function(e,t){return"number"==typeof e?0<e?goog.i18n.bidi.Dir.LTR:0>e?goog.i18n.bidi.Dir.RTL:t?null:goog.i18n.bidi.Dir.NEUTRAL:null==e?null:e?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR},goog.i18n.bidi.ltrChars_="A-Za-zÀ-ÖØ-öø-ʸ̀-֐ऀ-῿‎Ⰰ-\ud801\ud804-\ud839\ud83c-\udbff豈-﬜︀-﹯﻽-￿",goog.i18n.bidi.rtlChars_="֑-ۯۺ-ࣿ‏\ud802-\ud803\ud83a-\ud83bיִ-﷿ﹰ-ﻼ",goog.i18n.bidi.htmlSkipReg_=/<[^>]*>|&[^;]+;/g,goog.i18n.bidi.stripHtmlIfNeeded_=function(e,t){return t?e.replace(goog.i18n.bidi.htmlSkipReg_,""):e},goog.i18n.bidi.rtlCharReg_=new RegExp("["+goog.i18n.bidi.rtlChars_+"]"),goog.i18n.bidi.ltrCharReg_=new RegExp("["+goog.i18n.bidi.ltrChars_+"]"),goog.i18n.bidi.hasAnyRtl=function(e,t){return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(e,t))},goog.i18n.bidi.hasRtlChar=goog.i18n.bidi.hasAnyRtl,goog.i18n.bidi.hasAnyLtr=function(e,t){return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(e,t))},goog.i18n.bidi.ltrRe_=new RegExp("^["+goog.i18n.bidi.ltrChars_+"]"),goog.i18n.bidi.rtlRe_=new RegExp("^["+goog.i18n.bidi.rtlChars_+"]"),goog.i18n.bidi.isRtlChar=function(e){return goog.i18n.bidi.rtlRe_.test(e)},goog.i18n.bidi.isLtrChar=function(e){return goog.i18n.bidi.ltrRe_.test(e)},goog.i18n.bidi.isNeutralChar=function(e){return!goog.i18n.bidi.isLtrChar(e)&&!goog.i18n.bidi.isRtlChar(e)},goog.i18n.bidi.ltrDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.rtlChars_+"]*["+goog.i18n.bidi.ltrChars_+"]"),goog.i18n.bidi.rtlDirCheckRe_=new RegExp("^[^"+goog.i18n.bidi.ltrChars_+"]*["+goog.i18n.bidi.rtlChars_+"]"),goog.i18n.bidi.startsWithRtl=function(e,t){return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(e,t))},goog.i18n.bidi.isRtlText=goog.i18n.bidi.startsWithRtl,goog.i18n.bidi.startsWithLtr=function(e,t){return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(e,t))},goog.i18n.bidi.isLtrText=goog.i18n.bidi.startsWithLtr,goog.i18n.bidi.isRequiredLtrRe_=/^http:\/\/.*/,goog.i18n.bidi.isNeutralText=function(e,t){return e=goog.i18n.bidi.stripHtmlIfNeeded_(e,t),goog.i18n.bidi.isRequiredLtrRe_.test(e)||!goog.i18n.bidi.hasAnyLtr(e)&&!goog.i18n.bidi.hasAnyRtl(e)},goog.i18n.bidi.ltrExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.ltrChars_+"][^"+goog.i18n.bidi.rtlChars_+"]*$"),goog.i18n.bidi.rtlExitDirCheckRe_=new RegExp("["+goog.i18n.bidi.rtlChars_+"][^"+goog.i18n.bidi.ltrChars_+"]*$"),goog.i18n.bidi.endsWithLtr=function(e,t){return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(e,t))},goog.i18n.bidi.isLtrExitText=goog.i18n.bidi.endsWithLtr,goog.i18n.bidi.endsWithRtl=function(e,t){return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(e,t))},goog.i18n.bidi.isRtlExitText=goog.i18n.bidi.endsWithRtl,goog.i18n.bidi.rtlLocalesRe_=/^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i,goog.i18n.bidi.isRtlLanguage=function(e){return goog.i18n.bidi.rtlLocalesRe_.test(e)},goog.i18n.bidi.bracketGuardTextRe_=/(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g,goog.i18n.bidi.guardBracketInText=function(e,t){return t=(void 0===t?goog.i18n.bidi.hasAnyRtl(e):t)?goog.i18n.bidi.Format.RLM:goog.i18n.bidi.Format.LRM,e.replace(goog.i18n.bidi.bracketGuardTextRe_,t+"$&"+t)},goog.i18n.bidi.enforceRtlInHtml=function(e){return"<"==e.charAt(0)?e.replace(/<\w+/,"$& dir=rtl"):"\n<span dir=rtl>"+e+"</span>"},goog.i18n.bidi.enforceRtlInText=function(e){return goog.i18n.bidi.Format.RLE+e+goog.i18n.bidi.Format.PDF},goog.i18n.bidi.enforceLtrInHtml=function(e){return"<"==e.charAt(0)?e.replace(/<\w+/,"$& dir=ltr"):"\n<span dir=ltr>"+e+"</span>"},goog.i18n.bidi.enforceLtrInText=function(e){return goog.i18n.bidi.Format.LRE+e+goog.i18n.bidi.Format.PDF},goog.i18n.bidi.dimensionsRe_=/:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g,goog.i18n.bidi.leftRe_=/left/gi,goog.i18n.bidi.rightRe_=/right/gi,goog.i18n.bidi.tempRe_=/%%%%/g,goog.i18n.bidi.mirrorCSS=function(e){return e.replace(goog.i18n.bidi.dimensionsRe_,":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_,"%%%%").replace(goog.i18n.bidi.rightRe_,goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_,goog.i18n.bidi.RIGHT)},goog.i18n.bidi.doubleQuoteSubstituteRe_=/([\u0591-\u05f2])"/g,goog.i18n.bidi.singleQuoteSubstituteRe_=/([\u0591-\u05f2])'/g,goog.i18n.bidi.normalizeHebrewQuote=function(e){return e.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_,"$1״").replace(goog.i18n.bidi.singleQuoteSubstituteRe_,"$1׳")},goog.i18n.bidi.wordSeparatorRe_=/\s+/,goog.i18n.bidi.hasNumeralsRe_=/[\d\u06f0-\u06f9]/,goog.i18n.bidi.rtlDetectionThreshold_=.4,goog.i18n.bidi.estimateDirection=function(e,t){var r=0,o=0,n=!1;for(e=goog.i18n.bidi.stripHtmlIfNeeded_(e,t).split(goog.i18n.bidi.wordSeparatorRe_),t=0;t<e.length;t++){var s=e[t];goog.i18n.bidi.startsWithRtl(s)?(r++,o++):goog.i18n.bidi.isRequiredLtrRe_.test(s)?n=!0:goog.i18n.bidi.hasAnyLtr(s)?o++:goog.i18n.bidi.hasNumeralsRe_.test(s)&&(n=!0)}return 0==o?n?goog.i18n.bidi.Dir.LTR:goog.i18n.bidi.Dir.NEUTRAL:r/o>goog.i18n.bidi.rtlDetectionThreshold_?goog.i18n.bidi.Dir.RTL:goog.i18n.bidi.Dir.LTR},goog.i18n.bidi.detectRtlDirectionality=function(e,t){return goog.i18n.bidi.estimateDirection(e,t)==goog.i18n.bidi.Dir.RTL},goog.i18n.bidi.setElementDirAndAlign=function(e,t){e&&(t=goog.i18n.bidi.toDir(t))&&(e.style.textAlign=t==goog.i18n.bidi.Dir.RTL?goog.i18n.bidi.RIGHT:goog.i18n.bidi.LEFT,e.dir=t==goog.i18n.bidi.Dir.RTL?"rtl":"ltr")},goog.i18n.bidi.setElementDirByTextDirectionality=function(e,t){switch(goog.i18n.bidi.estimateDirection(t)){case goog.i18n.bidi.Dir.LTR:e.dir="ltr";break;case goog.i18n.bidi.Dir.RTL:e.dir="rtl";break;default:e.removeAttribute("dir")}},goog.i18n.bidi.DirectionalString=function(){},goog.html.TrustedResourceUrl=function(){this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_="",this.trustedURL_=null,this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_},goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString=!0,goog.html.TrustedResourceUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_.toString()},goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString=!0,goog.html.TrustedResourceUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR},goog.html.TrustedResourceUrl.prototype.cloneWithParams=function(e,t){var r=goog.html.TrustedResourceUrl.unwrap(this),o=(r=goog.html.TrustedResourceUrl.URL_PARAM_PARSER_.exec(r))[3]||"";return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(r[1]+goog.html.TrustedResourceUrl.stringifyParams_("?",r[2]||"",e)+goog.html.TrustedResourceUrl.stringifyParams_("#",o,t))},goog.DEBUG&&(goog.html.TrustedResourceUrl.prototype.toString=function(){return"TrustedResourceUrl{"+this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_+"}"}),goog.html.TrustedResourceUrl.unwrap=function(e){return goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(e).toString()},goog.html.TrustedResourceUrl.unwrapTrustedScriptURL=function(e){return e instanceof goog.html.TrustedResourceUrl&&e.constructor===goog.html.TrustedResourceUrl&&e.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_?e.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_:(goog.asserts.fail("expected object of type TrustedResourceUrl, got '"+e+"' of type "+goog.typeOf(e)),"type_error:TrustedResourceUrl")},goog.html.TrustedResourceUrl.unwrapTrustedURL=function(e){return e.trustedURL_?e.trustedURL_:goog.html.TrustedResourceUrl.unwrap(e)},goog.html.TrustedResourceUrl.format=function(e,t){var r=goog.string.Const.unwrap(e);if(!goog.html.TrustedResourceUrl.BASE_URL_.test(r))throw Error("Invalid TrustedResourceUrl format: "+r);return e=r.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_,(function(e,o){if(!Object.prototype.hasOwnProperty.call(t,o))throw Error('Found marker, "'+o+'", in format string, "'+r+'", but no valid label mapping found in args: '+JSON.stringify(t));return(e=t[o])instanceof goog.string.Const?goog.string.Const.unwrap(e):encodeURIComponent(String(e))})),goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.TrustedResourceUrl.FORMAT_MARKER_=/%{(\w+)}/g,goog.html.TrustedResourceUrl.BASE_URL_=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,goog.html.TrustedResourceUrl.URL_PARAM_PARSER_=/^([^?#]*)(\?[^#]*)?(#[\s\S]*)?/,goog.html.TrustedResourceUrl.formatWithParams=function(e,t,r,o){return goog.html.TrustedResourceUrl.format(e,t).cloneWithParams(r,o)},goog.html.TrustedResourceUrl.fromConstant=function(e){return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(e))},goog.html.TrustedResourceUrl.fromConstants=function(e){for(var t="",r=0;r<e.length;r++)t+=goog.string.Const.unwrap(e[r]);return goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(t)},goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={},goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse=function(e){var t=new goog.html.TrustedResourceUrl;return t.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScriptURL(e):e,goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY&&(t.trustedURL_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(e)),t},goog.html.TrustedResourceUrl.stringifyParams_=function(e,t,r){if(null==r)return t;if(goog.isString(r))return r?e+encodeURIComponent(r):"";for(var o in r){var n=r[o];n=goog.isArray(n)?n:[n];for(var s=0;s<n.length;s++){var i=n[s];null!=i&&(t||(t=e),t+=(t.length>e.length?"&":"")+encodeURIComponent(o)+"="+encodeURIComponent(String(i)))}}return t},goog.html.SafeUrl=function(){this.privateDoNotAccessOrElseSafeUrlWrappedValue_="",this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_},goog.html.SafeUrl.INNOCUOUS_STRING="about:invalid#zClosurez",goog.html.SafeUrl.prototype.implementsGoogStringTypedString=!0,goog.html.SafeUrl.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeUrlWrappedValue_.toString()},goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString=!0,goog.html.SafeUrl.prototype.getDirection=function(){return goog.i18n.bidi.Dir.LTR},goog.DEBUG&&(goog.html.SafeUrl.prototype.toString=function(){return"SafeUrl{"+this.privateDoNotAccessOrElseSafeUrlWrappedValue_+"}"}),goog.html.SafeUrl.unwrap=function(e){return goog.html.SafeUrl.unwrapTrustedURL(e).toString()},goog.html.SafeUrl.unwrapTrustedURL=function(e){return e instanceof goog.html.SafeUrl&&e.constructor===goog.html.SafeUrl&&e.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_?e.privateDoNotAccessOrElseSafeUrlWrappedValue_:(goog.asserts.fail("expected object of type SafeUrl, got '"+e+"' of type "+goog.typeOf(e)),"type_error:SafeUrl")},goog.html.SafeUrl.fromConstant=function(e){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(e))},goog.html.SAFE_MIME_TYPE_PATTERN_=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-wav|wav|webm)|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime))(?:;\w+=(?:\w+|"[\w;=]+"))*$/i,goog.html.SafeUrl.isSafeMimeType=function(e){return goog.html.SAFE_MIME_TYPE_PATTERN_.test(e)},goog.html.SafeUrl.fromBlob=function(e){return e=goog.html.SAFE_MIME_TYPE_PATTERN_.test(e.type)?goog.fs.url.createObjectUrl(e):goog.html.SafeUrl.INNOCUOUS_STRING,goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.DATA_URL_PATTERN_=/^data:([^,]*);base64,[a-z0-9+\/]+=*$/i,goog.html.SafeUrl.fromDataUrl=function(e){var t=(e=e.replace(/(%0A|%0D)/g,"")).match(goog.html.DATA_URL_PATTERN_);return t=t&&goog.html.SAFE_MIME_TYPE_PATTERN_.test(t[1]),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(t?e:goog.html.SafeUrl.INNOCUOUS_STRING)},goog.html.SafeUrl.fromTelUrl=function(e){return goog.string.internal.caseInsensitiveStartsWith(e,"tel:")||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.SIP_URL_PATTERN_=/^sip[s]?:[+a-z0-9_.!$%&'*\/=^`{|}~-]+@([a-z0-9-]+\.)+[a-z0-9]{2,63}$/i,goog.html.SafeUrl.fromSipUrl=function(e){return goog.html.SIP_URL_PATTERN_.test(decodeURIComponent(e))||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeUrl.fromFacebookMessengerUrl=function(e){return goog.string.internal.caseInsensitiveStartsWith(e,"fb-messenger://share")||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeUrl.fromWhatsAppUrl=function(e){return goog.string.internal.caseInsensitiveStartsWith(e,"whatsapp://send")||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeUrl.fromSmsUrl=function(e){return goog.string.internal.caseInsensitiveStartsWith(e,"sms:")&&goog.html.SafeUrl.isSmsUrlBodyValid_(e)||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeUrl.isSmsUrlBodyValid_=function(e){var t=e.indexOf("#");if(0<t&&(e=e.substring(0,t)),!(t=e.match(/[?&]body=/gi)))return!0;if(1<t.length)return!1;if(!(e=e.match(/[?&]body=([^&]*)/)[1]))return!0;try{decodeURIComponent(e)}catch(e){return!1}return/^(?:[a-z0-9\-_.~]|%[0-9a-f]{2})+$/i.test(e)},goog.html.SafeUrl.fromSshUrl=function(e){return goog.string.internal.caseInsensitiveStartsWith(e,"ssh://")||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeUrl.sanitizeChromeExtensionUrl=function(e,t){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^chrome-extension:\/\/([^\/]+)\//,e,t)},goog.html.SafeUrl.sanitizeFirefoxExtensionUrl=function(e,t){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^moz-extension:\/\/([^\/]+)\//,e,t)},goog.html.SafeUrl.sanitizeEdgeExtensionUrl=function(e,t){return goog.html.SafeUrl.sanitizeExtensionUrl_(/^ms-browser-extension:\/\/([^\/]+)\//,e,t)},goog.html.SafeUrl.sanitizeExtensionUrl_=function(e,t,r){return(e=e.exec(t))?(e=e[1],-1==(r instanceof goog.string.Const?[goog.string.Const.unwrap(r)]:r.map((function(e){return goog.string.Const.unwrap(e)}))).indexOf(e)&&(t=goog.html.SafeUrl.INNOCUOUS_STRING)):t=goog.html.SafeUrl.INNOCUOUS_STRING,goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(t)},goog.html.SafeUrl.fromTrustedResourceUrl=function(e){return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(e))},goog.html.SAFE_URL_PATTERN_=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i,goog.html.SafeUrl.SAFE_URL_PATTERN=goog.html.SAFE_URL_PATTERN_,goog.html.SafeUrl.sanitize=function(e){return e instanceof goog.html.SafeUrl?e:(e="object"==typeof e&&e.implementsGoogStringTypedString?e.getTypedStringValue():String(e),goog.html.SAFE_URL_PATTERN_.test(e)||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e))},goog.html.SafeUrl.sanitizeAssertUnchanged=function(e,t){return e instanceof goog.html.SafeUrl?e:(e="object"==typeof e&&e.implementsGoogStringTypedString?e.getTypedStringValue():String(e),t&&/^data:/i.test(e)&&(t=goog.html.SafeUrl.fromDataUrl(e)).getTypedStringValue()==e?t:(goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(e),"%s does not match the safe URL pattern",e)||(e=goog.html.SafeUrl.INNOCUOUS_STRING),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(e)))},goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={},goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse=function(e){var t=new goog.html.SafeUrl;return t.privateDoNotAccessOrElseSafeUrlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createURL(e):e,t},goog.html.SafeUrl.ABOUT_BLANK=goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse("about:blank"),goog.html.SafeStyle=function(){this.privateDoNotAccessOrElseSafeStyleWrappedValue_="",this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_},goog.html.SafeStyle.prototype.implementsGoogStringTypedString=!0,goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={},goog.html.SafeStyle.fromConstant=function(e){return 0===(e=goog.string.Const.unwrap(e)).length?goog.html.SafeStyle.EMPTY:(goog.asserts.assert(goog.string.internal.endsWith(e,";"),"Last character of style string is not ';': "+e),goog.asserts.assert(goog.string.internal.contains(e,":"),"Style string must contain at least one ':', to specify a \"name: value\" pair: "+e),goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(e))},goog.html.SafeStyle.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_},goog.DEBUG&&(goog.html.SafeStyle.prototype.toString=function(){return"SafeStyle{"+this.privateDoNotAccessOrElseSafeStyleWrappedValue_+"}"}),goog.html.SafeStyle.unwrap=function(e){return e instanceof goog.html.SafeStyle&&e.constructor===goog.html.SafeStyle&&e.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_?e.privateDoNotAccessOrElseSafeStyleWrappedValue_:(goog.asserts.fail("expected object of type SafeStyle, got '"+e+"' of type "+goog.typeOf(e)),"type_error:SafeStyle")},goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse=function(e){return(new goog.html.SafeStyle).initSecurityPrivateDoNotAccessOrElse_(e)},goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_=function(e){return this.privateDoNotAccessOrElseSafeStyleWrappedValue_=e,this},goog.html.SafeStyle.EMPTY=goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(""),goog.html.SafeStyle.INNOCUOUS_STRING="zClosurez",goog.html.SafeStyle.create=function(e){var t,r="";for(t in e){if(!/^[-_a-zA-Z0-9]+$/.test(t))throw Error("Name allows only [-_a-zA-Z0-9], got: "+t);var o=e[t];null!=o&&(r+=t+":"+(o=goog.isArray(o)?goog.array.map(o,goog.html.SafeStyle.sanitizePropertyValue_).join(" "):goog.html.SafeStyle.sanitizePropertyValue_(o))+";")}return r?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(r):goog.html.SafeStyle.EMPTY},goog.html.SafeStyle.sanitizePropertyValue_=function(e){if(e instanceof goog.html.SafeUrl)return'url("'+goog.html.SafeUrl.unwrap(e).replace(/</g,"%3c").replace(/[\\"]/g,"\\$&")+'")';if(e=e instanceof goog.string.Const?goog.string.Const.unwrap(e):goog.html.SafeStyle.sanitizePropertyValueString_(String(e)),/[{;}]/.test(e))throw new goog.asserts.AssertionError("Value does not allow [{;}], got: %s.",[e]);return e},goog.html.SafeStyle.sanitizePropertyValueString_=function(e){var t=e.replace(goog.html.SafeStyle.FUNCTIONS_RE_,"$1").replace(goog.html.SafeStyle.FUNCTIONS_RE_,"$1").replace(goog.html.SafeStyle.URL_RE_,"url");return goog.html.SafeStyle.VALUE_RE_.test(t)?goog.html.SafeStyle.COMMENT_RE_.test(e)?(goog.asserts.fail("String value disallows comments, got: "+e),goog.html.SafeStyle.INNOCUOUS_STRING):goog.html.SafeStyle.hasBalancedQuotes_(e)?goog.html.SafeStyle.hasBalancedSquareBrackets_(e)?goog.html.SafeStyle.sanitizeUrl_(e):(goog.asserts.fail("String value requires balanced square brackets and one identifier per pair of brackets, got: "+e),goog.html.SafeStyle.INNOCUOUS_STRING):(goog.asserts.fail("String value requires balanced quotes, got: "+e),goog.html.SafeStyle.INNOCUOUS_STRING):(goog.asserts.fail("String value allows only "+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+" and simple functions, got: "+e),goog.html.SafeStyle.INNOCUOUS_STRING)},goog.html.SafeStyle.hasBalancedQuotes_=function(e){for(var t=!0,r=!0,o=0;o<e.length;o++){var n=e.charAt(o);"'"==n&&r?t=!t:'"'==n&&t&&(r=!r)}return t&&r},goog.html.SafeStyle.hasBalancedSquareBrackets_=function(e){for(var t=!0,r=/^[-_a-zA-Z0-9]$/,o=0;o<e.length;o++){var n=e.charAt(o);if("]"==n){if(t)return!1;t=!0}else if("["==n){if(!t)return!1;t=!1}else if(!t&&!r.test(n))return!1}return t},goog.html.SafeStyle.VALUE_ALLOWED_CHARS_="[-,.\"'%_!# a-zA-Z0-9\\[\\]]",goog.html.SafeStyle.VALUE_RE_=new RegExp("^"+goog.html.SafeStyle.VALUE_ALLOWED_CHARS_+"+$"),goog.html.SafeStyle.URL_RE_=/\b(url\([ \t\n]*)('[ -&(-\[\]-~]*'|"[ !#-\[\]-~]*"|[!#-&*-\[\]-~]*)([ \t\n]*\))/g,goog.html.SafeStyle.FUNCTIONS_RE_=/\b(hsl|hsla|rgb|rgba|matrix|calc|minmax|fit-content|repeat|(rotate|scale|translate)(X|Y|Z|3d)?)\([-+*/0-9a-z.%\[\], ]+\)/g,goog.html.SafeStyle.COMMENT_RE_=/\/\*/,goog.html.SafeStyle.sanitizeUrl_=function(e){return e.replace(goog.html.SafeStyle.URL_RE_,(function(e,t,r,o){var n="";return r=r.replace(/^(['"])(.*)\1$/,(function(e,t,r){return n=t,r})),e=goog.html.SafeUrl.sanitize(r).getTypedStringValue(),t+n+e+n+o}))},goog.html.SafeStyle.concat=function(e){var t="",r=function(e){goog.isArray(e)?goog.array.forEach(e,r):t+=goog.html.SafeStyle.unwrap(e)};return goog.array.forEach(arguments,r),t?goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(t):goog.html.SafeStyle.EMPTY},goog.html.SafeScript=function(){this.privateDoNotAccessOrElseSafeScriptWrappedValue_="",this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_},goog.html.SafeScript.prototype.implementsGoogStringTypedString=!0,goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={},goog.html.SafeScript.fromConstant=function(e){return 0===(e=goog.string.Const.unwrap(e)).length?goog.html.SafeScript.EMPTY:goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeScript.fromConstantAndArgs=function(e,t){for(var r=[],o=1;o<arguments.length;o++)r.push(goog.html.SafeScript.stringify_(arguments[o]));return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse("("+goog.string.Const.unwrap(e)+")("+r.join(", ")+");")},goog.html.SafeScript.fromJson=function(e){return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(goog.html.SafeScript.stringify_(e))},goog.html.SafeScript.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_.toString()},goog.DEBUG&&(goog.html.SafeScript.prototype.toString=function(){return"SafeScript{"+this.privateDoNotAccessOrElseSafeScriptWrappedValue_+"}"}),goog.html.SafeScript.unwrap=function(e){return goog.html.SafeScript.unwrapTrustedScript(e).toString()},goog.html.SafeScript.unwrapTrustedScript=function(e){return e instanceof goog.html.SafeScript&&e.constructor===goog.html.SafeScript&&e.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_?e.privateDoNotAccessOrElseSafeScriptWrappedValue_:(goog.asserts.fail("expected object of type SafeScript, got '"+e+"' of type "+goog.typeOf(e)),"type_error:SafeScript")},goog.html.SafeScript.stringify_=function(e){return JSON.stringify(e).replace(/</g,"\\x3c")},goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse=function(e){return(new goog.html.SafeScript).initSecurityPrivateDoNotAccessOrElse_(e)},goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_=function(e){return this.privateDoNotAccessOrElseSafeScriptWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createScript(e):e,this},goog.html.SafeScript.EMPTY=goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(""),goog.object={},goog.object.is=function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t},goog.object.forEach=function(e,t,r){for(var o in e)t.call(r,e[o],o,e)},goog.object.filter=function(e,t,r){var o,n={};for(o in e)t.call(r,e[o],o,e)&&(n[o]=e[o]);return n},goog.object.map=function(e,t,r){var o,n={};for(o in e)n[o]=t.call(r,e[o],o,e);return n},goog.object.some=function(e,t,r){for(var o in e)if(t.call(r,e[o],o,e))return!0;return!1},goog.object.every=function(e,t,r){for(var o in e)if(!t.call(r,e[o],o,e))return!1;return!0},goog.object.getCount=function(e){var t,r=0;for(t in e)r++;return r},goog.object.getAnyKey=function(e){for(var t in e)return t},goog.object.getAnyValue=function(e){for(var t in e)return e[t]},goog.object.contains=function(e,t){return goog.object.containsValue(e,t)},goog.object.getValues=function(e){var t,r=[],o=0;for(t in e)r[o++]=e[t];return r},goog.object.getKeys=function(e){var t,r=[],o=0;for(t in e)r[o++]=t;return r},goog.object.getValueByKeys=function(e,t){var r=goog.isArrayLike(t),o=r?t:arguments;for(r=r?0:1;r<o.length;r++){if(null==e)return;e=e[o[r]]}return e},goog.object.containsKey=function(e,t){return null!==e&&t in e},goog.object.containsValue=function(e,t){for(var r in e)if(e[r]==t)return!0;return!1},goog.object.findKey=function(e,t,r){for(var o in e)if(t.call(r,e[o],o,e))return o},goog.object.findValue=function(e,t,r){return(t=goog.object.findKey(e,t,r))&&e[t]},goog.object.isEmpty=function(e){for(var t in e)return!1;return!0},goog.object.clear=function(e){for(var t in e)delete e[t]},goog.object.remove=function(e,t){var r;return(r=t in e)&&delete e[t],r},goog.object.add=function(e,t,r){if(null!==e&&t in e)throw Error('The object already contains the key "'+t+'"');goog.object.set(e,t,r)},goog.object.get=function(e,t,r){return null!==e&&t in e?e[t]:r},goog.object.set=function(e,t,r){e[t]=r},goog.object.setIfUndefined=function(e,t,r){return t in e?e[t]:e[t]=r},goog.object.setWithReturnValueIfNotSet=function(e,t,r){return t in e?e[t]:(r=r(),e[t]=r)},goog.object.equals=function(e,t){for(var r in e)if(!(r in t)||e[r]!==t[r])return!1;for(var o in t)if(!(o in e))return!1;return!0},goog.object.clone=function(e){var t,r={};for(t in e)r[t]=e[t];return r},goog.object.unsafeClone=function(e){var t=goog.typeOf(e);if("object"==t||"array"==t){if(goog.isFunction(e.clone))return e.clone();for(var r in t="array"==t?[]:{},e)t[r]=goog.object.unsafeClone(e[r]);return t}return e},goog.object.transpose=function(e){var t,r={};for(t in e)r[e[t]]=t;return r},goog.object.PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),goog.object.extend=function(e,t){for(var r,o,n=1;n<arguments.length;n++){for(r in o=arguments[n])e[r]=o[r];for(var s=0;s<goog.object.PROTOTYPE_FIELDS_.length;s++)r=goog.object.PROTOTYPE_FIELDS_[s],Object.prototype.hasOwnProperty.call(o,r)&&(e[r]=o[r])}},goog.object.create=function(e){var t=arguments.length;if(1==t&&goog.isArray(arguments[0]))return goog.object.create.apply(null,arguments[0]);if(t%2)throw Error("Uneven number of arguments");for(var r={},o=0;o<t;o+=2)r[arguments[o]]=arguments[o+1];return r},goog.object.createSet=function(e){var t=arguments.length;if(1==t&&goog.isArray(arguments[0]))return goog.object.createSet.apply(null,arguments[0]);for(var r={},o=0;o<t;o++)r[arguments[o]]=!0;return r},goog.object.createImmutableView=function(e){var t=e;return Object.isFrozen&&!Object.isFrozen(e)&&(t=Object.create(e),Object.freeze(t)),t},goog.object.isImmutableView=function(e){return!!Object.isFrozen&&Object.isFrozen(e)},goog.object.getAllPropertyNames=function(e,t,r){if(!e)return[];if(!Object.getOwnPropertyNames||!Object.getPrototypeOf)return goog.object.getKeys(e);for(var o={};e&&(e!==Object.prototype||t)&&(e!==Function.prototype||r);){for(var n=Object.getOwnPropertyNames(e),s=0;s<n.length;s++)o[n[s]]=!0;e=Object.getPrototypeOf(e)}return goog.object.getKeys(o)},goog.object.getSuperClass=function(e){return(e=Object.getPrototypeOf(e.prototype))&&e.constructor},goog.html.SafeStyleSheet=function(){this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_="",this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_},goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString=!0,goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={},goog.html.SafeStyleSheet.createRule=function(e,t){if(goog.string.internal.contains(e,"<"))throw Error("Selector does not allow '<', got: "+e);var r=e.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g,"");if(!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=^$|]+$/.test(r))throw Error("Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|] and strings, got: "+e);if(!goog.html.SafeStyleSheet.hasBalancedBrackets_(r))throw Error("() and [] in selector must be balanced, got: "+e);return t instanceof goog.html.SafeStyle||(t=goog.html.SafeStyle.create(t)),e=e+"{"+goog.html.SafeStyle.unwrap(t).replace(/</g,"\\3C ")+"}",goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(e)},goog.html.SafeStyleSheet.hasBalancedBrackets_=function(e){for(var t={"(":")","[":"]"},r=[],o=0;o<e.length;o++){var n=e[o];if(t[n])r.push(t[n]);else if(goog.object.contains(t,n)&&r.pop()!=n)return!1}return 0==r.length},goog.html.SafeStyleSheet.concat=function(e){var t="",r=function(e){goog.isArray(e)?goog.array.forEach(e,r):t+=goog.html.SafeStyleSheet.unwrap(e)};return goog.array.forEach(arguments,r),goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(t)},goog.html.SafeStyleSheet.fromConstant=function(e){return 0===(e=goog.string.Const.unwrap(e)).length?goog.html.SafeStyleSheet.EMPTY:(goog.asserts.assert(!goog.string.internal.contains(e,"<"),"Forbidden '<' character in style sheet string: "+e),goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(e))},goog.html.SafeStyleSheet.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_},goog.DEBUG&&(goog.html.SafeStyleSheet.prototype.toString=function(){return"SafeStyleSheet{"+this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_+"}"}),goog.html.SafeStyleSheet.unwrap=function(e){return e instanceof goog.html.SafeStyleSheet&&e.constructor===goog.html.SafeStyleSheet&&e.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_?e.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_:(goog.asserts.fail("expected object of type SafeStyleSheet, got '"+e+"' of type "+goog.typeOf(e)),"type_error:SafeStyleSheet")},goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse=function(e){return(new goog.html.SafeStyleSheet).initSecurityPrivateDoNotAccessOrElse_(e)},goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_=function(e){return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_=e,this},goog.html.SafeStyleSheet.EMPTY=goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(""),goog.dom.tags={},goog.dom.tags.VOID_TAGS_={area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},goog.dom.tags.isVoidTag=function(e){return!0===goog.dom.tags.VOID_TAGS_[e]},goog.dom.HtmlElement=function(){},goog.dom.TagName=function(e){this.tagName_=e},goog.dom.TagName.prototype.toString=function(){return this.tagName_},goog.dom.TagName.A=new goog.dom.TagName("A"),goog.dom.TagName.ABBR=new goog.dom.TagName("ABBR"),goog.dom.TagName.ACRONYM=new goog.dom.TagName("ACRONYM"),goog.dom.TagName.ADDRESS=new goog.dom.TagName("ADDRESS"),goog.dom.TagName.APPLET=new goog.dom.TagName("APPLET"),goog.dom.TagName.AREA=new goog.dom.TagName("AREA"),goog.dom.TagName.ARTICLE=new goog.dom.TagName("ARTICLE"),goog.dom.TagName.ASIDE=new goog.dom.TagName("ASIDE"),goog.dom.TagName.AUDIO=new goog.dom.TagName("AUDIO"),goog.dom.TagName.B=new goog.dom.TagName("B"),goog.dom.TagName.BASE=new goog.dom.TagName("BASE"),goog.dom.TagName.BASEFONT=new goog.dom.TagName("BASEFONT"),goog.dom.TagName.BDI=new goog.dom.TagName("BDI"),goog.dom.TagName.BDO=new goog.dom.TagName("BDO"),goog.dom.TagName.BIG=new goog.dom.TagName("BIG"),goog.dom.TagName.BLOCKQUOTE=new goog.dom.TagName("BLOCKQUOTE"),goog.dom.TagName.BODY=new goog.dom.TagName("BODY"),goog.dom.TagName.BR=new goog.dom.TagName("BR"),goog.dom.TagName.BUTTON=new goog.dom.TagName("BUTTON"),goog.dom.TagName.CANVAS=new goog.dom.TagName("CANVAS"),goog.dom.TagName.CAPTION=new goog.dom.TagName("CAPTION"),goog.dom.TagName.CENTER=new goog.dom.TagName("CENTER"),goog.dom.TagName.CITE=new goog.dom.TagName("CITE"),goog.dom.TagName.CODE=new goog.dom.TagName("CODE"),goog.dom.TagName.COL=new goog.dom.TagName("COL"),goog.dom.TagName.COLGROUP=new goog.dom.TagName("COLGROUP"),goog.dom.TagName.COMMAND=new goog.dom.TagName("COMMAND"),goog.dom.TagName.DATA=new goog.dom.TagName("DATA"),goog.dom.TagName.DATALIST=new goog.dom.TagName("DATALIST"),goog.dom.TagName.DD=new goog.dom.TagName("DD"),goog.dom.TagName.DEL=new goog.dom.TagName("DEL"),goog.dom.TagName.DETAILS=new goog.dom.TagName("DETAILS"),goog.dom.TagName.DFN=new goog.dom.TagName("DFN"),goog.dom.TagName.DIALOG=new goog.dom.TagName("DIALOG"),goog.dom.TagName.DIR=new goog.dom.TagName("DIR"),goog.dom.TagName.DIV=new goog.dom.TagName("DIV"),goog.dom.TagName.DL=new goog.dom.TagName("DL"),goog.dom.TagName.DT=new goog.dom.TagName("DT"),goog.dom.TagName.EM=new goog.dom.TagName("EM"),goog.dom.TagName.EMBED=new goog.dom.TagName("EMBED"),goog.dom.TagName.FIELDSET=new goog.dom.TagName("FIELDSET"),goog.dom.TagName.FIGCAPTION=new goog.dom.TagName("FIGCAPTION"),goog.dom.TagName.FIGURE=new goog.dom.TagName("FIGURE"),goog.dom.TagName.FONT=new goog.dom.TagName("FONT"),goog.dom.TagName.FOOTER=new goog.dom.TagName("FOOTER"),goog.dom.TagName.FORM=new goog.dom.TagName("FORM"),goog.dom.TagName.FRAME=new goog.dom.TagName("FRAME"),goog.dom.TagName.FRAMESET=new goog.dom.TagName("FRAMESET"),goog.dom.TagName.H1=new goog.dom.TagName("H1"),goog.dom.TagName.H2=new goog.dom.TagName("H2"),goog.dom.TagName.H3=new goog.dom.TagName("H3"),goog.dom.TagName.H4=new goog.dom.TagName("H4"),goog.dom.TagName.H5=new goog.dom.TagName("H5"),goog.dom.TagName.H6=new goog.dom.TagName("H6"),goog.dom.TagName.HEAD=new goog.dom.TagName("HEAD"),goog.dom.TagName.HEADER=new goog.dom.TagName("HEADER"),goog.dom.TagName.HGROUP=new goog.dom.TagName("HGROUP"),goog.dom.TagName.HR=new goog.dom.TagName("HR"),goog.dom.TagName.HTML=new goog.dom.TagName("HTML"),goog.dom.TagName.I=new goog.dom.TagName("I"),goog.dom.TagName.IFRAME=new goog.dom.TagName("IFRAME"),goog.dom.TagName.IMG=new goog.dom.TagName("IMG"),goog.dom.TagName.INPUT=new goog.dom.TagName("INPUT"),goog.dom.TagName.INS=new goog.dom.TagName("INS"),goog.dom.TagName.ISINDEX=new goog.dom.TagName("ISINDEX"),goog.dom.TagName.KBD=new goog.dom.TagName("KBD"),goog.dom.TagName.KEYGEN=new goog.dom.TagName("KEYGEN"),goog.dom.TagName.LABEL=new goog.dom.TagName("LABEL"),goog.dom.TagName.LEGEND=new goog.dom.TagName("LEGEND"),goog.dom.TagName.LI=new goog.dom.TagName("LI"),goog.dom.TagName.LINK=new goog.dom.TagName("LINK"),goog.dom.TagName.MAIN=new goog.dom.TagName("MAIN"),goog.dom.TagName.MAP=new goog.dom.TagName("MAP"),goog.dom.TagName.MARK=new goog.dom.TagName("MARK"),goog.dom.TagName.MATH=new goog.dom.TagName("MATH"),goog.dom.TagName.MENU=new goog.dom.TagName("MENU"),goog.dom.TagName.MENUITEM=new goog.dom.TagName("MENUITEM"),goog.dom.TagName.META=new goog.dom.TagName("META"),goog.dom.TagName.METER=new goog.dom.TagName("METER"),goog.dom.TagName.NAV=new goog.dom.TagName("NAV"),goog.dom.TagName.NOFRAMES=new goog.dom.TagName("NOFRAMES"),goog.dom.TagName.NOSCRIPT=new goog.dom.TagName("NOSCRIPT"),goog.dom.TagName.OBJECT=new goog.dom.TagName("OBJECT"),goog.dom.TagName.OL=new goog.dom.TagName("OL"),goog.dom.TagName.OPTGROUP=new goog.dom.TagName("OPTGROUP"),goog.dom.TagName.OPTION=new goog.dom.TagName("OPTION"),goog.dom.TagName.OUTPUT=new goog.dom.TagName("OUTPUT"),goog.dom.TagName.P=new goog.dom.TagName("P"),goog.dom.TagName.PARAM=new goog.dom.TagName("PARAM"),goog.dom.TagName.PICTURE=new goog.dom.TagName("PICTURE"),goog.dom.TagName.PRE=new goog.dom.TagName("PRE"),goog.dom.TagName.PROGRESS=new goog.dom.TagName("PROGRESS"),goog.dom.TagName.Q=new goog.dom.TagName("Q"),goog.dom.TagName.RP=new goog.dom.TagName("RP"),goog.dom.TagName.RT=new goog.dom.TagName("RT"),goog.dom.TagName.RTC=new goog.dom.TagName("RTC"),goog.dom.TagName.RUBY=new goog.dom.TagName("RUBY"),goog.dom.TagName.S=new goog.dom.TagName("S"),goog.dom.TagName.SAMP=new goog.dom.TagName("SAMP"),goog.dom.TagName.SCRIPT=new goog.dom.TagName("SCRIPT"),goog.dom.TagName.SECTION=new goog.dom.TagName("SECTION"),goog.dom.TagName.SELECT=new goog.dom.TagName("SELECT"),goog.dom.TagName.SMALL=new goog.dom.TagName("SMALL"),goog.dom.TagName.SOURCE=new goog.dom.TagName("SOURCE"),goog.dom.TagName.SPAN=new goog.dom.TagName("SPAN"),goog.dom.TagName.STRIKE=new goog.dom.TagName("STRIKE"),goog.dom.TagName.STRONG=new goog.dom.TagName("STRONG"),goog.dom.TagName.STYLE=new goog.dom.TagName("STYLE"),goog.dom.TagName.SUB=new goog.dom.TagName("SUB"),goog.dom.TagName.SUMMARY=new goog.dom.TagName("SUMMARY"),goog.dom.TagName.SUP=new goog.dom.TagName("SUP"),goog.dom.TagName.SVG=new goog.dom.TagName("SVG"),goog.dom.TagName.TABLE=new goog.dom.TagName("TABLE"),goog.dom.TagName.TBODY=new goog.dom.TagName("TBODY"),goog.dom.TagName.TD=new goog.dom.TagName("TD"),goog.dom.TagName.TEMPLATE=new goog.dom.TagName("TEMPLATE"),goog.dom.TagName.TEXTAREA=new goog.dom.TagName("TEXTAREA"),goog.dom.TagName.TFOOT=new goog.dom.TagName("TFOOT"),goog.dom.TagName.TH=new goog.dom.TagName("TH"),goog.dom.TagName.THEAD=new goog.dom.TagName("THEAD"),goog.dom.TagName.TIME=new goog.dom.TagName("TIME"),goog.dom.TagName.TITLE=new goog.dom.TagName("TITLE"),goog.dom.TagName.TR=new goog.dom.TagName("TR"),goog.dom.TagName.TRACK=new goog.dom.TagName("TRACK"),goog.dom.TagName.TT=new goog.dom.TagName("TT"),goog.dom.TagName.U=new goog.dom.TagName("U"),goog.dom.TagName.UL=new goog.dom.TagName("UL"),goog.dom.TagName.VAR=new goog.dom.TagName("VAR"),goog.dom.TagName.VIDEO=new goog.dom.TagName("VIDEO"),goog.dom.TagName.WBR=new goog.dom.TagName("WBR"),goog.labs={},goog.labs.userAgent={},goog.labs.userAgent.util={},goog.labs.userAgent.util.getNativeUserAgentString_=function(){var e=goog.labs.userAgent.util.getNavigator_();return e&&(e=e.userAgent)?e:""},goog.labs.userAgent.util.getNavigator_=function(){return goog.global.navigator},goog.labs.userAgent.util.userAgent_=goog.labs.userAgent.util.getNativeUserAgentString_(),goog.labs.userAgent.util.setUserAgent=function(e){goog.labs.userAgent.util.userAgent_=e||goog.labs.userAgent.util.getNativeUserAgentString_()},goog.labs.userAgent.util.getUserAgent=function(){return goog.labs.userAgent.util.userAgent_},goog.labs.userAgent.util.matchUserAgent=function(e){var t=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.contains(t,e)},goog.labs.userAgent.util.matchUserAgentIgnoreCase=function(e){var t=goog.labs.userAgent.util.getUserAgent();return goog.string.internal.caseInsensitiveContains(t,e)},goog.labs.userAgent.util.extractVersionTuples=function(e){for(var t,r=/(\w[\w ]+)\/([^\s]+)\s*(?:\((.*?)\))?/g,o=[];t=r.exec(e);)o.push([t[1],t[2],t[3]||void 0]);return o},goog.labs.userAgent.browser={},goog.labs.userAgent.browser.matchOpera_=function(){return goog.labs.userAgent.util.matchUserAgent("Opera")},goog.labs.userAgent.browser.matchIE_=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")},goog.labs.userAgent.browser.matchEdgeHtml_=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")},goog.labs.userAgent.browser.matchEdgeChromium_=function(){return goog.labs.userAgent.util.matchUserAgent("Edg/")},goog.labs.userAgent.browser.matchOperaChromium_=function(){return goog.labs.userAgent.util.matchUserAgent("OPR")},goog.labs.userAgent.browser.matchFirefox_=function(){return goog.labs.userAgent.util.matchUserAgent("Firefox")||goog.labs.userAgent.util.matchUserAgent("FxiOS")},goog.labs.userAgent.browser.matchSafari_=function(){return goog.labs.userAgent.util.matchUserAgent("Safari")&&!(goog.labs.userAgent.browser.matchChrome_()||goog.labs.userAgent.browser.matchCoast_()||goog.labs.userAgent.browser.matchOpera_()||goog.labs.userAgent.browser.matchEdgeHtml_()||goog.labs.userAgent.browser.matchEdgeChromium_()||goog.labs.userAgent.browser.matchOperaChromium_()||goog.labs.userAgent.browser.matchFirefox_()||goog.labs.userAgent.browser.isSilk()||goog.labs.userAgent.util.matchUserAgent("Android"))},goog.labs.userAgent.browser.matchCoast_=function(){return goog.labs.userAgent.util.matchUserAgent("Coast")},goog.labs.userAgent.browser.matchIosWebview_=function(){return(goog.labs.userAgent.util.matchUserAgent("iPad")||goog.labs.userAgent.util.matchUserAgent("iPhone"))&&!goog.labs.userAgent.browser.matchSafari_()&&!goog.labs.userAgent.browser.matchChrome_()&&!goog.labs.userAgent.browser.matchCoast_()&&!goog.labs.userAgent.browser.matchFirefox_()&&goog.labs.userAgent.util.matchUserAgent("AppleWebKit")},goog.labs.userAgent.browser.matchChrome_=function(){return(goog.labs.userAgent.util.matchUserAgent("Chrome")||goog.labs.userAgent.util.matchUserAgent("CriOS"))&&!goog.labs.userAgent.browser.matchEdgeHtml_()},goog.labs.userAgent.browser.matchAndroidBrowser_=function(){return goog.labs.userAgent.util.matchUserAgent("Android")&&!(goog.labs.userAgent.browser.isChrome()||goog.labs.userAgent.browser.isFirefox()||goog.labs.userAgent.browser.isOpera()||goog.labs.userAgent.browser.isSilk())},goog.labs.userAgent.browser.isOpera=goog.labs.userAgent.browser.matchOpera_,goog.labs.userAgent.browser.isIE=goog.labs.userAgent.browser.matchIE_,goog.labs.userAgent.browser.isEdge=goog.labs.userAgent.browser.matchEdgeHtml_,goog.labs.userAgent.browser.isEdgeChromium=goog.labs.userAgent.browser.matchEdgeChromium_,goog.labs.userAgent.browser.isOperaChromium=goog.labs.userAgent.browser.matchOperaChromium_,goog.labs.userAgent.browser.isFirefox=goog.labs.userAgent.browser.matchFirefox_,goog.labs.userAgent.browser.isSafari=goog.labs.userAgent.browser.matchSafari_,goog.labs.userAgent.browser.isCoast=goog.labs.userAgent.browser.matchCoast_,goog.labs.userAgent.browser.isIosWebview=goog.labs.userAgent.browser.matchIosWebview_,goog.labs.userAgent.browser.isChrome=goog.labs.userAgent.browser.matchChrome_,goog.labs.userAgent.browser.isAndroidBrowser=goog.labs.userAgent.browser.matchAndroidBrowser_,goog.labs.userAgent.browser.isSilk=function(){return goog.labs.userAgent.util.matchUserAgent("Silk")},goog.labs.userAgent.browser.getVersion=function(){function e(e){return e=goog.array.find(e,o),r[e]||""}var t=goog.labs.userAgent.util.getUserAgent();if(goog.labs.userAgent.browser.isIE())return goog.labs.userAgent.browser.getIEVersion_(t);t=goog.labs.userAgent.util.extractVersionTuples(t);var r={};goog.array.forEach(t,(function(e){r[e[0]]=e[1]}));var o=goog.partial(goog.object.containsKey,r);return goog.labs.userAgent.browser.isOpera()?e(["Version","Opera"]):goog.labs.userAgent.browser.isEdge()?e(["Edge"]):goog.labs.userAgent.browser.isEdgeChromium()?e(["Edg"]):goog.labs.userAgent.browser.isChrome()?e(["Chrome","CriOS"]):(t=t[2])&&t[1]||""},goog.labs.userAgent.browser.isVersionOrHigher=function(e){return 0<=goog.string.internal.compareVersions(goog.labs.userAgent.browser.getVersion(),e)},goog.labs.userAgent.browser.getIEVersion_=function(e){var t=/rv: *([\d\.]*)/.exec(e);if(t&&t[1])return t[1];t="";var r=/MSIE +([\d\.]+)/.exec(e);if(r&&r[1])if(e=/Trident\/(\d.\d)/.exec(e),"7.0"==r[1])if(e&&e[1])switch(e[1]){case"4.0":t="8.0";break;case"5.0":t="9.0";break;case"6.0":t="10.0";break;case"7.0":t="11.0"}else t="7.0";else t=r[1];return t},goog.html.SafeHtml=function(){this.privateDoNotAccessOrElseSafeHtmlWrappedValue_="",this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_=goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_,this.dir_=null},goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString=!0,goog.html.SafeHtml.prototype.getDirection=function(){return this.dir_},goog.html.SafeHtml.prototype.implementsGoogStringTypedString=!0,goog.html.SafeHtml.prototype.getTypedStringValue=function(){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_.toString()},goog.DEBUG&&(goog.html.SafeHtml.prototype.toString=function(){return"SafeHtml{"+this.privateDoNotAccessOrElseSafeHtmlWrappedValue_+"}"}),goog.html.SafeHtml.unwrap=function(e){return goog.html.SafeHtml.unwrapTrustedHTML(e).toString()},goog.html.SafeHtml.unwrapTrustedHTML=function(e){return e instanceof goog.html.SafeHtml&&e.constructor===goog.html.SafeHtml&&e.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_===goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_?e.privateDoNotAccessOrElseSafeHtmlWrappedValue_:(goog.asserts.fail("expected object of type SafeHtml, got '"+e+"' of type "+goog.typeOf(e)),"type_error:SafeHtml")},goog.html.SafeHtml.htmlEscape=function(e){if(e instanceof goog.html.SafeHtml)return e;var t="object"==typeof e,r=null;return t&&e.implementsGoogI18nBidiDirectionalString&&(r=e.getDirection()),e=t&&e.implementsGoogStringTypedString?e.getTypedStringValue():String(e),goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.htmlEscape(e),r)},goog.html.SafeHtml.htmlEscapePreservingNewlines=function(e){return e instanceof goog.html.SafeHtml?e:(e=goog.html.SafeHtml.htmlEscape(e),goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.newLineToBr(goog.html.SafeHtml.unwrap(e)),e.getDirection()))},goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces=function(e){return e instanceof goog.html.SafeHtml?e:(e=goog.html.SafeHtml.htmlEscape(e),goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.internal.whitespaceEscape(goog.html.SafeHtml.unwrap(e)),e.getDirection()))},goog.html.SafeHtml.from=goog.html.SafeHtml.htmlEscape,goog.html.SafeHtml.VALID_NAMES_IN_TAG_=/^[a-zA-Z0-9-]+$/,goog.html.SafeHtml.URL_ATTRIBUTES_={action:!0,cite:!0,data:!0,formaction:!0,href:!0,manifest:!0,poster:!0,src:!0},goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_={APPLET:!0,BASE:!0,EMBED:!0,IFRAME:!0,LINK:!0,MATH:!0,META:!0,OBJECT:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0},goog.html.SafeHtml.create=function(e,t,r){return goog.html.SafeHtml.verifyTagName(String(e)),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(e),t,r)},goog.html.SafeHtml.verifyTagName=function(e){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(e))throw Error("Invalid tag name <"+e+">.");if(e.toUpperCase()in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_)throw Error("Tag name <"+e+"> is not allowed for SafeHtml.")},goog.html.SafeHtml.createIframe=function(e,t,r,o){e&&goog.html.TrustedResourceUrl.unwrap(e);var n={};return n.src=e||null,n.srcdoc=t&&goog.html.SafeHtml.unwrap(t),e=goog.html.SafeHtml.combineAttributes(n,{sandbox:""},r),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",e,o)},goog.html.SafeHtml.createSandboxIframe=function(e,t,r,o){if(!goog.html.SafeHtml.canUseSandboxIframe())throw Error("The browser does not support sandboxed iframes.");var n={};return n.src=e?goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(e)):null,n.srcdoc=t||null,n.sandbox="",e=goog.html.SafeHtml.combineAttributes(n,{},r),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("iframe",e,o)},goog.html.SafeHtml.canUseSandboxIframe=function(){return goog.global.HTMLIFrameElement&&"sandbox"in goog.global.HTMLIFrameElement.prototype},goog.html.SafeHtml.createScriptSrc=function(e,t){return goog.html.TrustedResourceUrl.unwrap(e),e=goog.html.SafeHtml.combineAttributes({src:e},{},t),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",e)},goog.html.SafeHtml.createScript=function(e,t){for(var r in t){var o=r.toLowerCase();if("language"==o||"src"==o||"text"==o||"type"==o)throw Error('Cannot set "'+o+'" attribute')}for(r="",e=goog.array.concat(e),o=0;o<e.length;o++)r+=goog.html.SafeScript.unwrap(e[o]);return e=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(r,goog.i18n.bidi.Dir.NEUTRAL),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("script",t,e)},goog.html.SafeHtml.createStyle=function(e,t){t=goog.html.SafeHtml.combineAttributes({type:"text/css"},{},t);var r="";e=goog.array.concat(e);for(var o=0;o<e.length;o++)r+=goog.html.SafeStyleSheet.unwrap(e[o]);return e=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(r,goog.i18n.bidi.Dir.NEUTRAL),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("style",t,e)},goog.html.SafeHtml.createMetaRefresh=function(e,t){return e=goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(e)),(goog.labs.userAgent.browser.isIE()||goog.labs.userAgent.browser.isEdge())&&goog.string.internal.contains(e,";")&&(e="'"+e.replace(/'/g,"%27")+"'"),goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse("meta",{"http-equiv":"refresh",content:(t||0)+"; url="+e})},goog.html.SafeHtml.getAttrNameAndValue_=function(e,t,r){if(r instanceof goog.string.Const)r=goog.string.Const.unwrap(r);else if("style"==t.toLowerCase())r=goog.html.SafeHtml.getStyleValue_(r);else{if(/^on/i.test(t))throw Error('Attribute "'+t+'" requires goog.string.Const value, "'+r+'" given.');if(t.toLowerCase()in goog.html.SafeHtml.URL_ATTRIBUTES_)if(r instanceof goog.html.TrustedResourceUrl)r=goog.html.TrustedResourceUrl.unwrap(r);else if(r instanceof goog.html.SafeUrl)r=goog.html.SafeUrl.unwrap(r);else{if(!goog.isString(r))throw Error('Attribute "'+t+'" on tag "'+e+'" requires goog.html.SafeUrl, goog.string.Const, or string, value "'+r+'" given.');r=goog.html.SafeUrl.sanitize(r).getTypedStringValue()}}return r.implementsGoogStringTypedString&&(r=r.getTypedStringValue()),goog.asserts.assert(goog.isString(r)||goog.isNumber(r),"String or number value expected, got "+typeof r+" with value: "+r),t+'="'+goog.string.internal.htmlEscape(String(r))+'"'},goog.html.SafeHtml.getStyleValue_=function(e){if(!goog.isObject(e))throw Error('The "style" attribute requires goog.html.SafeStyle or map of style properties, '+typeof e+" given: "+e);return e instanceof goog.html.SafeStyle||(e=goog.html.SafeStyle.create(e)),goog.html.SafeStyle.unwrap(e)},goog.html.SafeHtml.createWithDir=function(e,t,r,o){return(t=goog.html.SafeHtml.create(t,r,o)).dir_=e,t},goog.html.SafeHtml.join=function(e,t){var r=(e=goog.html.SafeHtml.htmlEscape(e)).getDirection(),o=[],n=function(e){goog.isArray(e)?goog.array.forEach(e,n):(e=goog.html.SafeHtml.htmlEscape(e),o.push(goog.html.SafeHtml.unwrap(e)),e=e.getDirection(),r==goog.i18n.bidi.Dir.NEUTRAL?r=e:e!=goog.i18n.bidi.Dir.NEUTRAL&&r!=e&&(r=null))};return goog.array.forEach(t,n),goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(o.join(goog.html.SafeHtml.unwrap(e)),r)},goog.html.SafeHtml.concat=function(e){return goog.html.SafeHtml.join(goog.html.SafeHtml.EMPTY,Array.prototype.slice.call(arguments))},goog.html.SafeHtml.concatWithDir=function(e,t){var r=goog.html.SafeHtml.concat(goog.array.slice(arguments,1));return r.dir_=e,r},goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_={},goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse=function(e,t){return(new goog.html.SafeHtml).initSecurityPrivateDoNotAccessOrElse_(e,t)},goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_=function(e,t){return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_=goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY?goog.html.trustedtypes.PRIVATE_DO_NOT_ACCESS_OR_ELSE_POLICY.createHTML(e):e,this.dir_=t,this},goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse=function(e,t,r){var o=null,n="<"+e+goog.html.SafeHtml.stringifyAttributes(e,t);return goog.isDefAndNotNull(r)?goog.isArray(r)||(r=[r]):r=[],goog.dom.tags.isVoidTag(e.toLowerCase())?(goog.asserts.assert(!r.length,"Void tag <"+e+"> does not allow content."),n+=">"):(o=goog.html.SafeHtml.concat(r),n+=">"+goog.html.SafeHtml.unwrap(o)+"</"+e+">",o=o.getDirection()),(e=t&&t.dir)&&(o=/^(ltr|rtl|auto)$/i.test(e)?goog.i18n.bidi.Dir.NEUTRAL:null),goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(n,o)},goog.html.SafeHtml.stringifyAttributes=function(e,t){var r="";if(t)for(var o in t){if(!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(o))throw Error('Invalid attribute name "'+o+'".');var n=t[o];goog.isDefAndNotNull(n)&&(r+=" "+goog.html.SafeHtml.getAttrNameAndValue_(e,o,n))}return r},goog.html.SafeHtml.combineAttributes=function(e,t,r){var o,n={};for(o in e)goog.asserts.assert(o.toLowerCase()==o,"Must be lower case"),n[o]=e[o];for(o in t)goog.asserts.assert(o.toLowerCase()==o,"Must be lower case"),n[o]=t[o];for(o in r){var s=o.toLowerCase();if(s in e)throw Error('Cannot override "'+s+'" attribute, got "'+o+'" with value "'+r[o]+'"');s in t&&delete n[s],n[o]=r[o]}return n},goog.html.SafeHtml.DOCTYPE_HTML=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<!DOCTYPE html>",goog.i18n.bidi.Dir.NEUTRAL),goog.html.SafeHtml.EMPTY=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("",goog.i18n.bidi.Dir.NEUTRAL),goog.html.SafeHtml.BR=goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse("<br>",goog.i18n.bidi.Dir.NEUTRAL),goog.html.uncheckedconversions={},goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract=function(e,t,r){return goog.asserts.assertString(goog.string.Const.unwrap(e),"must provide justification"),goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(e)),"must provide non-empty justification"),goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(t,r||null)},goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract=function(e,t){return goog.asserts.assertString(goog.string.Const.unwrap(e),"must provide justification"),goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(e)),"must provide non-empty justification"),goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(t)},goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract=function(e,t){return goog.asserts.assertString(goog.string.Const.unwrap(e),"must provide justification"),goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(e)),"must provide non-empty justification"),goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(t)},goog.html.uncheckedconversions.safeStyleSheetFromStringKnownToSatisfyTypeContract=function(e,t){return goog.asserts.assertString(goog.string.Const.unwrap(e),"must provide justification"),goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(e)),"must provide non-empty justification"),goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(t)},goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract=function(e,t){return goog.asserts.assertString(goog.string.Const.unwrap(e),"must provide justification"),goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(e)),"must provide non-empty justification"),goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(t)},goog.html.uncheckedconversions.trustedResourceUrlFromStringKnownToSatisfyTypeContract=function(e,t){return goog.asserts.assertString(goog.string.Const.unwrap(e),"must provide justification"),goog.asserts.assert(!goog.string.internal.isEmptyOrWhitespace(goog.string.Const.unwrap(e)),"must provide non-empty justification"),goog.html.TrustedResourceUrl.createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(t)},goog.dom.asserts={},goog.dom.asserts.assertIsLocation=function(e){if(goog.asserts.ENABLE_ASSERTS){var t=goog.dom.asserts.getWindow_(e);t&&(!e||!(e instanceof t.Location)&&e instanceof t.Element)&&goog.asserts.fail("Argument is not a Location (or a non-Element mock); got: %s",goog.dom.asserts.debugStringForType_(e))}return e},goog.dom.asserts.assertIsElementType_=function(e,t){if(goog.asserts.ENABLE_ASSERTS){var r=goog.dom.asserts.getWindow_(e);r&&void 0!==r[t]&&(e&&(e instanceof r[t]||!(e instanceof r.Location||e instanceof r.Element))||goog.asserts.fail("Argument is not a %s (or a non-Element, non-Location mock); got: %s",t,goog.dom.asserts.debugStringForType_(e)))}return e},goog.dom.asserts.assertIsHTMLAnchorElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLAnchorElement")},goog.dom.asserts.assertIsHTMLButtonElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLButtonElement")},goog.dom.asserts.assertIsHTMLLinkElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLLinkElement")},goog.dom.asserts.assertIsHTMLImageElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLImageElement")},goog.dom.asserts.assertIsHTMLAudioElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLAudioElement")},goog.dom.asserts.assertIsHTMLVideoElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLVideoElement")},goog.dom.asserts.assertIsHTMLInputElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLInputElement")},goog.dom.asserts.assertIsHTMLTextAreaElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLTextAreaElement")},goog.dom.asserts.assertIsHTMLCanvasElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLCanvasElement")},goog.dom.asserts.assertIsHTMLEmbedElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLEmbedElement")},goog.dom.asserts.assertIsHTMLFormElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLFormElement")},goog.dom.asserts.assertIsHTMLFrameElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLFrameElement")},goog.dom.asserts.assertIsHTMLIFrameElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLIFrameElement")},goog.dom.asserts.assertIsHTMLObjectElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLObjectElement")},goog.dom.asserts.assertIsHTMLScriptElement=function(e){return goog.dom.asserts.assertIsElementType_(e,"HTMLScriptElement")},goog.dom.asserts.debugStringForType_=function(e){if(!goog.isObject(e))return void 0===e?"undefined":null===e?"null":typeof e;try{return e.constructor.displayName||e.constructor.name||Object.prototype.toString.call(e)}catch(e){return"<object could not be stringified>"}},goog.dom.asserts.getWindow_=function(e){try{var t=e&&e.ownerDocument,r=t&&(t.defaultView||t.parentWindow);if((r=r||goog.global).Element&&r.Location)return r}catch(e){}return null},goog.functions={},goog.functions.constant=function(e){return function(){return e}},goog.functions.FALSE=function(){return!1},goog.functions.TRUE=function(){return!0},goog.functions.NULL=function(){return null},goog.functions.identity=function(e,t){return e},goog.functions.error=function(e){return function(){throw Error(e)}},goog.functions.fail=function(e){return function(){throw e}},goog.functions.lock=function(e,t){return t=t||0,function(){return e.apply(this,Array.prototype.slice.call(arguments,0,t))}},goog.functions.nth=function(e){return function(){return arguments[e]}},goog.functions.partialRight=function(e,t){var r=Array.prototype.slice.call(arguments,1);return function(){var t=Array.prototype.slice.call(arguments);return t.push.apply(t,r),e.apply(this,t)}},goog.functions.withReturnValue=function(e,t){return goog.functions.sequence(e,goog.functions.constant(t))},goog.functions.equalTo=function(e,t){return function(r){return t?e==r:e===r}},goog.functions.compose=function(e,t){var r=arguments,o=r.length;return function(){var e;o&&(e=r[o-1].apply(this,arguments));for(var t=o-2;0<=t;t--)e=r[t].call(this,e);return e}},goog.functions.sequence=function(e){var t=arguments,r=t.length;return function(){for(var e,o=0;o<r;o++)e=t[o].apply(this,arguments);return e}},goog.functions.and=function(e){var t=arguments,r=t.length;return function(){for(var e=0;e<r;e++)if(!t[e].apply(this,arguments))return!1;return!0}},goog.functions.or=function(e){var t=arguments,r=t.length;return function(){for(var e=0;e<r;e++)if(t[e].apply(this,arguments))return!0;return!1}},goog.functions.not=function(e){return function(){return!e.apply(this,arguments)}},goog.functions.create=function(e,t){var r=function(){};return r.prototype=e.prototype,r=new r,e.apply(r,Array.prototype.slice.call(arguments,1)),r},goog.functions.CACHE_RETURN_VALUE=!0,goog.functions.cacheReturnValue=function(e){var t,r=!1;return function(){return goog.functions.CACHE_RETURN_VALUE?(r||(t=e(),r=!0),t):e()}},goog.functions.once=function(e){var t=e;return function(){if(t){var e=t;t=null,e()}}},goog.functions.debounce=function(e,t,r){var o=0;return function(n){goog.global.clearTimeout(o);var s=arguments;o=goog.global.setTimeout((function(){e.apply(r,s)}),t)}},goog.functions.throttle=function(e,t,r){var o=0,n=!1,s=[],i=function(){o=0,n&&(n=!1,a())},a=function(){o=goog.global.setTimeout(i,t),e.apply(r,s)};return function(e){s=arguments,o?n=!0:a()}},goog.functions.rateLimit=function(e,t,r){var o=0,n=function(){o=0};return function(s){o||(o=goog.global.setTimeout(n,t),e.apply(r,arguments))}},goog.dom.safe={},goog.dom.safe.InsertAdjacentHtmlPosition={AFTERBEGIN:"afterbegin",AFTEREND:"afterend",BEFOREBEGIN:"beforebegin",BEFOREEND:"beforeend"},goog.dom.safe.insertAdjacentHtml=function(e,t,r){e.insertAdjacentHTML(t,goog.html.SafeHtml.unwrapTrustedHTML(r))},goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_={MATH:!0,SCRIPT:!0,STYLE:!0,SVG:!0,TEMPLATE:!0},goog.dom.safe.isInnerHtmlCleanupRecursive_=goog.functions.cacheReturnValue((function(){if(goog.DEBUG&&"undefined"==typeof document)return!1;var e=document.createElement("div"),t=document.createElement("div");return t.appendChild(document.createElement("div")),e.appendChild(t),!(goog.DEBUG&&!e.firstChild)&&(t=e.firstChild.firstChild,e.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(goog.html.SafeHtml.EMPTY),!t.parentElement)})),goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse=function(e,t){if(goog.dom.safe.isInnerHtmlCleanupRecursive_())for(;e.lastChild;)e.removeChild(e.lastChild);e.innerHTML=goog.html.SafeHtml.unwrapTrustedHTML(t)},goog.dom.safe.setInnerHtml=function(e,t){if(goog.asserts.ENABLE_ASSERTS){var r=e.tagName.toUpperCase();if(goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[r])throw Error("goog.dom.safe.setInnerHtml cannot be used to set content of "+e.tagName+".")}goog.dom.safe.unsafeSetInnerHtmlDoNotUseOrElse(e,t)},goog.dom.safe.setOuterHtml=function(e,t){e.outerHTML=goog.html.SafeHtml.unwrapTrustedHTML(t)},goog.dom.safe.setFormElementAction=function(e,t){t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),goog.dom.asserts.assertIsHTMLFormElement(e).action=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setButtonFormAction=function(e,t){t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),goog.dom.asserts.assertIsHTMLButtonElement(e).formAction=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setInputFormAction=function(e,t){t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),goog.dom.asserts.assertIsHTMLInputElement(e).formAction=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setStyle=function(e,t){e.style.cssText=goog.html.SafeStyle.unwrap(t)},goog.dom.safe.documentWrite=function(e,t){e.write(goog.html.SafeHtml.unwrapTrustedHTML(t))},goog.dom.safe.setAnchorHref=function(e,t){goog.dom.asserts.assertIsHTMLAnchorElement(e),t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),e.href=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setImageSrc=function(e,t){if(goog.dom.asserts.assertIsHTMLImageElement(e),!(t instanceof goog.html.SafeUrl)){var r=/^data:image\//i.test(t);t=goog.html.SafeUrl.sanitizeAssertUnchanged(t,r)}e.src=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setAudioSrc=function(e,t){if(goog.dom.asserts.assertIsHTMLAudioElement(e),!(t instanceof goog.html.SafeUrl)){var r=/^data:audio\//i.test(t);t=goog.html.SafeUrl.sanitizeAssertUnchanged(t,r)}e.src=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setVideoSrc=function(e,t){if(goog.dom.asserts.assertIsHTMLVideoElement(e),!(t instanceof goog.html.SafeUrl)){var r=/^data:video\//i.test(t);t=goog.html.SafeUrl.sanitizeAssertUnchanged(t,r)}e.src=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.setEmbedSrc=function(e,t){goog.dom.asserts.assertIsHTMLEmbedElement(e),e.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(t)},goog.dom.safe.setFrameSrc=function(e,t){goog.dom.asserts.assertIsHTMLFrameElement(e),e.src=goog.html.TrustedResourceUrl.unwrapTrustedURL(t)},goog.dom.safe.setIframeSrc=function(e,t){goog.dom.asserts.assertIsHTMLIFrameElement(e),e.src=goog.html.TrustedResourceUrl.unwrapTrustedURL(t)},goog.dom.safe.setIframeSrcdoc=function(e,t){goog.dom.asserts.assertIsHTMLIFrameElement(e),e.srcdoc=goog.html.SafeHtml.unwrapTrustedHTML(t)},goog.dom.safe.setLinkHrefAndRel=function(e,t,r){goog.dom.asserts.assertIsHTMLLinkElement(e),e.rel=r,goog.string.internal.caseInsensitiveContains(r,"stylesheet")?(goog.asserts.assert(t instanceof goog.html.TrustedResourceUrl,'URL must be TrustedResourceUrl because "rel" contains "stylesheet"'),e.href=goog.html.TrustedResourceUrl.unwrapTrustedURL(t)):e.href=t instanceof goog.html.TrustedResourceUrl?goog.html.TrustedResourceUrl.unwrapTrustedURL(t):t instanceof goog.html.SafeUrl?goog.html.SafeUrl.unwrapTrustedURL(t):goog.html.SafeUrl.unwrapTrustedURL(goog.html.SafeUrl.sanitizeAssertUnchanged(t))},goog.dom.safe.setObjectData=function(e,t){goog.dom.asserts.assertIsHTMLObjectElement(e),e.data=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(t)},goog.dom.safe.setScriptSrc=function(e,t){goog.dom.asserts.assertIsHTMLScriptElement(e),e.src=goog.html.TrustedResourceUrl.unwrapTrustedScriptURL(t),(t=goog.getScriptNonce())&&e.setAttribute("nonce",t)},goog.dom.safe.setScriptContent=function(e,t){goog.dom.asserts.assertIsHTMLScriptElement(e),e.text=goog.html.SafeScript.unwrapTrustedScript(t),(t=goog.getScriptNonce())&&e.setAttribute("nonce",t)},goog.dom.safe.setLocationHref=function(e,t){goog.dom.asserts.assertIsLocation(e),t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),e.href=goog.html.SafeUrl.unwrapTrustedURL(t)},goog.dom.safe.assignLocation=function(e,t){goog.dom.asserts.assertIsLocation(e),t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),e.assign(goog.html.SafeUrl.unwrapTrustedURL(t))},goog.dom.safe.replaceLocation=function(e,t){goog.dom.asserts.assertIsLocation(e),t=t instanceof goog.html.SafeUrl?t:goog.html.SafeUrl.sanitizeAssertUnchanged(t),e.replace(goog.html.SafeUrl.unwrapTrustedURL(t))},goog.dom.safe.openInWindow=function(e,t,r,o,n){return e=e instanceof goog.html.SafeUrl?e:goog.html.SafeUrl.sanitizeAssertUnchanged(e),(t||goog.global).open(goog.html.SafeUrl.unwrapTrustedURL(e),r?goog.string.Const.unwrap(r):"",o,n)},goog.dom.safe.parseFromStringHtml=function(e,t){return goog.dom.safe.parseFromString(e,t,"text/html")},goog.dom.safe.parseFromString=function(e,t,r){return e.parseFromString(goog.html.SafeHtml.unwrapTrustedHTML(t),r)},goog.dom.safe.createImageFromBlob=function(e){if(!/^image\/.*/g.test(e.type))throw Error("goog.dom.safe.createImageFromBlob only accepts MIME type image/.*.");var t=goog.global.URL.createObjectURL(e);return(e=new goog.global.Image).onload=function(){goog.global.URL.revokeObjectURL(t)},goog.dom.safe.setImageSrc(e,goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Image blob URL."),t)),e},goog.string.DETECT_DOUBLE_ESCAPING=!1,goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1,goog.string.Unicode={NBSP:" "},goog.string.startsWith=goog.string.internal.startsWith,goog.string.endsWith=goog.string.internal.endsWith,goog.string.caseInsensitiveStartsWith=goog.string.internal.caseInsensitiveStartsWith,goog.string.caseInsensitiveEndsWith=goog.string.internal.caseInsensitiveEndsWith,goog.string.caseInsensitiveEquals=goog.string.internal.caseInsensitiveEquals,goog.string.subs=function(e,t){for(var r=e.split("%s"),o="",n=Array.prototype.slice.call(arguments,1);n.length&&1<r.length;)o+=r.shift()+n.shift();return o+r.join("%s")},goog.string.collapseWhitespace=function(e){return e.replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"")},goog.string.isEmptyOrWhitespace=goog.string.internal.isEmptyOrWhitespace,goog.string.isEmptyString=function(e){return 0==e.length},goog.string.isEmpty=goog.string.isEmptyOrWhitespace,goog.string.isEmptyOrWhitespaceSafe=function(e){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(e))},goog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe,goog.string.isBreakingWhitespace=function(e){return!/[^\t\n\r ]/.test(e)},goog.string.isAlpha=function(e){return!/[^a-zA-Z]/.test(e)},goog.string.isNumeric=function(e){return!/[^0-9]/.test(e)},goog.string.isAlphaNumeric=function(e){return!/[^a-zA-Z0-9]/.test(e)},goog.string.isSpace=function(e){return" "==e},goog.string.isUnicodeChar=function(e){return 1==e.length&&" "<=e&&"~">=e||""<=e&&"�">=e},goog.string.stripNewlines=function(e){return e.replace(/(\r\n|\r|\n)+/g," ")},goog.string.canonicalizeNewlines=function(e){return e.replace(/(\r\n|\r|\n)/g,"\n")},goog.string.normalizeWhitespace=function(e){return e.replace(/\xa0|\s/g," ")},goog.string.normalizeSpaces=function(e){return e.replace(/\xa0|[ \t]+/g," ")},goog.string.collapseBreakingSpaces=function(e){return e.replace(/[\t\r\n ]+/g," ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g,"")},goog.string.trim=goog.string.internal.trim,goog.string.trimLeft=function(e){return e.replace(/^[\s\xa0]+/,"")},goog.string.trimRight=function(e){return e.replace(/[\s\xa0]+$/,"")},goog.string.caseInsensitiveCompare=goog.string.internal.caseInsensitiveCompare,goog.string.numberAwareCompare_=function(e,t,r){if(e==t)return 0;if(!e)return-1;if(!t)return 1;for(var o=e.toLowerCase().match(r),n=t.toLowerCase().match(r),s=Math.min(o.length,n.length),i=0;i<s;i++){r=o[i];var a=n[i];if(r!=a)return e=parseInt(r,10),!isNaN(e)&&(t=parseInt(a,10),!isNaN(t)&&e-t)?e-t:r<a?-1:1}return o.length!=n.length?o.length-n.length:e<t?-1:1},goog.string.intAwareCompare=function(e,t){return goog.string.numberAwareCompare_(e,t,/\d+|\D+/g)},goog.string.floatAwareCompare=function(e,t){return goog.string.numberAwareCompare_(e,t,/\d+|\.\d+|\D+/g)},goog.string.numerateCompare=goog.string.floatAwareCompare,goog.string.urlEncode=function(e){return encodeURIComponent(String(e))},goog.string.urlDecode=function(e){return decodeURIComponent(e.replace(/\+/g," "))},goog.string.newLineToBr=goog.string.internal.newLineToBr,goog.string.htmlEscape=function(e,t){return e=goog.string.internal.htmlEscape(e,t),goog.string.DETECT_DOUBLE_ESCAPING&&(e=e.replace(goog.string.E_RE_,"&#101;")),e},goog.string.E_RE_=/e/g,goog.string.unescapeEntities=function(e){return goog.string.contains(e,"&")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(e):goog.string.unescapePureXmlEntities_(e):e},goog.string.unescapeEntitiesWithDocument=function(e,t){return goog.string.contains(e,"&")?goog.string.unescapeEntitiesUsingDom_(e,t):e},goog.string.unescapeEntitiesUsingDom_=function(e,t){var r={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"'},o=t?t.createElement("div"):goog.global.document.createElement("div");return e.replace(goog.string.HTML_ENTITY_PATTERN_,(function(e,t){var n=r[e];return n||("#"==t.charAt(0)&&(t=Number("0"+t.substr(1)),isNaN(t)||(n=String.fromCharCode(t))),n||(goog.dom.safe.setInnerHtml(o,goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from("Single HTML entity."),e+" ")),n=o.firstChild.nodeValue.slice(0,-1)),r[e]=n)}))},goog.string.unescapePureXmlEntities_=function(e){return e.replace(/&([^;]+);/g,(function(e,t){switch(t){case"amp":return"&";case"lt":return"<";case"gt":return">";case"quot":return'"';default:return"#"!=t.charAt(0)||(t=Number("0"+t.substr(1)),isNaN(t))?e:String.fromCharCode(t)}}))},goog.string.HTML_ENTITY_PATTERN_=/&([^;\s<&]+);?/g,goog.string.whitespaceEscape=function(e,t){return goog.string.newLineToBr(e.replace(/  /g," &#160;"),t)},goog.string.preserveSpaces=function(e){return e.replace(/(^|[\n ]) /g,"$1"+goog.string.Unicode.NBSP)},goog.string.stripQuotes=function(e,t){for(var r=t.length,o=0;o<r;o++){var n=1==r?t:t.charAt(o);if(e.charAt(0)==n&&e.charAt(e.length-1)==n)return e.substring(1,e.length-1)}return e},goog.string.truncate=function(e,t,r){return r&&(e=goog.string.unescapeEntities(e)),e.length>t&&(e=e.substring(0,t-3)+"..."),r&&(e=goog.string.htmlEscape(e)),e},goog.string.truncateMiddle=function(e,t,r,o){if(r&&(e=goog.string.unescapeEntities(e)),o&&e.length>t){o>t&&(o=t);var n=e.length-o;e=e.substring(0,t-o)+"..."+e.substring(n)}else e.length>t&&(o=Math.floor(t/2),n=e.length-o,e=e.substring(0,o+t%2)+"..."+e.substring(n));return r&&(e=goog.string.htmlEscape(e)),e},goog.string.specialEscapeChars_={"\0":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\x0B",'"':'\\"',"\\":"\\\\","<":"\\u003C"},goog.string.jsEscapeCache_={"'":"\\'"},goog.string.quote=function(e){e=String(e);for(var t=['"'],r=0;r<e.length;r++){var o=e.charAt(r),n=o.charCodeAt(0);t[r+1]=goog.string.specialEscapeChars_[o]||(31<n&&127>n?o:goog.string.escapeChar(o))}return t.push('"'),t.join("")},goog.string.escapeString=function(e){for(var t=[],r=0;r<e.length;r++)t[r]=goog.string.escapeChar(e.charAt(r));return t.join("")},goog.string.escapeChar=function(e){if(e in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[e];if(e in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[e]=goog.string.specialEscapeChars_[e];var t=e.charCodeAt(0);if(31<t&&127>t)var r=e;else 256>t?(r="\\x",(16>t||256<t)&&(r+="0")):(r="\\u",4096>t&&(r+="0")),r+=t.toString(16).toUpperCase();return goog.string.jsEscapeCache_[e]=r},goog.string.contains=goog.string.internal.contains,goog.string.caseInsensitiveContains=goog.string.internal.caseInsensitiveContains,goog.string.countOf=function(e,t){return e&&t?e.split(t).length-1:0},goog.string.removeAt=function(e,t,r){var o=e;return 0<=t&&t<e.length&&0<r&&(o=e.substr(0,t)+e.substr(t+r,e.length-t-r)),o},goog.string.remove=function(e,t){return e.replace(t,"")},goog.string.removeAll=function(e,t){return t=new RegExp(goog.string.regExpEscape(t),"g"),e.replace(t,"")},goog.string.replaceAll=function(e,t,r){return t=new RegExp(goog.string.regExpEscape(t),"g"),e.replace(t,r.replace(/\$/g,"$$$$"))},goog.string.regExpEscape=function(e){return String(e).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},goog.string.repeat=String.prototype.repeat?function(e,t){return e.repeat(t)}:function(e,t){return Array(t+1).join(e)},goog.string.padNumber=function(e,t,r){return-1==(r=(e=goog.isDef(r)?e.toFixed(r):String(e)).indexOf("."))&&(r=e.length),goog.string.repeat("0",Math.max(0,t-r))+e},goog.string.makeSafe=function(e){return null==e?"":String(e)},goog.string.buildString=function(e){return Array.prototype.join.call(arguments,"")},goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36)},goog.string.compareVersions=goog.string.internal.compareVersions,goog.string.hashCode=function(e){for(var t=0,r=0;r<e.length;++r)t=31*t+e.charCodeAt(r)>>>0;return t},goog.string.uniqueStringCounter_=2147483648*Math.random()|0,goog.string.createUniqueString=function(){return"goog_"+goog.string.uniqueStringCounter_++},goog.string.toNumber=function(e){var t=Number(e);return 0==t&&goog.string.isEmptyOrWhitespace(e)?NaN:t},goog.string.isLowerCamelCase=function(e){return/^[a-z]+([A-Z][a-z]*)*$/.test(e)},goog.string.isUpperCamelCase=function(e){return/^([A-Z][a-z]*)+$/.test(e)},goog.string.toCamelCase=function(e){return String(e).replace(/\-([a-z])/g,(function(e,t){return t.toUpperCase()}))},goog.string.toSelectorCase=function(e){return String(e).replace(/([A-Z])/g,"-$1").toLowerCase()},goog.string.toTitleCase=function(e,t){return t=goog.isString(t)?goog.string.regExpEscape(t):"\\s",e.replace(new RegExp("(^"+(t?"|["+t+"]+":"")+")([a-z])","g"),(function(e,t,r){return t+r.toUpperCase()}))},goog.string.capitalize=function(e){return String(e.charAt(0)).toUpperCase()+String(e.substr(1)).toLowerCase()},goog.string.parseInt=function(e){return isFinite(e)&&(e=String(e)),goog.isString(e)?/^\s*-?0x/i.test(e)?parseInt(e,16):parseInt(e,10):NaN},goog.string.splitLimit=function(e,t,r){e=e.split(t);for(var o=[];0<r&&e.length;)o.push(e.shift()),r--;return e.length&&o.push(e.join(t)),o},goog.string.lastComponent=function(e,t){if(!t)return e;"string"==typeof t&&(t=[t]);for(var r=-1,o=0;o<t.length;o++)if(""!=t[o]){var n=e.lastIndexOf(t[o]);n>r&&(r=n)}return-1==r?e:e.slice(r+1)},goog.string.editDistance=function(e,t){var r=[],o=[];if(e==t)return 0;if(!e.length||!t.length)return Math.max(e.length,t.length);for(var n=0;n<t.length+1;n++)r[n]=n;for(n=0;n<e.length;n++){o[0]=n+1;for(var s=0;s<t.length;s++)o[s+1]=Math.min(o[s]+1,r[s+1]+1,r[s]+Number(e[n]!=t[s]));for(s=0;s<r.length;s++)r[s]=o[s]}return o[t.length]},goog.labs.userAgent.platform={},goog.labs.userAgent.platform.isAndroid=function(){return goog.labs.userAgent.util.matchUserAgent("Android")},goog.labs.userAgent.platform.isIpod=function(){return goog.labs.userAgent.util.matchUserAgent("iPod")},goog.labs.userAgent.platform.isIphone=function(){return goog.labs.userAgent.util.matchUserAgent("iPhone")&&!goog.labs.userAgent.util.matchUserAgent("iPod")&&!goog.labs.userAgent.util.matchUserAgent("iPad")},goog.labs.userAgent.platform.isIpad=function(){return goog.labs.userAgent.util.matchUserAgent("iPad")},goog.labs.userAgent.platform.isIos=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpad()||goog.labs.userAgent.platform.isIpod()},goog.labs.userAgent.platform.isMacintosh=function(){return goog.labs.userAgent.util.matchUserAgent("Macintosh")},goog.labs.userAgent.platform.isLinux=function(){return goog.labs.userAgent.util.matchUserAgent("Linux")},goog.labs.userAgent.platform.isWindows=function(){return goog.labs.userAgent.util.matchUserAgent("Windows")},goog.labs.userAgent.platform.isChromeOS=function(){return goog.labs.userAgent.util.matchUserAgent("CrOS")},goog.labs.userAgent.platform.isChromecast=function(){return goog.labs.userAgent.util.matchUserAgent("CrKey")},goog.labs.userAgent.platform.isKaiOS=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("KaiOS")},goog.labs.userAgent.platform.isGo2Phone=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("GAFP")},goog.labs.userAgent.platform.getVersion=function(){var e=goog.labs.userAgent.util.getUserAgent(),t="";return goog.labs.userAgent.platform.isWindows()?t=(e=(t=/Windows (?:NT|Phone) ([0-9.]+)/).exec(e))?e[1]:"0.0":goog.labs.userAgent.platform.isIos()?t=(e=(t=/(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/).exec(e))&&e[1].replace(/_/g,"."):goog.labs.userAgent.platform.isMacintosh()?t=(e=(t=/Mac OS X ([0-9_.]+)/).exec(e))?e[1].replace(/_/g,"."):"10":goog.labs.userAgent.platform.isKaiOS()?t=(e=(t=/(?:KaiOS)\/(\S+)/i).exec(e))&&e[1]:goog.labs.userAgent.platform.isAndroid()?t=(e=(t=/Android\s+([^\);]+)(\)|;)/).exec(e))&&e[1]:goog.labs.userAgent.platform.isChromeOS()&&(t=(e=(t=/(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/).exec(e))&&e[1]),t||""},goog.labs.userAgent.platform.isVersionOrHigher=function(e){return 0<=goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(),e)},goog.reflect={},goog.reflect.object=function(e,t){return t},goog.reflect.objectProperty=function(e,t){return e},goog.reflect.sinkValue=function(e){return goog.reflect.sinkValue[" "](e),e},goog.reflect.sinkValue[" "]=goog.nullFunction,goog.reflect.canAccessProperty=function(e,t){try{return goog.reflect.sinkValue(e[t]),!0}catch(e){}return!1},goog.reflect.cache=function(e,t,r,o){return o=o?o(t):t,Object.prototype.hasOwnProperty.call(e,o)?e[o]:e[o]=r(t)},goog.labs.userAgent.engine={},goog.labs.userAgent.engine.isPresto=function(){return goog.labs.userAgent.util.matchUserAgent("Presto")},goog.labs.userAgent.engine.isTrident=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE")},goog.labs.userAgent.engine.isEdge=function(){return goog.labs.userAgent.util.matchUserAgent("Edge")},goog.labs.userAgent.engine.isWebKit=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit")&&!goog.labs.userAgent.engine.isEdge()},goog.labs.userAgent.engine.isGecko=function(){return goog.labs.userAgent.util.matchUserAgent("Gecko")&&!goog.labs.userAgent.engine.isWebKit()&&!goog.labs.userAgent.engine.isTrident()&&!goog.labs.userAgent.engine.isEdge()},goog.labs.userAgent.engine.getVersion=function(){var e=goog.labs.userAgent.util.getUserAgent();if(e){e=goog.labs.userAgent.util.extractVersionTuples(e);var t,r=goog.labs.userAgent.engine.getEngineTuple_(e);if(r)return"Gecko"==r[0]?goog.labs.userAgent.engine.getVersionForKey_(e,"Firefox"):r[1];if((e=e[0])&&(t=e[2])&&(t=/Trident\/([^\s;]+)/.exec(t)))return t[1]}return""},goog.labs.userAgent.engine.getEngineTuple_=function(e){if(!goog.labs.userAgent.engine.isEdge())return e[1];for(var t=0;t<e.length;t++){var r=e[t];if("Edge"==r[0])return r}},goog.labs.userAgent.engine.isVersionOrHigher=function(e){return 0<=goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),e)},goog.labs.userAgent.engine.getVersionForKey_=function(e,t){return(e=goog.array.find(e,(function(e){return t==e[0]})))&&e[1]||""},goog.userAgent={},goog.userAgent.ASSUME_IE=!1,goog.userAgent.ASSUME_EDGE=!1,goog.userAgent.ASSUME_GECKO=!1,goog.userAgent.ASSUME_WEBKIT=!1,goog.userAgent.ASSUME_MOBILE_WEBKIT=!1,goog.userAgent.ASSUME_OPERA=!1,goog.userAgent.ASSUME_ANY_VERSION=!1,goog.userAgent.BROWSER_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_GECKO||goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_OPERA,goog.userAgent.getUserAgentString=function(){return goog.labs.userAgent.util.getUserAgent()},goog.userAgent.getNavigatorTyped=function(){return goog.global.navigator||null},goog.userAgent.getNavigator=function(){return goog.userAgent.getNavigatorTyped()},goog.userAgent.OPERA=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_OPERA:goog.labs.userAgent.browser.isOpera(),goog.userAgent.IE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_IE:goog.labs.userAgent.browser.isIE(),goog.userAgent.EDGE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_EDGE:goog.labs.userAgent.engine.isEdge(),goog.userAgent.EDGE_OR_IE=goog.userAgent.EDGE||goog.userAgent.IE,goog.userAgent.GECKO=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_GECKO:goog.labs.userAgent.engine.isGecko();goog.userAgent.WEBKIT=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_MOBILE_WEBKIT:goog.labs.userAgent.engine.isWebKit(),goog.userAgent.isMobile_=function(){return goog.userAgent.WEBKIT&&goog.labs.userAgent.util.matchUserAgent("Mobile")},goog.userAgent.MOBILE=goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.isMobile_(),goog.userAgent.SAFARI=goog.userAgent.WEBKIT,goog.userAgent.determinePlatform_=function(){var e=goog.userAgent.getNavigatorTyped();return e&&e.platform||""},goog.userAgent.PLATFORM=goog.userAgent.determinePlatform_(),goog.userAgent.ASSUME_MAC=!1,goog.userAgent.ASSUME_WINDOWS=!1,goog.userAgent.ASSUME_LINUX=!1,goog.userAgent.ASSUME_X11=!1,goog.userAgent.ASSUME_ANDROID=!1,goog.userAgent.ASSUME_IPHONE=!1,goog.userAgent.ASSUME_IPAD=!1,goog.userAgent.ASSUME_IPOD=!1,goog.userAgent.ASSUME_KAIOS=!1,goog.userAgent.ASSUME_GO2PHONE=!1,goog.userAgent.PLATFORM_KNOWN_=goog.userAgent.ASSUME_MAC||goog.userAgent.ASSUME_WINDOWS||goog.userAgent.ASSUME_LINUX||goog.userAgent.ASSUME_X11||goog.userAgent.ASSUME_ANDROID||goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD,goog.userAgent.MAC=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_MAC:goog.labs.userAgent.platform.isMacintosh(),goog.userAgent.WINDOWS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_WINDOWS:goog.labs.userAgent.platform.isWindows(),goog.userAgent.isLegacyLinux_=function(){return goog.labs.userAgent.platform.isLinux()||goog.labs.userAgent.platform.isChromeOS()},goog.userAgent.LINUX=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_LINUX:goog.userAgent.isLegacyLinux_(),goog.userAgent.isX11_=function(){var e=goog.userAgent.getNavigatorTyped();return!!e&&goog.string.contains(e.appVersion||"","X11")},goog.userAgent.X11=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_X11:goog.userAgent.isX11_(),goog.userAgent.ANDROID=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_ANDROID:goog.labs.userAgent.platform.isAndroid(),goog.userAgent.IPHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE:goog.labs.userAgent.platform.isIphone(),goog.userAgent.IPAD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad(),goog.userAgent.IPOD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIpod(),goog.userAgent.IOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD||goog.userAgent.ASSUME_IPOD:goog.labs.userAgent.platform.isIos(),goog.userAgent.KAIOS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_KAIOS:goog.labs.userAgent.platform.isKaiOS(),goog.userAgent.GO2PHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_GO2PHONE:goog.labs.userAgent.platform.isGo2Phone(),goog.userAgent.determineVersion_=function(){var e="",t=goog.userAgent.getVersionRegexResult_();return t&&(e=t?t[1]:""),goog.userAgent.IE&&(null!=(t=goog.userAgent.getDocumentMode_())&&t>parseFloat(e))?String(t):e},goog.userAgent.getVersionRegexResult_=function(){var e=goog.userAgent.getUserAgentString();return goog.userAgent.GECKO?/rv:([^\);]+)(\)|;)/.exec(e):goog.userAgent.EDGE?/Edge\/([\d\.]+)/.exec(e):goog.userAgent.IE?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(e):goog.userAgent.WEBKIT?/WebKit\/(\S+)/.exec(e):goog.userAgent.OPERA?/(?:Version)[ \/]?(\S+)/.exec(e):void 0},goog.userAgent.getDocumentMode_=function(){var e=goog.global.document;return e?e.documentMode:void 0},goog.userAgent.VERSION=goog.userAgent.determineVersion_(),goog.userAgent.compare=function(e,t){return goog.string.compareVersions(e,t)},goog.userAgent.isVersionOrHigherCache_={},goog.userAgent.isVersionOrHigher=function(e){return goog.userAgent.ASSUME_ANY_VERSION||goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_,e,(function(){return 0<=goog.string.compareVersions(goog.userAgent.VERSION,e)}))},goog.userAgent.isVersion=goog.userAgent.isVersionOrHigher,goog.userAgent.isDocumentModeOrHigher=function(e){return Number(goog.userAgent.DOCUMENT_MODE)>=e},goog.userAgent.isDocumentMode=goog.userAgent.isDocumentModeOrHigher,goog.userAgent.DOCUMENT_MODE=function(){if(goog.global.document&&goog.userAgent.IE)return goog.userAgent.getDocumentMode_()}(),goog.userAgent.product={},goog.userAgent.product.ASSUME_FIREFOX=!1,goog.userAgent.product.ASSUME_IPHONE=!1,goog.userAgent.product.ASSUME_IPAD=!1,goog.userAgent.product.ASSUME_ANDROID=!1,goog.userAgent.product.ASSUME_CHROME=!1,goog.userAgent.product.ASSUME_SAFARI=!1,goog.userAgent.product.PRODUCT_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_OPERA||goog.userAgent.product.ASSUME_FIREFOX||goog.userAgent.product.ASSUME_IPHONE||goog.userAgent.product.ASSUME_IPAD||goog.userAgent.product.ASSUME_ANDROID||goog.userAgent.product.ASSUME_CHROME||goog.userAgent.product.ASSUME_SAFARI,goog.userAgent.product.OPERA=goog.userAgent.OPERA,goog.userAgent.product.IE=goog.userAgent.IE,goog.userAgent.product.EDGE=goog.userAgent.EDGE,goog.userAgent.product.FIREFOX=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_FIREFOX:goog.labs.userAgent.browser.isFirefox(),goog.userAgent.product.isIphoneOrIpod_=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpod()},goog.userAgent.product.IPHONE=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPHONE:goog.userAgent.product.isIphoneOrIpod_(),goog.userAgent.product.IPAD=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad(),goog.userAgent.product.ANDROID=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_ANDROID:goog.labs.userAgent.browser.isAndroidBrowser(),goog.userAgent.product.CHROME=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_CHROME:goog.labs.userAgent.browser.isChrome(),goog.userAgent.product.isSafariDesktop_=function(){return goog.labs.userAgent.browser.isSafari()&&!goog.labs.userAgent.platform.isIos()},goog.userAgent.product.SAFARI=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_SAFARI:goog.userAgent.product.isSafariDesktop_(),goog.crypt.base64={},goog.crypt.base64.DEFAULT_ALPHABET_COMMON_="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",goog.crypt.base64.ENCODED_VALS=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+"+/=",goog.crypt.base64.ENCODED_VALS_WEBSAFE=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_+"-_.",goog.crypt.base64.Alphabet={DEFAULT:0,NO_PADDING:1,WEBSAFE:2,WEBSAFE_DOT_PADDING:3,WEBSAFE_NO_PADDING:4},goog.crypt.base64.paddingChars_="=.",goog.crypt.base64.isPadding_=function(e){return goog.string.contains(goog.crypt.base64.paddingChars_,e)},goog.crypt.base64.byteToCharMaps_={},goog.crypt.base64.charToByteMap_=null,goog.crypt.base64.ASSUME_NATIVE_SUPPORT_=goog.userAgent.GECKO||goog.userAgent.WEBKIT&&!goog.userAgent.product.SAFARI||goog.userAgent.OPERA,goog.crypt.base64.HAS_NATIVE_ENCODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||"function"==typeof goog.global.btoa,goog.crypt.base64.HAS_NATIVE_DECODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||!goog.userAgent.product.SAFARI&&!goog.userAgent.IE&&"function"==typeof goog.global.atob,goog.crypt.base64.encodeByteArray=function(e,t){goog.asserts.assert(goog.isArrayLike(e),"encodeByteArray takes an array as a parameter"),void 0===t&&(t=goog.crypt.base64.Alphabet.DEFAULT),goog.crypt.base64.init_(),t=goog.crypt.base64.byteToCharMaps_[t];for(var r=[],o=0;o<e.length;o+=3){var n=e[o],s=o+1<e.length,i=s?e[o+1]:0,a=o+2<e.length,u=a?e[o+2]:0,g=n>>2;n=(3&n)<<4|i>>4,i=(15&i)<<2|u>>6,u&=63,a||(u=64,s||(i=64)),r.push(t[g],t[n],t[i]||"",t[u]||"")}return r.join("")},goog.crypt.base64.encodeString=function(e,t){return goog.crypt.base64.HAS_NATIVE_ENCODE_&&!t?goog.global.btoa(e):goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(e),t)},goog.crypt.base64.decodeString=function(e,t){if(goog.crypt.base64.HAS_NATIVE_DECODE_&&!t)return goog.global.atob(e);var r="";return goog.crypt.base64.decodeStringInternal_(e,(function(e){r+=String.fromCharCode(e)})),r},goog.crypt.base64.decodeStringToByteArray=function(e,t){var r=[];return goog.crypt.base64.decodeStringInternal_(e,(function(e){r.push(e)})),r},goog.crypt.base64.decodeStringToUint8Array=function(e){goog.asserts.assert(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher("10"),"Browser does not support typed arrays");var t=e.length,r=3*t/4;r%3?r=Math.floor(r):goog.crypt.base64.isPadding_(e[t-1])&&(r=goog.crypt.base64.isPadding_(e[t-2])?r-2:r-1);var o=new Uint8Array(r),n=0;return goog.crypt.base64.decodeStringInternal_(e,(function(e){o[n++]=e})),o.subarray(0,n)},goog.crypt.base64.decodeStringInternal_=function(e,t){function r(t){for(;o<e.length;){var r=e.charAt(o++),n=goog.crypt.base64.charToByteMap_[r];if(null!=n)return n;if(!goog.string.isEmptyOrWhitespace(r))throw Error("Unknown base64 encoding at char: "+r)}return t}goog.crypt.base64.init_();for(var o=0;;){var n=r(-1),s=r(0),i=r(64),a=r(64);if(64===a&&-1===n)break;t(n<<2|s>>4),64!=i&&(t(s<<4&240|i>>2),64!=a&&t(i<<6&192|a))}},goog.crypt.base64.init_=function(){if(!goog.crypt.base64.charToByteMap_){goog.crypt.base64.charToByteMap_={};for(var e=goog.crypt.base64.DEFAULT_ALPHABET_COMMON_.split(""),t=["+/=","+/","-_=","-_.","-_"],r=0;5>r;r++){var o=e.concat(t[r].split(""));goog.crypt.base64.byteToCharMaps_[r]=o;for(var n=0;n<o.length;n++){var s=o[n],i=goog.crypt.base64.charToByteMap_[s];void 0===i?goog.crypt.base64.charToByteMap_[s]=n:goog.asserts.assert(i===n)}}}},jspb.utils={},jspb.utils.split64Low=0,jspb.utils.split64High=0,jspb.utils.splitUint64=function(e){var t=e>>>0;e=Math.floor((e-t)/jspb.BinaryConstants.TWO_TO_32)>>>0,jspb.utils.split64Low=t,jspb.utils.split64High=e},jspb.utils.splitInt64=function(e){var t=0>e,r=(e=Math.abs(e))>>>0;e=Math.floor((e-r)/jspb.BinaryConstants.TWO_TO_32),e>>>=0,t&&(e=~e>>>0,4294967295<(r=1+(~r>>>0))&&(r=0,4294967295<++e&&(e=0))),jspb.utils.split64Low=r,jspb.utils.split64High=e},jspb.utils.splitZigzag64=function(e){var t=0>e;e=2*Math.abs(e),jspb.utils.splitUint64(e),e=jspb.utils.split64Low;var r=jspb.utils.split64High;t&&(0==e?0==r?r=e=4294967295:(r--,e=4294967295):e--),jspb.utils.split64Low=e,jspb.utils.split64High=r},jspb.utils.splitFloat32=function(e){var t=0>e?1:0;if(0===(e=t?-e:e))0<1/e?(jspb.utils.split64High=0,jspb.utils.split64Low=0):(jspb.utils.split64High=0,jspb.utils.split64Low=2147483648);else if(isNaN(e))jspb.utils.split64High=0,jspb.utils.split64Low=2147483647;else if(e>jspb.BinaryConstants.FLOAT32_MAX)jspb.utils.split64High=0,jspb.utils.split64Low=(t<<31|2139095040)>>>0;else if(e<jspb.BinaryConstants.FLOAT32_MIN)e=Math.round(e/Math.pow(2,-149)),jspb.utils.split64High=0,jspb.utils.split64Low=(t<<31|e)>>>0;else{var r=Math.floor(Math.log(e)/Math.LN2);e*=Math.pow(2,-r),e=8388607&Math.round(e*jspb.BinaryConstants.TWO_TO_23),jspb.utils.split64High=0,jspb.utils.split64Low=(t<<31|r+127<<23|e)>>>0}},jspb.utils.splitFloat64=function(e){var t=0>e?1:0;if(0===(e=t?-e:e))jspb.utils.split64High=0<1/e?0:2147483648,jspb.utils.split64Low=0;else if(isNaN(e))jspb.utils.split64High=2147483647,jspb.utils.split64Low=4294967295;else if(e>jspb.BinaryConstants.FLOAT64_MAX)jspb.utils.split64High=(t<<31|2146435072)>>>0,jspb.utils.split64Low=0;else if(e<jspb.BinaryConstants.FLOAT64_MIN){var r=e/Math.pow(2,-1074);e=r/jspb.BinaryConstants.TWO_TO_32,jspb.utils.split64High=(t<<31|e)>>>0,jspb.utils.split64Low=r>>>0}else{var o=0;if(2<=(r=e))for(;2<=r&&1023>o;)o++,r/=2;else for(;1>r&&-1022<o;)r*=2,o--;e=(r=e*Math.pow(2,-o))*jspb.BinaryConstants.TWO_TO_20&1048575,r=r*jspb.BinaryConstants.TWO_TO_52>>>0,jspb.utils.split64High=(t<<31|o+1023<<20|e)>>>0,jspb.utils.split64Low=r}},jspb.utils.splitHash64=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),o=e.charCodeAt(2),n=e.charCodeAt(3),s=e.charCodeAt(4),i=e.charCodeAt(5),a=e.charCodeAt(6);e=e.charCodeAt(7),jspb.utils.split64Low=t+(r<<8)+(o<<16)+(n<<24)>>>0,jspb.utils.split64High=s+(i<<8)+(a<<16)+(e<<24)>>>0},jspb.utils.joinUint64=function(e,t){return t*jspb.BinaryConstants.TWO_TO_32+(e>>>0)},jspb.utils.joinInt64=function(e,t){var r=2147483648&t;return r&&(t=~t>>>0,0==(e=1+~e>>>0)&&(t=t+1>>>0)),e=jspb.utils.joinUint64(e,t),r?-e:e},jspb.utils.toZigzag64=function(e,t,r){var o=t>>31;return r(e<<1^o,(t<<1|e>>>31)^o)},jspb.utils.joinZigzag64=function(e,t){return jspb.utils.fromZigzag64(e,t,jspb.utils.joinInt64)},jspb.utils.fromZigzag64=function(e,t,r){var o=-(1&e);return r((e>>>1|t<<31)^o,t>>>1^o)},jspb.utils.joinFloat32=function(e,t){t=2*(e>>31)+1;var r=e>>>23&255;return e&=8388607,255==r?e?NaN:1/0*t:0==r?t*Math.pow(2,-149)*e:t*Math.pow(2,r-150)*(e+Math.pow(2,23))},jspb.utils.joinFloat64=function(e,t){var r=2*(t>>31)+1,o=t>>>20&2047;return e=jspb.BinaryConstants.TWO_TO_32*(1048575&t)+e,2047==o?e?NaN:1/0*r:0==o?r*Math.pow(2,-1074)*e:r*Math.pow(2,o-1075)*(e+jspb.BinaryConstants.TWO_TO_52)},jspb.utils.joinHash64=function(e,t){return String.fromCharCode(e>>>0&255,e>>>8&255,e>>>16&255,e>>>24&255,t>>>0&255,t>>>8&255,t>>>16&255,t>>>24&255)},jspb.utils.DIGITS="0123456789abcdef".split(""),jspb.utils.ZERO_CHAR_CODE_=48,jspb.utils.A_CHAR_CODE_=97,jspb.utils.joinUnsignedDecimalString=function(e,t){function r(e,t){return e=e?String(e):"",t?"0000000".slice(e.length)+e:e}if(2097151>=t)return""+(jspb.BinaryConstants.TWO_TO_32*t+e);var o=(e>>>24|t<<8)>>>0&16777215;return e=(16777215&e)+6777216*o+6710656*(t=t>>16&65535),o+=8147497*t,t*=2,1e7<=e&&(o+=Math.floor(e/1e7),e%=1e7),1e7<=o&&(t+=Math.floor(o/1e7),o%=1e7),r(t,0)+r(o,t)+r(e,1)},jspb.utils.joinSignedDecimalString=function(e,t){var r=2147483648&t;return r&&(t=~t+(0==(e=1+~e>>>0)?1:0)>>>0),e=jspb.utils.joinUnsignedDecimalString(e,t),r?"-"+e:e},jspb.utils.hash64ToDecimalString=function(e,t){jspb.utils.splitHash64(e),e=jspb.utils.split64Low;var r=jspb.utils.split64High;return t?jspb.utils.joinSignedDecimalString(e,r):jspb.utils.joinUnsignedDecimalString(e,r)},jspb.utils.hash64ArrayToDecimalStrings=function(e,t){for(var r=Array(e.length),o=0;o<e.length;o++)r[o]=jspb.utils.hash64ToDecimalString(e[o],t);return r},jspb.utils.decimalStringToHash64=function(e){function t(e,t){for(var r=0;8>r&&(1!==e||0<t);r++)t=e*o[r]+t,o[r]=255&t,t>>>=8}goog.asserts.assert(0<e.length);var r=!1;"-"===e[0]&&(r=!0,e=e.slice(1));for(var o=[0,0,0,0,0,0,0,0],n=0;n<e.length;n++)t(10,e.charCodeAt(n)-jspb.utils.ZERO_CHAR_CODE_);return r&&(function(){for(var e=0;8>e;e++)o[e]=255&~o[e]}(),t(1,1)),goog.crypt.byteArrayToString(o)},jspb.utils.splitDecimalString=function(e){jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(e))},jspb.utils.toHexDigit_=function(e){return String.fromCharCode(10>e?jspb.utils.ZERO_CHAR_CODE_+e:jspb.utils.A_CHAR_CODE_-10+e)},jspb.utils.fromHexCharCode_=function(e){return e>=jspb.utils.A_CHAR_CODE_?e-jspb.utils.A_CHAR_CODE_+10:e-jspb.utils.ZERO_CHAR_CODE_},jspb.utils.hash64ToHexString=function(e){var t=Array(18);t[0]="0",t[1]="x";for(var r=0;8>r;r++){var o=e.charCodeAt(7-r);t[2*r+2]=jspb.utils.toHexDigit_(o>>4),t[2*r+3]=jspb.utils.toHexDigit_(15&o)}return t.join("")},jspb.utils.hexStringToHash64=function(e){e=e.toLowerCase(),goog.asserts.assert(18==e.length),goog.asserts.assert("0"==e[0]),goog.asserts.assert("x"==e[1]);for(var t="",r=0;8>r;r++){var o=jspb.utils.fromHexCharCode_(e.charCodeAt(2*r+2)),n=jspb.utils.fromHexCharCode_(e.charCodeAt(2*r+3));t=String.fromCharCode(16*o+n)+t}return t},jspb.utils.hash64ToNumber=function(e,t){jspb.utils.splitHash64(e),e=jspb.utils.split64Low;var r=jspb.utils.split64High;return t?jspb.utils.joinInt64(e,r):jspb.utils.joinUint64(e,r)},jspb.utils.numberToHash64=function(e){return jspb.utils.splitInt64(e),jspb.utils.joinHash64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.utils.countVarints=function(e,t,r){for(var o=0,n=t;n<r;n++)o+=e[n]>>7;return r-t-o},jspb.utils.countVarintFields=function(e,t,r,o){var n=0;if(128>(o=8*o+jspb.BinaryConstants.WireType.VARINT))for(;t<r&&e[t++]==o;)for(n++;;){var s=e[t++];if(0==(128&s))break}else for(;t<r;){for(s=o;128<s;){if(e[t]!=(127&s|128))return n;t++,s>>=7}if(e[t++]!=s)break;for(n++;0!=(128&(s=e[t++])););}return n},jspb.utils.countFixedFields_=function(e,t,r,o,n){var s=0;if(128>o)for(;t<r&&e[t++]==o;)s++,t+=n;else for(;t<r;){for(var i=o;128<i;){if(e[t++]!=(127&i|128))return s;i>>=7}if(e[t++]!=i)break;s++,t+=n}return s},jspb.utils.countFixed32Fields=function(e,t,r,o){return jspb.utils.countFixedFields_(e,t,r,8*o+jspb.BinaryConstants.WireType.FIXED32,4)},jspb.utils.countFixed64Fields=function(e,t,r,o){return jspb.utils.countFixedFields_(e,t,r,8*o+jspb.BinaryConstants.WireType.FIXED64,8)},jspb.utils.countDelimitedFields=function(e,t,r,o){var n=0;for(o=8*o+jspb.BinaryConstants.WireType.DELIMITED;t<r;){for(var s=o;128<s;){if(e[t++]!=(127&s|128))return n;s>>=7}if(e[t++]!=s)break;n++;for(var i=0,a=1;i+=(127&(s=e[t++]))*a,a*=128,0!=(128&s););t+=i}return n},jspb.utils.debugBytesToTextFormat=function(e){var t='"';if(e){e=jspb.utils.byteSourceToUint8Array(e);for(var r=0;r<e.length;r++)t+="\\x",16>e[r]&&(t+="0"),t+=e[r].toString(16)}return t+'"'},jspb.utils.debugScalarToTextFormat=function(e){return"string"==typeof e?goog.string.quote(e):e.toString()},jspb.utils.stringToByteArray=function(e){for(var t=new Uint8Array(e.length),r=0;r<e.length;r++){var o=e.charCodeAt(r);if(255<o)throw Error("Conversion error: string contains codepoint outside of byte range");t[r]=o}return t},jspb.utils.byteSourceToUint8Array=function(e){return e.constructor===Uint8Array?e:e.constructor===ArrayBuffer||void 0!==Buffer&&e.constructor===Buffer||e.constructor===Array?new Uint8Array(e):e.constructor===String?goog.crypt.base64.decodeStringToUint8Array(e):(goog.asserts.fail("Type not convertible to Uint8Array."),new Uint8Array(0))},jspb.BinaryDecoder=function(e,t,r){this.bytes_=null,this.cursor_=this.end_=this.start_=0,this.error_=!1,e&&this.setBlock(e,t,r)},jspb.BinaryDecoder.instanceCache_=[],jspb.BinaryDecoder.alloc=function(e,t,r){if(jspb.BinaryDecoder.instanceCache_.length){var o=jspb.BinaryDecoder.instanceCache_.pop();return e&&o.setBlock(e,t,r),o}return new jspb.BinaryDecoder(e,t,r)},jspb.BinaryDecoder.prototype.free=function(){this.clear(),100>jspb.BinaryDecoder.instanceCache_.length&&jspb.BinaryDecoder.instanceCache_.push(this)},jspb.BinaryDecoder.prototype.clone=function(){return jspb.BinaryDecoder.alloc(this.bytes_,this.start_,this.end_-this.start_)},jspb.BinaryDecoder.prototype.clear=function(){this.bytes_=null,this.cursor_=this.end_=this.start_=0,this.error_=!1},jspb.BinaryDecoder.prototype.getBuffer=function(){return this.bytes_},jspb.BinaryDecoder.prototype.setBlock=function(e,t,r){this.bytes_=jspb.utils.byteSourceToUint8Array(e),this.start_=void 0!==t?t:0,this.end_=void 0!==r?this.start_+r:this.bytes_.length,this.cursor_=this.start_},jspb.BinaryDecoder.prototype.getEnd=function(){return this.end_},jspb.BinaryDecoder.prototype.setEnd=function(e){this.end_=e},jspb.BinaryDecoder.prototype.reset=function(){this.cursor_=this.start_},jspb.BinaryDecoder.prototype.getCursor=function(){return this.cursor_},jspb.BinaryDecoder.prototype.setCursor=function(e){this.cursor_=e},jspb.BinaryDecoder.prototype.advance=function(e){this.cursor_+=e,goog.asserts.assert(this.cursor_<=this.end_)},jspb.BinaryDecoder.prototype.atEnd=function(){return this.cursor_==this.end_},jspb.BinaryDecoder.prototype.pastEnd=function(){return this.cursor_>this.end_},jspb.BinaryDecoder.prototype.getError=function(){return this.error_||0>this.cursor_||this.cursor_>this.end_},jspb.BinaryDecoder.prototype.readSplitVarint64=function(e){for(var t=128,r=0,o=0,n=0;4>n&&128<=t;n++)r|=(127&(t=this.bytes_[this.cursor_++]))<<7*n;if(128<=t&&(r|=(127&(t=this.bytes_[this.cursor_++]))<<28,o|=(127&t)>>4),128<=t)for(n=0;5>n&&128<=t;n++)o|=(127&(t=this.bytes_[this.cursor_++]))<<7*n+3;if(128>t)return e(r>>>0,o>>>0);goog.asserts.fail("Failed to read varint, encoding is invalid."),this.error_=!0},jspb.BinaryDecoder.prototype.readSplitZigzagVarint64=function(e){return this.readSplitVarint64((function(t,r){return jspb.utils.fromZigzag64(t,r,e)}))},jspb.BinaryDecoder.prototype.readSplitFixed64=function(e){var t=this.bytes_,r=this.cursor_;this.cursor_+=8;for(var o=0,n=0,s=r+7;s>=r;s--)o=o<<8|t[s],n=n<<8|t[s+4];return e(o,n)},jspb.BinaryDecoder.prototype.skipVarint=function(){for(;128&this.bytes_[this.cursor_];)this.cursor_++;this.cursor_++},jspb.BinaryDecoder.prototype.unskipVarint=function(e){for(;128<e;)this.cursor_--,e>>>=7;this.cursor_--},jspb.BinaryDecoder.prototype.readUnsignedVarint32=function(){var e=this.bytes_,t=e[this.cursor_+0],r=127&t;return 128>t?(this.cursor_+=1,goog.asserts.assert(this.cursor_<=this.end_),r):(r|=(127&(t=e[this.cursor_+1]))<<7,128>t?(this.cursor_+=2,goog.asserts.assert(this.cursor_<=this.end_),r):(r|=(127&(t=e[this.cursor_+2]))<<14,128>t?(this.cursor_+=3,goog.asserts.assert(this.cursor_<=this.end_),r):(r|=(127&(t=e[this.cursor_+3]))<<21,128>t?(this.cursor_+=4,goog.asserts.assert(this.cursor_<=this.end_),r):(r|=(15&(t=e[this.cursor_+4]))<<28,128>t?(this.cursor_+=5,goog.asserts.assert(this.cursor_<=this.end_),r>>>0):(this.cursor_+=5,128<=e[this.cursor_++]&&128<=e[this.cursor_++]&&128<=e[this.cursor_++]&&128<=e[this.cursor_++]&&128<=e[this.cursor_++]&&goog.asserts.assert(!1),goog.asserts.assert(this.cursor_<=this.end_),r)))))},jspb.BinaryDecoder.prototype.readSignedVarint32=jspb.BinaryDecoder.prototype.readUnsignedVarint32,jspb.BinaryDecoder.prototype.readUnsignedVarint32String=function(){return this.readUnsignedVarint32().toString()},jspb.BinaryDecoder.prototype.readSignedVarint32String=function(){return this.readSignedVarint32().toString()},jspb.BinaryDecoder.prototype.readZigzagVarint32=function(){var e=this.readUnsignedVarint32();return e>>>1^-(1&e)},jspb.BinaryDecoder.prototype.readUnsignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinUint64)},jspb.BinaryDecoder.prototype.readUnsignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinUnsignedDecimalString)},jspb.BinaryDecoder.prototype.readSignedVarint64=function(){return this.readSplitVarint64(jspb.utils.joinInt64)},jspb.BinaryDecoder.prototype.readSignedVarint64String=function(){return this.readSplitVarint64(jspb.utils.joinSignedDecimalString)},jspb.BinaryDecoder.prototype.readZigzagVarint64=function(){return this.readSplitVarint64(jspb.utils.joinZigzag64)},jspb.BinaryDecoder.prototype.readZigzagVarintHash64=function(){return this.readSplitZigzagVarint64(jspb.utils.joinHash64)},jspb.BinaryDecoder.prototype.readZigzagVarint64String=function(){return this.readSplitZigzagVarint64(jspb.utils.joinSignedDecimalString)},jspb.BinaryDecoder.prototype.readUint8=function(){var e=this.bytes_[this.cursor_+0];return this.cursor_+=1,goog.asserts.assert(this.cursor_<=this.end_),e},jspb.BinaryDecoder.prototype.readUint16=function(){var e=this.bytes_[this.cursor_+0],t=this.bytes_[this.cursor_+1];return this.cursor_+=2,goog.asserts.assert(this.cursor_<=this.end_),e<<0|t<<8},jspb.BinaryDecoder.prototype.readUint32=function(){var e=this.bytes_[this.cursor_+0],t=this.bytes_[this.cursor_+1],r=this.bytes_[this.cursor_+2],o=this.bytes_[this.cursor_+3];return this.cursor_+=4,goog.asserts.assert(this.cursor_<=this.end_),(e<<0|t<<8|r<<16|o<<24)>>>0},jspb.BinaryDecoder.prototype.readUint64=function(){var e=this.readUint32(),t=this.readUint32();return jspb.utils.joinUint64(e,t)},jspb.BinaryDecoder.prototype.readUint64String=function(){var e=this.readUint32(),t=this.readUint32();return jspb.utils.joinUnsignedDecimalString(e,t)},jspb.BinaryDecoder.prototype.readInt8=function(){var e=this.bytes_[this.cursor_+0];return this.cursor_+=1,goog.asserts.assert(this.cursor_<=this.end_),e<<24>>24},jspb.BinaryDecoder.prototype.readInt16=function(){var e=this.bytes_[this.cursor_+0],t=this.bytes_[this.cursor_+1];return this.cursor_+=2,goog.asserts.assert(this.cursor_<=this.end_),(e<<0|t<<8)<<16>>16},jspb.BinaryDecoder.prototype.readInt32=function(){var e=this.bytes_[this.cursor_+0],t=this.bytes_[this.cursor_+1],r=this.bytes_[this.cursor_+2],o=this.bytes_[this.cursor_+3];return this.cursor_+=4,goog.asserts.assert(this.cursor_<=this.end_),e<<0|t<<8|r<<16|o<<24},jspb.BinaryDecoder.prototype.readInt64=function(){var e=this.readUint32(),t=this.readUint32();return jspb.utils.joinInt64(e,t)},jspb.BinaryDecoder.prototype.readInt64String=function(){var e=this.readUint32(),t=this.readUint32();return jspb.utils.joinSignedDecimalString(e,t)},jspb.BinaryDecoder.prototype.readFloat=function(){var e=this.readUint32();return jspb.utils.joinFloat32(e,0)},jspb.BinaryDecoder.prototype.readDouble=function(){var e=this.readUint32(),t=this.readUint32();return jspb.utils.joinFloat64(e,t)},jspb.BinaryDecoder.prototype.readBool=function(){return!!this.bytes_[this.cursor_++]},jspb.BinaryDecoder.prototype.readEnum=function(){return this.readSignedVarint32()},jspb.BinaryDecoder.prototype.readString=function(e){var t=this.bytes_,r=this.cursor_;e=r+e;for(var o=[],n="";r<e;){var s=t[r++];if(128>s)o.push(s);else{if(192>s)continue;if(224>s){var i=t[r++];o.push((31&s)<<6|63&i)}else if(240>s){i=t[r++];var a=t[r++];o.push((15&s)<<12|(63&i)<<6|63&a)}else if(248>s){s=(7&s)<<18|(63&(i=t[r++]))<<12|(63&(a=t[r++]))<<6|63&t[r++],s-=65536,o.push(55296+(s>>10&1023),56320+(1023&s))}}8192<=o.length&&(n+=String.fromCharCode.apply(null,o),o.length=0)}return n+=goog.crypt.byteArrayToString(o),this.cursor_=r,n},jspb.BinaryDecoder.prototype.readStringWithLength=function(){var e=this.readUnsignedVarint32();return this.readString(e)},jspb.BinaryDecoder.prototype.readBytes=function(e){if(0>e||this.cursor_+e>this.bytes_.length)return this.error_=!0,goog.asserts.fail("Invalid byte length!"),new Uint8Array(0);var t=this.bytes_.subarray(this.cursor_,this.cursor_+e);return this.cursor_+=e,goog.asserts.assert(this.cursor_<=this.end_),t},jspb.BinaryDecoder.prototype.readVarintHash64=function(){return this.readSplitVarint64(jspb.utils.joinHash64)},jspb.BinaryDecoder.prototype.readFixedHash64=function(){var e=this.bytes_,t=this.cursor_,r=e[t+0],o=e[t+1],n=e[t+2],s=e[t+3],i=e[t+4],a=e[t+5],u=e[t+6];return e=e[t+7],this.cursor_+=8,String.fromCharCode(r,o,n,s,i,a,u,e)},jspb.BinaryReader=function(e,t,r){this.decoder_=jspb.BinaryDecoder.alloc(e,t,r),this.fieldCursor_=this.decoder_.getCursor(),this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER,this.nextWireType_=jspb.BinaryConstants.WireType.INVALID,this.error_=!1,this.readCallbacks_=null},jspb.BinaryReader.instanceCache_=[],jspb.BinaryReader.alloc=function(e,t,r){if(jspb.BinaryReader.instanceCache_.length){var o=jspb.BinaryReader.instanceCache_.pop();return e&&o.decoder_.setBlock(e,t,r),o}return new jspb.BinaryReader(e,t,r)},jspb.BinaryReader.prototype.alloc=jspb.BinaryReader.alloc,jspb.BinaryReader.prototype.free=function(){this.decoder_.clear(),this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER,this.nextWireType_=jspb.BinaryConstants.WireType.INVALID,this.error_=!1,this.readCallbacks_=null,100>jspb.BinaryReader.instanceCache_.length&&jspb.BinaryReader.instanceCache_.push(this)},jspb.BinaryReader.prototype.getFieldCursor=function(){return this.fieldCursor_},jspb.BinaryReader.prototype.getCursor=function(){return this.decoder_.getCursor()},jspb.BinaryReader.prototype.getBuffer=function(){return this.decoder_.getBuffer()},jspb.BinaryReader.prototype.getFieldNumber=function(){return this.nextField_},jspb.BinaryReader.prototype.getWireType=function(){return this.nextWireType_},jspb.BinaryReader.prototype.isEndGroup=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP},jspb.BinaryReader.prototype.getError=function(){return this.error_||this.decoder_.getError()},jspb.BinaryReader.prototype.setBlock=function(e,t,r){this.decoder_.setBlock(e,t,r),this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER,this.nextWireType_=jspb.BinaryConstants.WireType.INVALID},jspb.BinaryReader.prototype.reset=function(){this.decoder_.reset(),this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER,this.nextWireType_=jspb.BinaryConstants.WireType.INVALID},jspb.BinaryReader.prototype.advance=function(e){this.decoder_.advance(e)},jspb.BinaryReader.prototype.nextField=function(){if(this.decoder_.atEnd())return!1;if(this.getError())return goog.asserts.fail("Decoder hit an error"),!1;this.fieldCursor_=this.decoder_.getCursor();var e=this.decoder_.readUnsignedVarint32(),t=e>>>3;return(e&=7)!=jspb.BinaryConstants.WireType.VARINT&&e!=jspb.BinaryConstants.WireType.FIXED32&&e!=jspb.BinaryConstants.WireType.FIXED64&&e!=jspb.BinaryConstants.WireType.DELIMITED&&e!=jspb.BinaryConstants.WireType.START_GROUP&&e!=jspb.BinaryConstants.WireType.END_GROUP?(goog.asserts.fail("Invalid wire type: %s (at position %s)",e,this.fieldCursor_),this.error_=!0,!1):(this.nextField_=t,this.nextWireType_=e,!0)},jspb.BinaryReader.prototype.unskipHeader=function(){this.decoder_.unskipVarint(this.nextField_<<3|this.nextWireType_)},jspb.BinaryReader.prototype.skipMatchingFields=function(){var e=this.nextField_;for(this.unskipHeader();this.nextField()&&this.getFieldNumber()==e;)this.skipField();this.decoder_.atEnd()||this.unskipHeader()},jspb.BinaryReader.prototype.skipVarintField=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.VARINT?(goog.asserts.fail("Invalid wire type for skipVarintField"),this.skipField()):this.decoder_.skipVarint()},jspb.BinaryReader.prototype.skipDelimitedField=function(){if(this.nextWireType_!=jspb.BinaryConstants.WireType.DELIMITED)goog.asserts.fail("Invalid wire type for skipDelimitedField"),this.skipField();else{var e=this.decoder_.readUnsignedVarint32();this.decoder_.advance(e)}},jspb.BinaryReader.prototype.skipFixed32Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED32?(goog.asserts.fail("Invalid wire type for skipFixed32Field"),this.skipField()):this.decoder_.advance(4)},jspb.BinaryReader.prototype.skipFixed64Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED64?(goog.asserts.fail("Invalid wire type for skipFixed64Field"),this.skipField()):this.decoder_.advance(8)},jspb.BinaryReader.prototype.skipGroup=function(){for(var e=this.nextField_;;){if(!this.nextField()){goog.asserts.fail("Unmatched start-group tag: stream EOF"),this.error_=!0;break}if(this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP){this.nextField_!=e&&(goog.asserts.fail("Unmatched end-group tag"),this.error_=!0);break}this.skipField()}},jspb.BinaryReader.prototype.skipField=function(){switch(this.nextWireType_){case jspb.BinaryConstants.WireType.VARINT:this.skipVarintField();break;case jspb.BinaryConstants.WireType.FIXED64:this.skipFixed64Field();break;case jspb.BinaryConstants.WireType.DELIMITED:this.skipDelimitedField();break;case jspb.BinaryConstants.WireType.FIXED32:this.skipFixed32Field();break;case jspb.BinaryConstants.WireType.START_GROUP:this.skipGroup();break;default:goog.asserts.fail("Invalid wire encoding for field.")}},jspb.BinaryReader.prototype.registerReadCallback=function(e,t){null===this.readCallbacks_&&(this.readCallbacks_={}),goog.asserts.assert(!this.readCallbacks_[e]),this.readCallbacks_[e]=t},jspb.BinaryReader.prototype.runReadCallback=function(e){return goog.asserts.assert(null!==this.readCallbacks_),e=this.readCallbacks_[e],goog.asserts.assert(e),e(this)},jspb.BinaryReader.prototype.readAny=function(e){this.nextWireType_=jspb.BinaryConstants.FieldTypeToWireType(e);var t=jspb.BinaryConstants.FieldType;switch(e){case t.DOUBLE:return this.readDouble();case t.FLOAT:return this.readFloat();case t.INT64:return this.readInt64();case t.UINT64:return this.readUint64();case t.INT32:return this.readInt32();case t.FIXED64:return this.readFixed64();case t.FIXED32:return this.readFixed32();case t.BOOL:return this.readBool();case t.STRING:return this.readString();case t.GROUP:goog.asserts.fail("Group field type not supported in readAny()");case t.MESSAGE:goog.asserts.fail("Message field type not supported in readAny()");case t.BYTES:return this.readBytes();case t.UINT32:return this.readUint32();case t.ENUM:return this.readEnum();case t.SFIXED32:return this.readSfixed32();case t.SFIXED64:return this.readSfixed64();case t.SINT32:return this.readSint32();case t.SINT64:return this.readSint64();case t.FHASH64:return this.readFixedHash64();case t.VHASH64:return this.readVarintHash64();default:goog.asserts.fail("Invalid field type in readAny()")}return 0},jspb.BinaryReader.prototype.readMessage=function(e,t){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var r=this.decoder_.getEnd(),o=this.decoder_.readUnsignedVarint32();o=this.decoder_.getCursor()+o,this.decoder_.setEnd(o),t(e,this),this.decoder_.setCursor(o),this.decoder_.setEnd(r)},jspb.BinaryReader.prototype.readGroup=function(e,t,r){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.START_GROUP),goog.asserts.assert(this.nextField_==e),r(t,this),this.error_||this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP||(goog.asserts.fail("Group submessage did not end with an END_GROUP tag"),this.error_=!0)},jspb.BinaryReader.prototype.getFieldDecoder=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var e=this.decoder_.readUnsignedVarint32(),t=this.decoder_.getCursor(),r=t+e;return e=jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(),t,e),this.decoder_.setCursor(r),e},jspb.BinaryReader.prototype.readInt32=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSignedVarint32()},jspb.BinaryReader.prototype.readInt32String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSignedVarint32String()},jspb.BinaryReader.prototype.readInt64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSignedVarint64()},jspb.BinaryReader.prototype.readInt64String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSignedVarint64String()},jspb.BinaryReader.prototype.readUint32=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readUnsignedVarint32()},jspb.BinaryReader.prototype.readUint32String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readUnsignedVarint32String()},jspb.BinaryReader.prototype.readUint64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readUnsignedVarint64()},jspb.BinaryReader.prototype.readUint64String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readUnsignedVarint64String()},jspb.BinaryReader.prototype.readSint32=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readZigzagVarint32()},jspb.BinaryReader.prototype.readSint64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readZigzagVarint64()},jspb.BinaryReader.prototype.readSint64String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readZigzagVarint64String()},jspb.BinaryReader.prototype.readFixed32=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32),this.decoder_.readUint32()},jspb.BinaryReader.prototype.readFixed64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readUint64()},jspb.BinaryReader.prototype.readFixed64String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readUint64String()},jspb.BinaryReader.prototype.readSfixed32=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32),this.decoder_.readInt32()},jspb.BinaryReader.prototype.readSfixed32String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32),this.decoder_.readInt32().toString()},jspb.BinaryReader.prototype.readSfixed64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readInt64()},jspb.BinaryReader.prototype.readSfixed64String=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readInt64String()},jspb.BinaryReader.prototype.readFloat=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32),this.decoder_.readFloat()},jspb.BinaryReader.prototype.readDouble=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readDouble()},jspb.BinaryReader.prototype.readBool=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),!!this.decoder_.readUnsignedVarint32()},jspb.BinaryReader.prototype.readEnum=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSignedVarint64()},jspb.BinaryReader.prototype.readString=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var e=this.decoder_.readUnsignedVarint32();return this.decoder_.readString(e)},jspb.BinaryReader.prototype.readBytes=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var e=this.decoder_.readUnsignedVarint32();return this.decoder_.readBytes(e)},jspb.BinaryReader.prototype.readVarintHash64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readVarintHash64()},jspb.BinaryReader.prototype.readSintHash64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readZigzagVarintHash64()},jspb.BinaryReader.prototype.readSplitVarint64=function(e){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSplitVarint64(e)},jspb.BinaryReader.prototype.readSplitZigzagVarint64=function(e){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT),this.decoder_.readSplitVarint64((function(t,r){return jspb.utils.fromZigzag64(t,r,e)}))},jspb.BinaryReader.prototype.readFixedHash64=function(){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readFixedHash64()},jspb.BinaryReader.prototype.readSplitFixed64=function(e){return goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64),this.decoder_.readSplitFixed64(e)},jspb.BinaryReader.prototype.readPackedField_=function(e){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var t=this.decoder_.readUnsignedVarint32();t=this.decoder_.getCursor()+t;for(var r=[];this.decoder_.getCursor()<t;)r.push(e.call(this.decoder_));return r},jspb.BinaryReader.prototype.readPackedInt32=function(){return this.readPackedField_(this.decoder_.readSignedVarint32)},jspb.BinaryReader.prototype.readPackedInt32String=function(){return this.readPackedField_(this.decoder_.readSignedVarint32String)},jspb.BinaryReader.prototype.readPackedInt64=function(){return this.readPackedField_(this.decoder_.readSignedVarint64)},jspb.BinaryReader.prototype.readPackedInt64String=function(){return this.readPackedField_(this.decoder_.readSignedVarint64String)},jspb.BinaryReader.prototype.readPackedUint32=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32)},jspb.BinaryReader.prototype.readPackedUint32String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32String)},jspb.BinaryReader.prototype.readPackedUint64=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64)},jspb.BinaryReader.prototype.readPackedUint64String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64String)},jspb.BinaryReader.prototype.readPackedSint32=function(){return this.readPackedField_(this.decoder_.readZigzagVarint32)},jspb.BinaryReader.prototype.readPackedSint64=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64)},jspb.BinaryReader.prototype.readPackedSint64String=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64String)},jspb.BinaryReader.prototype.readPackedFixed32=function(){return this.readPackedField_(this.decoder_.readUint32)},jspb.BinaryReader.prototype.readPackedFixed64=function(){return this.readPackedField_(this.decoder_.readUint64)},jspb.BinaryReader.prototype.readPackedFixed64String=function(){return this.readPackedField_(this.decoder_.readUint64String)},jspb.BinaryReader.prototype.readPackedSfixed32=function(){return this.readPackedField_(this.decoder_.readInt32)},jspb.BinaryReader.prototype.readPackedSfixed64=function(){return this.readPackedField_(this.decoder_.readInt64)},jspb.BinaryReader.prototype.readPackedSfixed64String=function(){return this.readPackedField_(this.decoder_.readInt64String)},jspb.BinaryReader.prototype.readPackedFloat=function(){return this.readPackedField_(this.decoder_.readFloat)},jspb.BinaryReader.prototype.readPackedDouble=function(){return this.readPackedField_(this.decoder_.readDouble)},jspb.BinaryReader.prototype.readPackedBool=function(){return this.readPackedField_(this.decoder_.readBool)},jspb.BinaryReader.prototype.readPackedEnum=function(){return this.readPackedField_(this.decoder_.readEnum)},jspb.BinaryReader.prototype.readPackedVarintHash64=function(){return this.readPackedField_(this.decoder_.readVarintHash64)},jspb.BinaryReader.prototype.readPackedFixedHash64=function(){return this.readPackedField_(this.decoder_.readFixedHash64)},jspb.Map=function(e,t){this.arr_=e,this.valueCtor_=t,this.map_={},this.arrClean=!0,0<this.arr_.length&&this.loadFromArray_()},jspb.Map.prototype.loadFromArray_=function(){for(var e=0;e<this.arr_.length;e++){var t=this.arr_[e],r=t[0];this.map_[r.toString()]=new jspb.Map.Entry_(r,t[1])}this.arrClean=!0},jspb.Map.prototype.toArray=function(){if(this.arrClean){if(this.valueCtor_){var e,t=this.map_;for(e in t)if(Object.prototype.hasOwnProperty.call(t,e)){var r=t[e].valueWrapper;r&&r.toArray()}}}else{for(this.arr_.length=0,(t=this.stringKeys_()).sort(),e=0;e<t.length;e++){var o=this.map_[t[e]];(r=o.valueWrapper)&&r.toArray(),this.arr_.push([o.key,o.value])}this.arrClean=!0}return this.arr_},jspb.Map.prototype.toObject=function(e,t){for(var r=this.toArray(),o=[],n=0;n<r.length;n++){var s=this.map_[r[n][0].toString()];this.wrapEntry_(s);var i=s.valueWrapper;i?(goog.asserts.assert(t),o.push([s.key,t(e,i)])):o.push([s.key,s.value])}return o},jspb.Map.fromObject=function(e,t,r){t=new jspb.Map([],t);for(var o=0;o<e.length;o++){var n=e[o][0],s=r(e[o][1]);t.set(n,s)}return t},jspb.Map.ArrayIteratorIterable_=function(e){this.idx_=0,this.arr_=e},jspb.Map.ArrayIteratorIterable_.prototype.next=function(){return this.idx_<this.arr_.length?{done:!1,value:this.arr_[this.idx_++]}:{done:!0,value:void 0}},"undefined"!=typeof Symbol&&(jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator]=function(){return this}),jspb.Map.prototype.getLength=function(){return this.stringKeys_().length},jspb.Map.prototype.clear=function(){this.map_={},this.arrClean=!1},jspb.Map.prototype.del=function(e){e=e.toString();var t=this.map_.hasOwnProperty(e);return delete this.map_[e],this.arrClean=!1,t},jspb.Map.prototype.getEntryList=function(){var e=[],t=this.stringKeys_();t.sort();for(var r=0;r<t.length;r++){var o=this.map_[t[r]];e.push([o.key,o.value])}return e},jspb.Map.prototype.entries=function(){var e=[],t=this.stringKeys_();t.sort();for(var r=0;r<t.length;r++){var o=this.map_[t[r]];e.push([o.key,this.wrapEntry_(o)])}return new jspb.Map.ArrayIteratorIterable_(e)},jspb.Map.prototype.keys=function(){var e=[],t=this.stringKeys_();t.sort();for(var r=0;r<t.length;r++)e.push(this.map_[t[r]].key);return new jspb.Map.ArrayIteratorIterable_(e)},jspb.Map.prototype.values=function(){var e=[],t=this.stringKeys_();t.sort();for(var r=0;r<t.length;r++)e.push(this.wrapEntry_(this.map_[t[r]]));return new jspb.Map.ArrayIteratorIterable_(e)},jspb.Map.prototype.forEach=function(e,t){var r=this.stringKeys_();r.sort();for(var o=0;o<r.length;o++){var n=this.map_[r[o]];e.call(t,this.wrapEntry_(n),n.key,this)}},jspb.Map.prototype.set=function(e,t){var r=new jspb.Map.Entry_(e);return this.valueCtor_?(r.valueWrapper=t,r.value=t.toArray()):r.value=t,this.map_[e.toString()]=r,this.arrClean=!1,this},jspb.Map.prototype.wrapEntry_=function(e){return this.valueCtor_?(e.valueWrapper||(e.valueWrapper=new this.valueCtor_(e.value)),e.valueWrapper):e.value},jspb.Map.prototype.get=function(e){if(e=this.map_[e.toString()])return this.wrapEntry_(e)},jspb.Map.prototype.has=function(e){return e.toString()in this.map_},jspb.Map.prototype.serializeBinary=function(e,t,r,o,n){var s=this.stringKeys_();s.sort();for(var i=0;i<s.length;i++){var a=this.map_[s[i]];t.beginSubMessage(e),r.call(t,1,a.key),this.valueCtor_?o.call(t,2,this.wrapEntry_(a),n):o.call(t,2,a.value),t.endSubMessage()}},jspb.Map.deserializeBinary=function(e,t,r,o,n,s,i){for(;t.nextField()&&!t.isEndGroup();){var a=t.getFieldNumber();1==a?s=r.call(t):2==a&&(e.valueCtor_?(goog.asserts.assert(n),i||(i=new e.valueCtor_),o.call(t,i,n)):i=o.call(t))}goog.asserts.assert(null!=s),goog.asserts.assert(null!=i),e.set(s,i)},jspb.Map.prototype.stringKeys_=function(){var e,t=this.map_,r=[];for(e in t)Object.prototype.hasOwnProperty.call(t,e)&&r.push(e);return r},jspb.Map.Entry_=function(e,t){this.key=e,this.value=t,this.valueWrapper=void 0},jspb.ExtensionFieldInfo=function(e,t,r,o,n){this.fieldIndex=e,this.fieldName=t,this.ctor=r,this.toObjectFn=o,this.isRepeated=n},jspb.ExtensionFieldBinaryInfo=function(e,t,r,o,n,s){this.fieldInfo=e,this.binaryReaderFn=t,this.binaryWriterFn=r,this.binaryMessageSerializeFn=o,this.binaryMessageDeserializeFn=n,this.isPacked=s},jspb.ExtensionFieldInfo.prototype.isMessageType=function(){return!!this.ctor},jspb.Message=function(){},jspb.Message.GENERATE_TO_OBJECT=!0,jspb.Message.GENERATE_FROM_OBJECT=!goog.DISALLOW_TEST_ONLY_CODE,jspb.Message.GENERATE_TO_STRING=!0,jspb.Message.ASSUME_LOCAL_ARRAYS=!1,jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS=!0,jspb.Message.SUPPORTS_UINT8ARRAY_="function"==typeof Uint8Array,jspb.Message.prototype.getJsPbMessageId=function(){return this.messageId_},jspb.Message.getIndex_=function(e,t){return t+e.arrayIndexOffset_},jspb.Message.hiddenES6Property_=function(){},jspb.Message.getFieldNumber_=function(e,t){return t-e.arrayIndexOffset_},jspb.Message.initialize=function(e,t,r,o,n,s){if(e.wrappers_=null,t||(t=r?[r]:[]),e.messageId_=r?String(r):void 0,e.arrayIndexOffset_=0===r?-1:0,e.array=t,jspb.Message.initPivotAndExtensionObject_(e,o),e.convertedPrimitiveFields_={},jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS||(e.repeatedFields=n),n)for(t=0;t<n.length;t++)(r=n[t])<e.pivot_?(r=jspb.Message.getIndex_(e,r),e.array[r]=e.array[r]||jspb.Message.EMPTY_LIST_SENTINEL_):(jspb.Message.maybeInitEmptyExtensionObject_(e),e.extensionObject_[r]=e.extensionObject_[r]||jspb.Message.EMPTY_LIST_SENTINEL_);if(s&&s.length)for(t=0;t<s.length;t++)jspb.Message.computeOneofCase(e,s[t])},jspb.Message.EMPTY_LIST_SENTINEL_=goog.DEBUG&&Object.freeze?Object.freeze([]):[],jspb.Message.isArray_=function(e){return jspb.Message.ASSUME_LOCAL_ARRAYS?e instanceof Array:goog.isArray(e)},jspb.Message.isExtensionObject_=function(e){return!(null===e||"object"!=typeof e||jspb.Message.isArray_(e)||jspb.Message.SUPPORTS_UINT8ARRAY_&&e instanceof Uint8Array)},jspb.Message.initPivotAndExtensionObject_=function(e,t){var r=e.array.length,o=-1;if(r&&(o=r-1,r=e.array[o],jspb.Message.isExtensionObject_(r)))return e.pivot_=jspb.Message.getFieldNumber_(e,o),void(e.extensionObject_=r);-1<t?(e.pivot_=Math.max(t,jspb.Message.getFieldNumber_(e,o+1)),e.extensionObject_=null):e.pivot_=Number.MAX_VALUE},jspb.Message.maybeInitEmptyExtensionObject_=function(e){var t=jspb.Message.getIndex_(e,e.pivot_);e.array[t]||(e.extensionObject_=e.array[t]={})},jspb.Message.toObjectList=function(e,t,r){for(var o=[],n=0;n<e.length;n++)o[n]=t.call(e[n],r,e[n]);return o},jspb.Message.toObjectExtension=function(e,t,r,o,n){for(var s in r){var i=r[s],a=o.call(e,i);if(null!=a){for(var u in i.fieldName)if(i.fieldName.hasOwnProperty(u))break;t[u]=i.toObjectFn?i.isRepeated?jspb.Message.toObjectList(a,i.toObjectFn,n):i.toObjectFn(n,a):a}}},jspb.Message.serializeBinaryExtensions=function(e,t,r,o){for(var n in r){var s=r[n],i=s.fieldInfo;if(!s.binaryWriterFn)throw Error("Message extension present that was generated without binary serialization support");var a=o.call(e,i);if(null!=a)if(i.isMessageType()){if(!s.binaryMessageSerializeFn)throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");s.binaryWriterFn.call(t,i.fieldIndex,a,s.binaryMessageSerializeFn)}else s.binaryWriterFn.call(t,i.fieldIndex,a)}},jspb.Message.readBinaryExtension=function(e,t,r,o,n){var s=r[t.getFieldNumber()];if(s){if(r=s.fieldInfo,!s.binaryReaderFn)throw Error("Deserializing extension whose generated code does not support binary format");if(r.isMessageType()){var i=new r.ctor;s.binaryReaderFn.call(t,i,s.binaryMessageDeserializeFn)}else i=s.binaryReaderFn.call(t);r.isRepeated&&!s.isPacked?(t=o.call(e,r))?t.push(i):n.call(e,r,[i]):n.call(e,r,i)}else t.skipField()},jspb.Message.getField=function(e,t){if(t<e.pivot_){t=jspb.Message.getIndex_(e,t);var r=e.array[t];return r===jspb.Message.EMPTY_LIST_SENTINEL_?e.array[t]=[]:r}if(e.extensionObject_)return(r=e.extensionObject_[t])===jspb.Message.EMPTY_LIST_SENTINEL_?e.extensionObject_[t]=[]:r},jspb.Message.getRepeatedField=function(e,t){return jspb.Message.getField(e,t)},jspb.Message.getOptionalFloatingPointField=function(e,t){return null==(e=jspb.Message.getField(e,t))?e:+e},jspb.Message.getBooleanField=function(e,t){return null==(e=jspb.Message.getField(e,t))?e:!!e},jspb.Message.getRepeatedFloatingPointField=function(e,t){var r=jspb.Message.getRepeatedField(e,t);if(e.convertedPrimitiveFields_||(e.convertedPrimitiveFields_={}),!e.convertedPrimitiveFields_[t]){for(var o=0;o<r.length;o++)r[o]=+r[o];e.convertedPrimitiveFields_[t]=!0}return r},jspb.Message.getRepeatedBooleanField=function(e,t){var r=jspb.Message.getRepeatedField(e,t);if(e.convertedPrimitiveFields_||(e.convertedPrimitiveFields_={}),!e.convertedPrimitiveFields_[t]){for(var o=0;o<r.length;o++)r[o]=!!r[o];e.convertedPrimitiveFields_[t]=!0}return r},jspb.Message.bytesAsB64=function(e){return null==e||"string"==typeof e?e:jspb.Message.SUPPORTS_UINT8ARRAY_&&e instanceof Uint8Array?goog.crypt.base64.encodeByteArray(e):(goog.asserts.fail("Cannot coerce to b64 string: "+goog.typeOf(e)),null)},jspb.Message.bytesAsU8=function(e){return null==e||e instanceof Uint8Array?e:"string"==typeof e?goog.crypt.base64.decodeStringToUint8Array(e):(goog.asserts.fail("Cannot coerce to Uint8Array: "+goog.typeOf(e)),null)},jspb.Message.bytesListAsB64=function(e){return jspb.Message.assertConsistentTypes_(e),e.length&&"string"!=typeof e[0]?goog.array.map(e,jspb.Message.bytesAsB64):e},jspb.Message.bytesListAsU8=function(e){return jspb.Message.assertConsistentTypes_(e),!e.length||e[0]instanceof Uint8Array?e:goog.array.map(e,jspb.Message.bytesAsU8)},jspb.Message.assertConsistentTypes_=function(e){if(goog.DEBUG&&e&&1<e.length){var t=goog.typeOf(e[0]);goog.array.forEach(e,(function(e){goog.typeOf(e)!=t&&goog.asserts.fail("Inconsistent type in JSPB repeated field array. Got "+goog.typeOf(e)+" expected "+t)}))}},jspb.Message.getFieldWithDefault=function(e,t,r){return null==(e=jspb.Message.getField(e,t))?r:e},jspb.Message.getBooleanFieldWithDefault=function(e,t,r){return null==(e=jspb.Message.getBooleanField(e,t))?r:e},jspb.Message.getFloatingPointFieldWithDefault=function(e,t,r){return null==(e=jspb.Message.getOptionalFloatingPointField(e,t))?r:e},jspb.Message.getFieldProto3=jspb.Message.getFieldWithDefault,jspb.Message.getMapField=function(e,t,r,o){if(e.wrappers_||(e.wrappers_={}),t in e.wrappers_)return e.wrappers_[t];var n=jspb.Message.getField(e,t);if(!n){if(r)return;n=[],jspb.Message.setField(e,t,n)}return e.wrappers_[t]=new jspb.Map(n,o)},jspb.Message.setField=function(e,t,r){return goog.asserts.assertInstanceof(e,jspb.Message),t<e.pivot_?e.array[jspb.Message.getIndex_(e,t)]=r:(jspb.Message.maybeInitEmptyExtensionObject_(e),e.extensionObject_[t]=r),e},jspb.Message.setProto3IntField=function(e,t,r){return jspb.Message.setFieldIgnoringDefault_(e,t,r,0)},jspb.Message.setProto3FloatField=function(e,t,r){return jspb.Message.setFieldIgnoringDefault_(e,t,r,0)},jspb.Message.setProto3BooleanField=function(e,t,r){return jspb.Message.setFieldIgnoringDefault_(e,t,r,!1)},jspb.Message.setProto3StringField=function(e,t,r){return jspb.Message.setFieldIgnoringDefault_(e,t,r,"")},jspb.Message.setProto3BytesField=function(e,t,r){return jspb.Message.setFieldIgnoringDefault_(e,t,r,"")},jspb.Message.setProto3EnumField=function(e,t,r){return jspb.Message.setFieldIgnoringDefault_(e,t,r,0)},jspb.Message.setProto3StringIntField=function(e,t,r){return jspb.Message.setFieldIgnoringDefault_(e,t,r,"0")},jspb.Message.setFieldIgnoringDefault_=function(e,t,r,o){return goog.asserts.assertInstanceof(e,jspb.Message),r!==o?jspb.Message.setField(e,t,r):e.array[jspb.Message.getIndex_(e,t)]=null,e},jspb.Message.addToRepeatedField=function(e,t,r,o){return goog.asserts.assertInstanceof(e,jspb.Message),t=jspb.Message.getRepeatedField(e,t),null!=o?t.splice(o,0,r):t.push(r),e},jspb.Message.setOneofField=function(e,t,r,o){return goog.asserts.assertInstanceof(e,jspb.Message),(r=jspb.Message.computeOneofCase(e,r))&&r!==t&&void 0!==o&&(e.wrappers_&&r in e.wrappers_&&(e.wrappers_[r]=void 0),jspb.Message.setField(e,r,void 0)),jspb.Message.setField(e,t,o)},jspb.Message.computeOneofCase=function(e,t){for(var r,o,n=0;n<t.length;n++){var s=t[n],i=jspb.Message.getField(e,s);null!=i&&(r=s,o=i,jspb.Message.setField(e,s,void 0))}return r?(jspb.Message.setField(e,r,o),r):0},jspb.Message.getWrapperField=function(e,t,r,o){if(e.wrappers_||(e.wrappers_={}),!e.wrappers_[r]){var n=jspb.Message.getField(e,r);(o||n)&&(e.wrappers_[r]=new t(n))}return e.wrappers_[r]},jspb.Message.getRepeatedWrapperField=function(e,t,r){return jspb.Message.wrapRepeatedField_(e,t,r),(t=e.wrappers_[r])==jspb.Message.EMPTY_LIST_SENTINEL_&&(t=e.wrappers_[r]=[]),t},jspb.Message.wrapRepeatedField_=function(e,t,r){if(e.wrappers_||(e.wrappers_={}),!e.wrappers_[r]){for(var o=jspb.Message.getRepeatedField(e,r),n=[],s=0;s<o.length;s++)n[s]=new t(o[s]);e.wrappers_[r]=n}},jspb.Message.setWrapperField=function(e,t,r){goog.asserts.assertInstanceof(e,jspb.Message),e.wrappers_||(e.wrappers_={});var o=r?r.toArray():r;return e.wrappers_[t]=r,jspb.Message.setField(e,t,o)},jspb.Message.setOneofWrapperField=function(e,t,r,o){goog.asserts.assertInstanceof(e,jspb.Message),e.wrappers_||(e.wrappers_={});var n=o?o.toArray():o;return e.wrappers_[t]=o,jspb.Message.setOneofField(e,t,r,n)},jspb.Message.setRepeatedWrapperField=function(e,t,r){goog.asserts.assertInstanceof(e,jspb.Message),e.wrappers_||(e.wrappers_={}),r=r||[];for(var o=[],n=0;n<r.length;n++)o[n]=r[n].toArray();return e.wrappers_[t]=r,jspb.Message.setField(e,t,o)},jspb.Message.addToRepeatedWrapperField=function(e,t,r,o,n){jspb.Message.wrapRepeatedField_(e,o,t);var s=e.wrappers_[t];return s||(s=e.wrappers_[t]=[]),r=r||new o,e=jspb.Message.getRepeatedField(e,t),null!=n?(s.splice(n,0,r),e.splice(n,0,r.toArray())):(s.push(r),e.push(r.toArray())),r},jspb.Message.toMap=function(e,t,r,o){for(var n={},s=0;s<e.length;s++)n[t.call(e[s])]=r?r.call(e[s],o,e[s]):e[s];return n},jspb.Message.prototype.syncMapFields_=function(){if(this.wrappers_)for(var e in this.wrappers_){var t=this.wrappers_[e];if(goog.isArray(t))for(var r=0;r<t.length;r++)t[r]&&t[r].toArray();else t&&t.toArray()}},jspb.Message.prototype.toArray=function(){return this.syncMapFields_(),this.array},jspb.Message.GENERATE_TO_STRING&&(jspb.Message.prototype.toString=function(){return this.syncMapFields_(),this.array.toString()}),jspb.Message.prototype.getExtension=function(e){if(this.extensionObject_){this.wrappers_||(this.wrappers_={});var t=e.fieldIndex;if(e.isRepeated){if(e.isMessageType())return this.wrappers_[t]||(this.wrappers_[t]=goog.array.map(this.extensionObject_[t]||[],(function(t){return new e.ctor(t)}))),this.wrappers_[t]}else if(e.isMessageType())return!this.wrappers_[t]&&this.extensionObject_[t]&&(this.wrappers_[t]=new e.ctor(this.extensionObject_[t])),this.wrappers_[t];return this.extensionObject_[t]}},jspb.Message.prototype.setExtension=function(e,t){this.wrappers_||(this.wrappers_={}),jspb.Message.maybeInitEmptyExtensionObject_(this);var r=e.fieldIndex;return e.isRepeated?(t=t||[],e.isMessageType()?(this.wrappers_[r]=t,this.extensionObject_[r]=goog.array.map(t,(function(e){return e.toArray()}))):this.extensionObject_[r]=t):e.isMessageType()?(this.wrappers_[r]=t,this.extensionObject_[r]=t?t.toArray():t):this.extensionObject_[r]=t,this},jspb.Message.difference=function(e,t){if(!(e instanceof t.constructor))throw Error("Messages have different types.");var r=e.toArray();t=t.toArray();var o=[],n=0,s=r.length>t.length?r.length:t.length;for(e.getJsPbMessageId()&&(o[0]=e.getJsPbMessageId(),n=1);n<s;n++)jspb.Message.compareFields(r[n],t[n])||(o[n]=t[n]);return new e.constructor(o)},jspb.Message.equals=function(e,t){return e==t||!(!e||!t)&&e instanceof t.constructor&&jspb.Message.compareFields(e.toArray(),t.toArray())},jspb.Message.compareExtensions=function(e,t){e=e||{},t=t||{};var r,o={};for(r in e)o[r]=0;for(r in t)o[r]=0;for(r in o)if(!jspb.Message.compareFields(e[r],t[r]))return!1;return!0},jspb.Message.compareFields=function(e,t){if(e==t)return!0;if(!goog.isObject(e)||!goog.isObject(t))return!!("number"==typeof e&&isNaN(e)||"number"==typeof t&&isNaN(t))&&String(e)==String(t);if(e.constructor!=t.constructor)return!1;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&e.constructor===Uint8Array){if(e.length!=t.length)return!1;for(var r=0;r<e.length;r++)if(e[r]!=t[r])return!1;return!0}if(e.constructor===Array){var o=void 0,n=void 0,s=Math.max(e.length,t.length);for(r=0;r<s;r++){var i=e[r],a=t[r];if(i&&i.constructor==Object&&(goog.asserts.assert(void 0===o),goog.asserts.assert(r===e.length-1),o=i,i=void 0),a&&a.constructor==Object&&(goog.asserts.assert(void 0===n),goog.asserts.assert(r===t.length-1),n=a,a=void 0),!jspb.Message.compareFields(i,a))return!1}return!o&&!n||(o=o||{},n=n||{},jspb.Message.compareExtensions(o,n))}if(e.constructor===Object)return jspb.Message.compareExtensions(e,t);throw Error("Invalid type in JSPB array")},jspb.Message.prototype.cloneMessage=function(){return jspb.Message.cloneMessage(this)},jspb.Message.prototype.clone=function(){return jspb.Message.cloneMessage(this)},jspb.Message.clone=function(e){return jspb.Message.cloneMessage(e)},jspb.Message.cloneMessage=function(e){return new e.constructor(jspb.Message.clone_(e.toArray()))},jspb.Message.copyInto=function(e,t){goog.asserts.assertInstanceof(e,jspb.Message),goog.asserts.assertInstanceof(t,jspb.Message),goog.asserts.assert(e.constructor==t.constructor,"Copy source and target message should have the same type."),e=jspb.Message.clone(e);for(var r=t.toArray(),o=e.toArray(),n=r.length=0;n<o.length;n++)r[n]=o[n];t.wrappers_=e.wrappers_,t.extensionObject_=e.extensionObject_},jspb.Message.clone_=function(e){if(goog.isArray(e)){for(var t=Array(e.length),r=0;r<e.length;r++){var o=e[r];null!=o&&(t[r]="object"==typeof o?jspb.Message.clone_(goog.asserts.assert(o)):o)}return t}if(jspb.Message.SUPPORTS_UINT8ARRAY_&&e instanceof Uint8Array)return new Uint8Array(e);for(r in t={},e)null!=(o=e[r])&&(t[r]="object"==typeof o?jspb.Message.clone_(goog.asserts.assert(o)):o);return t},jspb.Message.registerMessageType=function(e,t){t.messageId=e},jspb.Message.messageSetExtensions={},jspb.Message.messageSetExtensionsBinary={},jspb.arith={},jspb.arith.UInt64=function(e,t){this.lo=e,this.hi=t},jspb.arith.UInt64.prototype.cmp=function(e){return this.hi<e.hi||this.hi==e.hi&&this.lo<e.lo?-1:this.hi==e.hi&&this.lo==e.lo?0:1},jspb.arith.UInt64.prototype.rightShift=function(){return new jspb.arith.UInt64((this.lo>>>1|(1&this.hi)<<31)>>>0,this.hi>>>1>>>0)},jspb.arith.UInt64.prototype.leftShift=function(){return new jspb.arith.UInt64(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0)},jspb.arith.UInt64.prototype.msb=function(){return!!(2147483648&this.hi)},jspb.arith.UInt64.prototype.lsb=function(){return!!(1&this.lo)},jspb.arith.UInt64.prototype.zero=function(){return 0==this.lo&&0==this.hi},jspb.arith.UInt64.prototype.add=function(e){return new jspb.arith.UInt64((this.lo+e.lo&4294967295)>>>0>>>0,((this.hi+e.hi&4294967295)>>>0)+(4294967296<=this.lo+e.lo?1:0)>>>0)},jspb.arith.UInt64.prototype.sub=function(e){return new jspb.arith.UInt64((this.lo-e.lo&4294967295)>>>0>>>0,((this.hi-e.hi&4294967295)>>>0)-(0>this.lo-e.lo?1:0)>>>0)},jspb.arith.UInt64.mul32x32=function(e,t){var r=65535&e,o=65535&t,n=t>>>16;for(t=r*o+65536*(r*n&65535)+65536*((e>>>=16)*o&65535),r=e*n+(r*n>>>16)+(e*o>>>16);4294967296<=t;)t-=4294967296,r+=1;return new jspb.arith.UInt64(t>>>0,r>>>0)},jspb.arith.UInt64.prototype.mul=function(e){var t=jspb.arith.UInt64.mul32x32(this.lo,e);return(e=jspb.arith.UInt64.mul32x32(this.hi,e)).hi=e.lo,e.lo=0,t.add(e)},jspb.arith.UInt64.prototype.div=function(e){if(0==e)return[];var t=new jspb.arith.UInt64(0,0),r=new jspb.arith.UInt64(this.lo,this.hi);e=new jspb.arith.UInt64(e,0);for(var o=new jspb.arith.UInt64(1,0);!e.msb();)e=e.leftShift(),o=o.leftShift();for(;!o.zero();)0>=e.cmp(r)&&(t=t.add(o),r=r.sub(e)),e=e.rightShift(),o=o.rightShift();return[t,r]},jspb.arith.UInt64.prototype.toString=function(){for(var e="",t=this;!t.zero();){var r=(t=t.div(10))[0];e=t[1].lo+e,t=r}return""==e&&(e="0"),e},jspb.arith.UInt64.fromString=function(e){for(var t=new jspb.arith.UInt64(0,0),r=new jspb.arith.UInt64(0,0),o=0;o<e.length;o++){if("0">e[o]||"9"<e[o])return null;var n=parseInt(e[o],10);r.lo=n,t=t.mul(10).add(r)}return t},jspb.arith.UInt64.prototype.clone=function(){return new jspb.arith.UInt64(this.lo,this.hi)},jspb.arith.Int64=function(e,t){this.lo=e,this.hi=t},jspb.arith.Int64.prototype.add=function(e){return new jspb.arith.Int64((this.lo+e.lo&4294967295)>>>0>>>0,((this.hi+e.hi&4294967295)>>>0)+(4294967296<=this.lo+e.lo?1:0)>>>0)},jspb.arith.Int64.prototype.sub=function(e){return new jspb.arith.Int64((this.lo-e.lo&4294967295)>>>0>>>0,((this.hi-e.hi&4294967295)>>>0)-(0>this.lo-e.lo?1:0)>>>0)},jspb.arith.Int64.prototype.clone=function(){return new jspb.arith.Int64(this.lo,this.hi)},jspb.arith.Int64.prototype.toString=function(){var e=0!=(2147483648&this.hi),t=new jspb.arith.UInt64(this.lo,this.hi);return e&&(t=new jspb.arith.UInt64(0,0).sub(t)),(e?"-":"")+t.toString()},jspb.arith.Int64.fromString=function(e){var t=0<e.length&&"-"==e[0];return t&&(e=e.substring(1)),null===(e=jspb.arith.UInt64.fromString(e))?null:(t&&(e=new jspb.arith.UInt64(0,0).sub(e)),new jspb.arith.Int64(e.lo,e.hi))},jspb.BinaryEncoder=function(){this.buffer_=[]},jspb.BinaryEncoder.prototype.length=function(){return this.buffer_.length},jspb.BinaryEncoder.prototype.end=function(){var e=this.buffer_;return this.buffer_=[],e},jspb.BinaryEncoder.prototype.writeSplitVarint64=function(e,t){for(goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(t==Math.floor(t)),goog.asserts.assert(0<=e&&e<jspb.BinaryConstants.TWO_TO_32),goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_32);0<t||127<e;)this.buffer_.push(127&e|128),e=(e>>>7|t<<25)>>>0,t>>>=7;this.buffer_.push(e)},jspb.BinaryEncoder.prototype.writeSplitFixed64=function(e,t){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(t==Math.floor(t)),goog.asserts.assert(0<=e&&e<jspb.BinaryConstants.TWO_TO_32),goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_32),this.writeUint32(e),this.writeUint32(t)},jspb.BinaryEncoder.prototype.writeUnsignedVarint32=function(e){for(goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(0<=e&&e<jspb.BinaryConstants.TWO_TO_32);127<e;)this.buffer_.push(127&e|128),e>>>=7;this.buffer_.push(e)},jspb.BinaryEncoder.prototype.writeSignedVarint32=function(e){if(goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_31&&e<jspb.BinaryConstants.TWO_TO_31),0<=e)this.writeUnsignedVarint32(e);else{for(var t=0;9>t;t++)this.buffer_.push(127&e|128),e>>=7;this.buffer_.push(1)}},jspb.BinaryEncoder.prototype.writeUnsignedVarint64=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(0<=e&&e<jspb.BinaryConstants.TWO_TO_64),jspb.utils.splitInt64(e),this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeSignedVarint64=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_63&&e<jspb.BinaryConstants.TWO_TO_63),jspb.utils.splitInt64(e),this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeZigzagVarint32=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_31&&e<jspb.BinaryConstants.TWO_TO_31),this.writeUnsignedVarint32((e<<1^e>>31)>>>0)},jspb.BinaryEncoder.prototype.writeZigzagVarint64=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_63&&e<jspb.BinaryConstants.TWO_TO_63),jspb.utils.splitZigzag64(e),this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeZigzagVarint64String=function(e){this.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(e))},jspb.BinaryEncoder.prototype.writeZigzagVarintHash64=function(e){var t=this;jspb.utils.splitHash64(e),jspb.utils.toZigzag64(jspb.utils.split64Low,jspb.utils.split64High,(function(e,r){t.writeSplitVarint64(e>>>0,r>>>0)}))},jspb.BinaryEncoder.prototype.writeUint8=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(0<=e&&256>e),this.buffer_.push(e>>>0&255)},jspb.BinaryEncoder.prototype.writeUint16=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(0<=e&&65536>e),this.buffer_.push(e>>>0&255),this.buffer_.push(e>>>8&255)},jspb.BinaryEncoder.prototype.writeUint32=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(0<=e&&e<jspb.BinaryConstants.TWO_TO_32),this.buffer_.push(e>>>0&255),this.buffer_.push(e>>>8&255),this.buffer_.push(e>>>16&255),this.buffer_.push(e>>>24&255)},jspb.BinaryEncoder.prototype.writeUint64=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(0<=e&&e<jspb.BinaryConstants.TWO_TO_64),jspb.utils.splitUint64(e),this.writeUint32(jspb.utils.split64Low),this.writeUint32(jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeInt8=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(-128<=e&&128>e),this.buffer_.push(e>>>0&255)},jspb.BinaryEncoder.prototype.writeInt16=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(-32768<=e&&32768>e),this.buffer_.push(e>>>0&255),this.buffer_.push(e>>>8&255)},jspb.BinaryEncoder.prototype.writeInt32=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_31&&e<jspb.BinaryConstants.TWO_TO_31),this.buffer_.push(e>>>0&255),this.buffer_.push(e>>>8&255),this.buffer_.push(e>>>16&255),this.buffer_.push(e>>>24&255)},jspb.BinaryEncoder.prototype.writeInt64=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_63&&e<jspb.BinaryConstants.TWO_TO_63),jspb.utils.splitInt64(e),this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeInt64String=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(+e>=-jspb.BinaryConstants.TWO_TO_63&&+e<jspb.BinaryConstants.TWO_TO_63),jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(e)),this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeFloat=function(e){goog.asserts.assert(1/0===e||-1/0===e||isNaN(e)||e>=-jspb.BinaryConstants.FLOAT32_MAX&&e<=jspb.BinaryConstants.FLOAT32_MAX),jspb.utils.splitFloat32(e),this.writeUint32(jspb.utils.split64Low)},jspb.BinaryEncoder.prototype.writeDouble=function(e){goog.asserts.assert(1/0===e||-1/0===e||isNaN(e)||e>=-jspb.BinaryConstants.FLOAT64_MAX&&e<=jspb.BinaryConstants.FLOAT64_MAX),jspb.utils.splitFloat64(e),this.writeUint32(jspb.utils.split64Low),this.writeUint32(jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeBool=function(e){goog.asserts.assert("boolean"==typeof e||"number"==typeof e),this.buffer_.push(e?1:0)},jspb.BinaryEncoder.prototype.writeEnum=function(e){goog.asserts.assert(e==Math.floor(e)),goog.asserts.assert(e>=-jspb.BinaryConstants.TWO_TO_31&&e<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32(e)},jspb.BinaryEncoder.prototype.writeBytes=function(e){this.buffer_.push.apply(this.buffer_,e)},jspb.BinaryEncoder.prototype.writeVarintHash64=function(e){jspb.utils.splitHash64(e),this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeFixedHash64=function(e){jspb.utils.splitHash64(e),this.writeUint32(jspb.utils.split64Low),this.writeUint32(jspb.utils.split64High)},jspb.BinaryEncoder.prototype.writeString=function(e){for(var t=this.buffer_.length,r=0;r<e.length;r++){var o=e.charCodeAt(r);if(128>o)this.buffer_.push(o);else if(2048>o)this.buffer_.push(o>>6|192),this.buffer_.push(63&o|128);else if(65536>o)if(55296<=o&&56319>=o&&r+1<e.length){var n=e.charCodeAt(r+1);56320<=n&&57343>=n&&(o=1024*(o-55296)+n-56320+65536,this.buffer_.push(o>>18|240),this.buffer_.push(o>>12&63|128),this.buffer_.push(o>>6&63|128),this.buffer_.push(63&o|128),r++)}else this.buffer_.push(o>>12|224),this.buffer_.push(o>>6&63|128),this.buffer_.push(63&o|128)}return this.buffer_.length-t},jspb.BinaryWriter=function(){this.blocks_=[],this.totalLength_=0,this.encoder_=new jspb.BinaryEncoder,this.bookmarks_=[]},jspb.BinaryWriter.prototype.appendUint8Array_=function(e){var t=this.encoder_.end();this.blocks_.push(t),this.blocks_.push(e),this.totalLength_+=t.length+e.length},jspb.BinaryWriter.prototype.beginDelimited_=function(e){return this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),e=this.encoder_.end(),this.blocks_.push(e),this.totalLength_+=e.length,e.push(this.totalLength_),e},jspb.BinaryWriter.prototype.endDelimited_=function(e){var t=e.pop();for(t=this.totalLength_+this.encoder_.length()-t,goog.asserts.assert(0<=t);127<t;)e.push(127&t|128),t>>>=7,this.totalLength_++;e.push(t),this.totalLength_++},jspb.BinaryWriter.prototype.writeSerializedMessage=function(e,t,r){this.appendUint8Array_(e.subarray(t,r))},jspb.BinaryWriter.prototype.maybeWriteSerializedMessage=function(e,t,r){null!=e&&null!=t&&null!=r&&this.writeSerializedMessage(e,t,r)},jspb.BinaryWriter.prototype.reset=function(){this.blocks_=[],this.encoder_.end(),this.totalLength_=0,this.bookmarks_=[]},jspb.BinaryWriter.prototype.getResultBuffer=function(){goog.asserts.assert(0==this.bookmarks_.length);for(var e=new Uint8Array(this.totalLength_+this.encoder_.length()),t=this.blocks_,r=t.length,o=0,n=0;n<r;n++){var s=t[n];e.set(s,o),o+=s.length}return t=this.encoder_.end(),e.set(t,o),o+=t.length,goog.asserts.assert(o==e.length),this.blocks_=[e],e},jspb.BinaryWriter.prototype.getResultBase64String=function(e){return goog.crypt.base64.encodeByteArray(this.getResultBuffer(),e)},jspb.BinaryWriter.prototype.beginSubMessage=function(e){this.bookmarks_.push(this.beginDelimited_(e))},jspb.BinaryWriter.prototype.endSubMessage=function(){goog.asserts.assert(0<=this.bookmarks_.length),this.endDelimited_(this.bookmarks_.pop())},jspb.BinaryWriter.prototype.writeFieldHeader_=function(e,t){goog.asserts.assert(1<=e&&e==Math.floor(e)),this.encoder_.writeUnsignedVarint32(8*e+t)},jspb.BinaryWriter.prototype.writeAny=function(e,t,r){var o=jspb.BinaryConstants.FieldType;switch(e){case o.DOUBLE:this.writeDouble(t,r);break;case o.FLOAT:this.writeFloat(t,r);break;case o.INT64:this.writeInt64(t,r);break;case o.UINT64:this.writeUint64(t,r);break;case o.INT32:this.writeInt32(t,r);break;case o.FIXED64:this.writeFixed64(t,r);break;case o.FIXED32:this.writeFixed32(t,r);break;case o.BOOL:this.writeBool(t,r);break;case o.STRING:this.writeString(t,r);break;case o.GROUP:goog.asserts.fail("Group field type not supported in writeAny()");break;case o.MESSAGE:goog.asserts.fail("Message field type not supported in writeAny()");break;case o.BYTES:this.writeBytes(t,r);break;case o.UINT32:this.writeUint32(t,r);break;case o.ENUM:this.writeEnum(t,r);break;case o.SFIXED32:this.writeSfixed32(t,r);break;case o.SFIXED64:this.writeSfixed64(t,r);break;case o.SINT32:this.writeSint32(t,r);break;case o.SINT64:this.writeSint64(t,r);break;case o.FHASH64:this.writeFixedHash64(t,r);break;case o.VHASH64:this.writeVarintHash64(t,r);break;default:goog.asserts.fail("Invalid field type in writeAny()")}},jspb.BinaryWriter.prototype.writeUnsignedVarint32_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint32(t))},jspb.BinaryWriter.prototype.writeSignedVarint32_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(t))},jspb.BinaryWriter.prototype.writeUnsignedVarint64_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint64(t))},jspb.BinaryWriter.prototype.writeSignedVarint64_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint64(t))},jspb.BinaryWriter.prototype.writeZigzagVarint32_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint32(t))},jspb.BinaryWriter.prototype.writeZigzagVarint64_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64(t))},jspb.BinaryWriter.prototype.writeZigzagVarint64String_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64String(t))},jspb.BinaryWriter.prototype.writeZigzagVarintHash64_=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarintHash64(t))},jspb.BinaryWriter.prototype.writeInt32=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_31&&t<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(e,t))},jspb.BinaryWriter.prototype.writeInt32String=function(e,t){null!=t&&(t=parseInt(t,10),goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_31&&t<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(e,t))},jspb.BinaryWriter.prototype.writeInt64=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_63&&t<jspb.BinaryConstants.TWO_TO_63),this.writeSignedVarint64_(e,t))},jspb.BinaryWriter.prototype.writeInt64String=function(e,t){null!=t&&(t=jspb.arith.Int64.fromString(t),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(t.lo,t.hi))},jspb.BinaryWriter.prototype.writeUint32=function(e,t){null!=t&&(goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(e,t))},jspb.BinaryWriter.prototype.writeUint32String=function(e,t){null!=t&&(t=parseInt(t,10),goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(e,t))},jspb.BinaryWriter.prototype.writeUint64=function(e,t){null!=t&&(goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_64),this.writeUnsignedVarint64_(e,t))},jspb.BinaryWriter.prototype.writeUint64String=function(e,t){null!=t&&(t=jspb.arith.UInt64.fromString(t),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(t.lo,t.hi))},jspb.BinaryWriter.prototype.writeSint32=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_31&&t<jspb.BinaryConstants.TWO_TO_31),this.writeZigzagVarint32_(e,t))},jspb.BinaryWriter.prototype.writeSint64=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_63&&t<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64_(e,t))},jspb.BinaryWriter.prototype.writeSintHash64=function(e,t){null!=t&&this.writeZigzagVarintHash64_(e,t)},jspb.BinaryWriter.prototype.writeSint64String=function(e,t){null!=t&&this.writeZigzagVarint64String_(e,t)},jspb.BinaryWriter.prototype.writeFixed32=function(e,t){null!=t&&(goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_32),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeUint32(t))},jspb.BinaryWriter.prototype.writeFixed64=function(e,t){null!=t&&(goog.asserts.assert(0<=t&&t<jspb.BinaryConstants.TWO_TO_64),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeUint64(t))},jspb.BinaryWriter.prototype.writeFixed64String=function(e,t){null!=t&&(t=jspb.arith.UInt64.fromString(t),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(t.lo,t.hi))},jspb.BinaryWriter.prototype.writeSfixed32=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_31&&t<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeInt32(t))},jspb.BinaryWriter.prototype.writeSfixed64=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_63&&t<jspb.BinaryConstants.TWO_TO_63),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeInt64(t))},jspb.BinaryWriter.prototype.writeSfixed64String=function(e,t){null!=t&&(t=jspb.arith.Int64.fromString(t),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(t.lo,t.hi))},jspb.BinaryWriter.prototype.writeFloat=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeFloat(t))},jspb.BinaryWriter.prototype.writeDouble=function(e,t){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeDouble(t))},jspb.BinaryWriter.prototype.writeBool=function(e,t){null!=t&&(goog.asserts.assert("boolean"==typeof t||"number"==typeof t),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeBool(t))},jspb.BinaryWriter.prototype.writeEnum=function(e,t){null!=t&&(goog.asserts.assert(t>=-jspb.BinaryConstants.TWO_TO_31&&t<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(t))},jspb.BinaryWriter.prototype.writeString=function(e,t){null!=t&&(e=this.beginDelimited_(e),this.encoder_.writeString(t),this.endDelimited_(e))},jspb.BinaryWriter.prototype.writeBytes=function(e,t){null!=t&&(t=jspb.utils.byteSourceToUint8Array(t),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(t.length),this.appendUint8Array_(t))},jspb.BinaryWriter.prototype.writeMessage=function(e,t,r){null!=t&&(e=this.beginDelimited_(e),r(t,this),this.endDelimited_(e))},jspb.BinaryWriter.prototype.writeMessageSet=function(e,t,r){null!=t&&(this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.START_GROUP),this.writeFieldHeader_(2,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(e),e=this.beginDelimited_(3),r(t,this),this.endDelimited_(e),this.writeFieldHeader_(1,jspb.BinaryConstants.WireType.END_GROUP))},jspb.BinaryWriter.prototype.writeGroup=function(e,t,r){null!=t&&(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.START_GROUP),r(t,this),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.END_GROUP))},jspb.BinaryWriter.prototype.writeFixedHash64=function(e,t){null!=t&&(goog.asserts.assert(8==t.length),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeFixedHash64(t))},jspb.BinaryWriter.prototype.writeVarintHash64=function(e,t){null!=t&&(goog.asserts.assert(8==t.length),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeVarintHash64(t))},jspb.BinaryWriter.prototype.writeSplitFixed64=function(e,t,r){this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeSplitFixed64(t,r)},jspb.BinaryWriter.prototype.writeSplitVarint64=function(e,t,r){this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSplitVarint64(t,r)},jspb.BinaryWriter.prototype.writeSplitZigzagVarint64=function(e,t,r){this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.VARINT);var o=this.encoder_;jspb.utils.toZigzag64(t,r,(function(e,t){o.writeSplitVarint64(e>>>0,t>>>0)}))},jspb.BinaryWriter.prototype.writeRepeatedInt32=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeSignedVarint32_(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedInt32String=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeInt32String(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedInt64=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeSignedVarint64_(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedSplitFixed64=function(e,t,r,o){if(null!=t)for(var n=0;n<t.length;n++)this.writeSplitFixed64(e,r(t[n]),o(t[n]))},jspb.BinaryWriter.prototype.writeRepeatedSplitVarint64=function(e,t,r,o){if(null!=t)for(var n=0;n<t.length;n++)this.writeSplitVarint64(e,r(t[n]),o(t[n]))},jspb.BinaryWriter.prototype.writeRepeatedSplitZigzagVarint64=function(e,t,r,o){if(null!=t)for(var n=0;n<t.length;n++)this.writeSplitZigzagVarint64(e,r(t[n]),o(t[n]))},jspb.BinaryWriter.prototype.writeRepeatedInt64String=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeInt64String(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedUint32=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeUnsignedVarint32_(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedUint32String=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeUint32String(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedUint64=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeUnsignedVarint64_(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedUint64String=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeUint64String(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedSint32=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeZigzagVarint32_(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedSint64=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeZigzagVarint64_(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedSint64String=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeZigzagVarint64String_(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedSintHash64=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeZigzagVarintHash64_(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedFixed32=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeFixed32(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedFixed64=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeFixed64(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedFixed64String=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeFixed64String(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedSfixed32=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeSfixed32(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedSfixed64=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeSfixed64(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedSfixed64String=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeSfixed64String(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedFloat=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeFloat(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedDouble=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeDouble(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedBool=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeBool(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedEnum=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeEnum(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedString=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeString(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedBytes=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeBytes(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedMessage=function(e,t,r){if(null!=t)for(var o=0;o<t.length;o++){var n=this.beginDelimited_(e);r(t[o],this),this.endDelimited_(n)}},jspb.BinaryWriter.prototype.writeRepeatedGroup=function(e,t,r){if(null!=t)for(var o=0;o<t.length;o++)this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.START_GROUP),r(t[o],this),this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.END_GROUP)},jspb.BinaryWriter.prototype.writeRepeatedFixedHash64=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeFixedHash64(e,t[r])},jspb.BinaryWriter.prototype.writeRepeatedVarintHash64=function(e,t){if(null!=t)for(var r=0;r<t.length;r++)this.writeVarintHash64(e,t[r])},jspb.BinaryWriter.prototype.writePackedInt32=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++)this.encoder_.writeSignedVarint32(t[r]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedInt32String=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++)this.encoder_.writeSignedVarint32(parseInt(t[r],10));this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedInt64=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++)this.encoder_.writeSignedVarint64(t[r]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSplitFixed64=function(e,t,r,o){if(null!=t){e=this.beginDelimited_(e);for(var n=0;n<t.length;n++)this.encoder_.writeSplitFixed64(r(t[n]),o(t[n]));this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSplitVarint64=function(e,t,r,o){if(null!=t){e=this.beginDelimited_(e);for(var n=0;n<t.length;n++)this.encoder_.writeSplitVarint64(r(t[n]),o(t[n]));this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSplitZigzagVarint64=function(e,t,r,o){if(null!=t){e=this.beginDelimited_(e);for(var n=this.encoder_,s=0;s<t.length;s++)jspb.utils.toZigzag64(r(t[s]),o(t[s]),(function(e,t){n.writeSplitVarint64(e>>>0,t>>>0)}));this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedInt64String=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++){var o=jspb.arith.Int64.fromString(t[r]);this.encoder_.writeSplitVarint64(o.lo,o.hi)}this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedUint32=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++)this.encoder_.writeUnsignedVarint32(t[r]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedUint32String=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++)this.encoder_.writeUnsignedVarint32(parseInt(t[r],10));this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedUint64=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++)this.encoder_.writeUnsignedVarint64(t[r]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedUint64String=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++){var o=jspb.arith.UInt64.fromString(t[r]);this.encoder_.writeSplitVarint64(o.lo,o.hi)}this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSint32=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++)this.encoder_.writeZigzagVarint32(t[r]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSint64=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++)this.encoder_.writeZigzagVarint64(t[r]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSint64String=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++)this.encoder_.writeZigzagVarintHash64(jspb.utils.decimalStringToHash64(t[r]));this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedSintHash64=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++)this.encoder_.writeZigzagVarintHash64(t[r]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedFixed32=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*t.length),e=0;e<t.length;e++)this.encoder_.writeUint32(t[e])},jspb.BinaryWriter.prototype.writePackedFixed64=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*t.length),e=0;e<t.length;e++)this.encoder_.writeUint64(t[e])},jspb.BinaryWriter.prototype.writePackedFixed64String=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*t.length),e=0;e<t.length;e++){var r=jspb.arith.UInt64.fromString(t[e]);this.encoder_.writeSplitFixed64(r.lo,r.hi)}},jspb.BinaryWriter.prototype.writePackedSfixed32=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*t.length),e=0;e<t.length;e++)this.encoder_.writeInt32(t[e])},jspb.BinaryWriter.prototype.writePackedSfixed64=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*t.length),e=0;e<t.length;e++)this.encoder_.writeInt64(t[e])},jspb.BinaryWriter.prototype.writePackedSfixed64String=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*t.length),e=0;e<t.length;e++)this.encoder_.writeInt64String(t[e])},jspb.BinaryWriter.prototype.writePackedFloat=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(4*t.length),e=0;e<t.length;e++)this.encoder_.writeFloat(t[e])},jspb.BinaryWriter.prototype.writePackedDouble=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*t.length),e=0;e<t.length;e++)this.encoder_.writeDouble(t[e])},jspb.BinaryWriter.prototype.writePackedBool=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(t.length),e=0;e<t.length;e++)this.encoder_.writeBool(t[e])},jspb.BinaryWriter.prototype.writePackedEnum=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++)this.encoder_.writeEnum(t[r]);this.endDelimited_(e)}},jspb.BinaryWriter.prototype.writePackedFixedHash64=function(e,t){if(null!=t&&t.length)for(this.writeFieldHeader_(e,jspb.BinaryConstants.WireType.DELIMITED),this.encoder_.writeUnsignedVarint32(8*t.length),e=0;e<t.length;e++)this.encoder_.writeFixedHash64(t[e])},jspb.BinaryWriter.prototype.writePackedVarintHash64=function(e,t){if(null!=t&&t.length){e=this.beginDelimited_(e);for(var r=0;r<t.length;r++)this.encoder_.writeVarintHash64(t[r]);this.endDelimited_(e)}},jspb.Export={},exports.Map=jspb.Map,exports.Message=jspb.Message,exports.BinaryReader=jspb.BinaryReader,exports.BinaryWriter=jspb.BinaryWriter,exports.ExtensionFieldInfo=jspb.ExtensionFieldInfo,exports.ExtensionFieldBinaryInfo=jspb.ExtensionFieldBinaryInfo,exports.exportSymbol=goog.exportSymbol,exports.inherits=goog.inherits,exports.object={extend:goog.object.extend},exports.typeOf=goog.typeOf}).call(this,__webpack_require__(6),__webpack_require__(0).Buffer)},function(e,t,r){var o;!function(t,n){var s={};!function(e){"use strict";e.__esModule=!0,e.digestLength=32,e.blockSize=64;var t=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]);function r(e,r,o,n,s){for(var i,a,u,g,l,p,c,h,d,f,b,y,m;s>=64;){for(i=r[0],a=r[1],u=r[2],g=r[3],l=r[4],p=r[5],c=r[6],h=r[7],f=0;f<16;f++)b=n+4*f,e[f]=(255&o[b])<<24|(255&o[b+1])<<16|(255&o[b+2])<<8|255&o[b+3];for(f=16;f<64;f++)y=((d=e[f-2])>>>17|d<<15)^(d>>>19|d<<13)^d>>>10,m=((d=e[f-15])>>>7|d<<25)^(d>>>18|d<<14)^d>>>3,e[f]=(y+e[f-7]|0)+(m+e[f-16]|0);for(f=0;f<64;f++)y=(((l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))+(l&p^~l&c)|0)+(h+(t[f]+e[f]|0)|0)|0,m=((i>>>2|i<<30)^(i>>>13|i<<19)^(i>>>22|i<<10))+(i&a^i&u^a&u)|0,h=c,c=p,p=l,l=g+y|0,g=u,u=a,a=i,i=y+m|0;r[0]+=i,r[1]+=a,r[2]+=u,r[3]+=g,r[4]+=l,r[5]+=p,r[6]+=c,r[7]+=h,n+=64,s-=64}return n}var o=function(){function t(){this.digestLength=e.digestLength,this.blockSize=e.blockSize,this.state=new Int32Array(8),this.temp=new Int32Array(64),this.buffer=new Uint8Array(128),this.bufferLength=0,this.bytesHashed=0,this.finished=!1,this.reset()}return t.prototype.reset=function(){return this.state[0]=1779033703,this.state[1]=3144134277,this.state[2]=1013904242,this.state[3]=2773480762,this.state[4]=1359893119,this.state[5]=2600822924,this.state[6]=528734635,this.state[7]=1541459225,this.bufferLength=0,this.bytesHashed=0,this.finished=!1,this},t.prototype.clean=function(){for(var e=0;e<this.buffer.length;e++)this.buffer[e]=0;for(e=0;e<this.temp.length;e++)this.temp[e]=0;this.reset()},t.prototype.update=function(e,t){if(void 0===t&&(t=e.length),this.finished)throw new Error("SHA256: can't update because hash was finished.");var o=0;if(this.bytesHashed+=t,this.bufferLength>0){for(;this.bufferLength<64&&t>0;)this.buffer[this.bufferLength++]=e[o++],t--;64===this.bufferLength&&(r(this.temp,this.state,this.buffer,0,64),this.bufferLength=0)}for(t>=64&&(o=r(this.temp,this.state,e,o,t),t%=64);t>0;)this.buffer[this.bufferLength++]=e[o++],t--;return this},t.prototype.finish=function(e){if(!this.finished){var t=this.bytesHashed,o=this.bufferLength,n=t/536870912|0,s=t<<3,i=t%64<56?64:128;this.buffer[o]=128;for(var a=o+1;a<i-8;a++)this.buffer[a]=0;this.buffer[i-8]=n>>>24&255,this.buffer[i-7]=n>>>16&255,this.buffer[i-6]=n>>>8&255,this.buffer[i-5]=n>>>0&255,this.buffer[i-4]=s>>>24&255,this.buffer[i-3]=s>>>16&255,this.buffer[i-2]=s>>>8&255,this.buffer[i-1]=s>>>0&255,r(this.temp,this.state,this.buffer,0,i),this.finished=!0}for(a=0;a<8;a++)e[4*a+0]=this.state[a]>>>24&255,e[4*a+1]=this.state[a]>>>16&255,e[4*a+2]=this.state[a]>>>8&255,e[4*a+3]=this.state[a]>>>0&255;return this},t.prototype.digest=function(){var e=new Uint8Array(this.digestLength);return this.finish(e),e},t.prototype._saveState=function(e){for(var t=0;t<this.state.length;t++)e[t]=this.state[t]},t.prototype._restoreState=function(e,t){for(var r=0;r<this.state.length;r++)this.state[r]=e[r];this.bytesHashed=t,this.finished=!1,this.bufferLength=0},t}();e.Hash=o;var n=function(){function e(e){this.inner=new o,this.outer=new o,this.blockSize=this.inner.blockSize,this.digestLength=this.inner.digestLength;var t=new Uint8Array(this.blockSize);if(e.length>this.blockSize)(new o).update(e).finish(t).clean();else for(var r=0;r<e.length;r++)t[r]=e[r];for(r=0;r<t.length;r++)t[r]^=54;this.inner.update(t);for(r=0;r<t.length;r++)t[r]^=106;this.outer.update(t),this.istate=new Uint32Array(8),this.ostate=new Uint32Array(8),this.inner._saveState(this.istate),this.outer._saveState(this.ostate);for(r=0;r<t.length;r++)t[r]=0}return e.prototype.reset=function(){return this.inner._restoreState(this.istate,this.inner.blockSize),this.outer._restoreState(this.ostate,this.outer.blockSize),this},e.prototype.clean=function(){for(var e=0;e<this.istate.length;e++)this.ostate[e]=this.istate[e]=0;this.inner.clean(),this.outer.clean()},e.prototype.update=function(e){return this.inner.update(e),this},e.prototype.finish=function(e){return this.outer.finished?this.outer.finish(e):(this.inner.finish(e),this.outer.update(e,this.digestLength).finish(e)),this},e.prototype.digest=function(){var e=new Uint8Array(this.digestLength);return this.finish(e),e},e}();function s(e){var t=(new o).update(e),r=t.digest();return t.clean(),r}function i(e,t){var r=new n(e).update(t),o=r.digest();return r.clean(),o}function a(e,t,r,o){var n=o[0];if(0===n)throw new Error("hkdf: cannot expand more");t.reset(),n>1&&t.update(e),r&&t.update(r),t.update(o),t.finish(e),o[0]++}e.HMAC=n,e.hash=s,e.default=s,e.hmac=i;var u=new Uint8Array(e.digestLength);e.hkdf=function(e,t,r,o){void 0===t&&(t=u),void 0===o&&(o=32);for(var s=new Uint8Array([1]),g=i(t,e),l=new n(g),p=new Uint8Array(l.digestLength),c=p.length,h=new Uint8Array(o),d=0;d<o;d++)c===p.length&&(a(p,l,r,s),c=0),h[d]=p[c++];return l.clean(),p.fill(0),s.fill(0),h},e.pbkdf2=function(e,t,r,o){for(var s=new n(e),i=s.digestLength,a=new Uint8Array(4),u=new Uint8Array(i),g=new Uint8Array(i),l=new Uint8Array(o),p=0;p*i<o;p++){var c=p+1;a[0]=c>>>24&255,a[1]=c>>>16&255,a[2]=c>>>8&255,a[3]=c>>>0&255,s.reset(),s.update(t),s.update(a),s.finish(g);for(var h=0;h<i;h++)u[h]=g[h];for(h=2;h<=r;h++){s.reset(),s.update(g).finish(g);for(var d=0;d<i;d++)u[d]^=g[d]}for(h=0;h<i&&p*i+h<o;h++)l[p*i+h]=u[h]}for(p=0;p<i;p++)u[p]=g[p]=0;for(p=0;p<4;p++)a[p]=0;return s.clean(),l}}(s);var i=s.default;for(var a in s)i[a]=s[a];"object"==typeof e.exports?e.exports=i:void 0===(o=function(){return i}.call(s,r,s,e))||(e.exports=o)}()},function(e,t,r){var o,n;!function(s,i){"use strict";void 0===(n="function"==typeof(o=function(){var e=function(){},t="undefined"!=typeof window&&void 0!==window.navigator&&/Trident\/|MSIE /.test(window.navigator.userAgent),r=["trace","debug","info","warn","error"];function o(e,t){var r=e[t];if("function"==typeof r.bind)return r.bind(e);try{return Function.prototype.bind.call(r,e)}catch(t){return function(){return Function.prototype.apply.apply(r,[e,arguments])}}}function n(){console.log&&(console.log.apply?console.log.apply(console,arguments):Function.prototype.apply.apply(console.log,[console,arguments])),console.trace&&console.trace()}function s(r){return"debug"===r&&(r="log"),"undefined"!=typeof console&&("trace"===r&&t?n:void 0!==console[r]?o(console,r):void 0!==console.log?o(console,"log"):e)}function i(t,o){for(var n=0;n<r.length;n++){var s=r[n];this[s]=n<t?e:this.methodFactory(s,t,o)}this.log=this.debug}function a(e,t,r){return function(){"undefined"!=typeof console&&(i.call(this,t,r),this[e].apply(this,arguments))}}function u(e,t,r){return s(e)||a.apply(this,arguments)}function g(e,t,o){var n,s=this,a="loglevel";function g(){var e;if("undefined"!=typeof window){try{e=window.localStorage[a]}catch(e){}if(void 0===e)try{var t=window.document.cookie,r=t.indexOf(encodeURIComponent(a)+"=");-1!==r&&(e=/^([^;]+)/.exec(t.slice(r))[1])}catch(e){}return void 0===s.levels[e]&&(e=void 0),e}}e&&(a+=":"+e),s.name=e,s.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},s.methodFactory=o||u,s.getLevel=function(){return n},s.setLevel=function(t,o){if("string"==typeof t&&void 0!==s.levels[t.toUpperCase()]&&(t=s.levels[t.toUpperCase()]),!("number"==typeof t&&t>=0&&t<=s.levels.SILENT))throw"log.setLevel() called with invalid level: "+t;if(n=t,!1!==o&&function(e){var t=(r[e]||"silent").toUpperCase();if("undefined"!=typeof window){try{return void(window.localStorage[a]=t)}catch(e){}try{window.document.cookie=encodeURIComponent(a)+"="+t+";"}catch(e){}}}(t),i.call(s,t,e),"undefined"==typeof console&&t<s.levels.SILENT)return"No console available for logging"},s.setDefaultLevel=function(e){g()||s.setLevel(e,!1)},s.enableAll=function(e){s.setLevel(s.levels.TRACE,e)},s.disableAll=function(e){s.setLevel(s.levels.SILENT,e)};var l=g();null==l&&(l=null==t?"WARN":t),s.setLevel(l,!1)}var l=new g,p={};l.getLogger=function(e){if("string"!=typeof e||""===e)throw new TypeError("You must supply a name when creating a logger.");var t=p[e];return t||(t=p[e]=new g(e,l.getLevel(),l.methodFactory)),t};var c="undefined"!=typeof window?window.log:void 0;return l.noConflict=function(){return"undefined"!=typeof window&&window.log===l&&(window.log=c),l},l.getLoggers=function(){return p},l})?o.call(t,r,t,e):o)||(e.exports=n)}()},function(e,t,r){var o=r(9),n=o,s=Function("return this")();n.exportSymbol("proto.buckets.pb.InitReply",null,s),n.exportSymbol("proto.buckets.pb.InitRequest",null,s),n.exportSymbol("proto.buckets.pb.LinksReply",null,s),n.exportSymbol("proto.buckets.pb.LinksRequest",null,s),n.exportSymbol("proto.buckets.pb.ListPathReply",null,s),n.exportSymbol("proto.buckets.pb.ListPathReply.Item",null,s),n.exportSymbol("proto.buckets.pb.ListPathRequest",null,s),n.exportSymbol("proto.buckets.pb.ListReply",null,s),n.exportSymbol("proto.buckets.pb.ListRequest",null,s),n.exportSymbol("proto.buckets.pb.PullPathReply",null,s),n.exportSymbol("proto.buckets.pb.PullPathRequest",null,s),n.exportSymbol("proto.buckets.pb.PushPathReply",null,s),n.exportSymbol("proto.buckets.pb.PushPathReply.Event",null,s),n.exportSymbol("proto.buckets.pb.PushPathReply.PayloadCase",null,s),n.exportSymbol("proto.buckets.pb.PushPathRequest",null,s),n.exportSymbol("proto.buckets.pb.PushPathRequest.Header",null,s),n.exportSymbol("proto.buckets.pb.PushPathRequest.PayloadCase",null,s),n.exportSymbol("proto.buckets.pb.RemovePathReply",null,s),n.exportSymbol("proto.buckets.pb.RemovePathRequest",null,s),n.exportSymbol("proto.buckets.pb.RemoveReply",null,s),n.exportSymbol("proto.buckets.pb.RemoveRequest",null,s),n.exportSymbol("proto.buckets.pb.Root",null,s),proto.buckets.pb.InitRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.InitRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.InitRequest.displayName="proto.buckets.pb.InitRequest"),proto.buckets.pb.InitReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.InitReply,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.InitReply.displayName="proto.buckets.pb.InitReply"),proto.buckets.pb.LinksRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.LinksRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.LinksRequest.displayName="proto.buckets.pb.LinksRequest"),proto.buckets.pb.LinksReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.LinksReply,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.LinksReply.displayName="proto.buckets.pb.LinksReply"),proto.buckets.pb.Root=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.Root,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.Root.displayName="proto.buckets.pb.Root"),proto.buckets.pb.ListRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.ListRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.ListRequest.displayName="proto.buckets.pb.ListRequest"),proto.buckets.pb.ListReply=function(e){o.Message.initialize(this,e,0,-1,proto.buckets.pb.ListReply.repeatedFields_,null)},n.inherits(proto.buckets.pb.ListReply,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.ListReply.displayName="proto.buckets.pb.ListReply"),proto.buckets.pb.ListPathRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.ListPathRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.ListPathRequest.displayName="proto.buckets.pb.ListPathRequest"),proto.buckets.pb.ListPathReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.ListPathReply,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.ListPathReply.displayName="proto.buckets.pb.ListPathReply"),proto.buckets.pb.ListPathReply.Item=function(e){o.Message.initialize(this,e,0,-1,proto.buckets.pb.ListPathReply.Item.repeatedFields_,null)},n.inherits(proto.buckets.pb.ListPathReply.Item,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.ListPathReply.Item.displayName="proto.buckets.pb.ListPathReply.Item"),proto.buckets.pb.PushPathRequest=function(e){o.Message.initialize(this,e,0,-1,null,proto.buckets.pb.PushPathRequest.oneofGroups_)},n.inherits(proto.buckets.pb.PushPathRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.PushPathRequest.displayName="proto.buckets.pb.PushPathRequest"),proto.buckets.pb.PushPathRequest.Header=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.PushPathRequest.Header,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.PushPathRequest.Header.displayName="proto.buckets.pb.PushPathRequest.Header"),proto.buckets.pb.PushPathReply=function(e){o.Message.initialize(this,e,0,-1,null,proto.buckets.pb.PushPathReply.oneofGroups_)},n.inherits(proto.buckets.pb.PushPathReply,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.PushPathReply.displayName="proto.buckets.pb.PushPathReply"),proto.buckets.pb.PushPathReply.Event=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.PushPathReply.Event,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.PushPathReply.Event.displayName="proto.buckets.pb.PushPathReply.Event"),proto.buckets.pb.PullPathRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.PullPathRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.PullPathRequest.displayName="proto.buckets.pb.PullPathRequest"),proto.buckets.pb.PullPathReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.PullPathReply,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.PullPathReply.displayName="proto.buckets.pb.PullPathReply"),proto.buckets.pb.RemoveRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.RemoveRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.RemoveRequest.displayName="proto.buckets.pb.RemoveRequest"),proto.buckets.pb.RemoveReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.RemoveReply,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.RemoveReply.displayName="proto.buckets.pb.RemoveReply"),proto.buckets.pb.RemovePathRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.RemovePathRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.RemovePathRequest.displayName="proto.buckets.pb.RemovePathRequest"),proto.buckets.pb.RemovePathReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.buckets.pb.RemovePathReply,o.Message),n.DEBUG&&!COMPILED&&(proto.buckets.pb.RemovePathReply.displayName="proto.buckets.pb.RemovePathReply"),o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.InitRequest.prototype.toObject=function(e){return proto.buckets.pb.InitRequest.toObject(e,this)},proto.buckets.pb.InitRequest.toObject=function(e,t){var r={name:o.Message.getFieldWithDefault(t,1,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.InitRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.InitRequest;return proto.buckets.pb.InitRequest.deserializeBinaryFromReader(r,t)},proto.buckets.pb.InitRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setName(r);break;default:t.skipField()}}return e},proto.buckets.pb.InitRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.InitRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.InitRequest.serializeBinaryToWriter=function(e,t){var r;(r=e.getName()).length>0&&t.writeString(1,r)},proto.buckets.pb.InitRequest.prototype.getName=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.buckets.pb.InitRequest.prototype.setName=function(e){return o.Message.setProto3StringField(this,1,e)},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.InitReply.prototype.toObject=function(e){return proto.buckets.pb.InitReply.toObject(e,this)},proto.buckets.pb.InitReply.toObject=function(e,t){var r,o={root:(r=t.getRoot())&&proto.buckets.pb.Root.toObject(e,r),links:(r=t.getLinks())&&proto.buckets.pb.LinksReply.toObject(e,r)};return e&&(o.$jspbMessageInstance=t),o}),proto.buckets.pb.InitReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.InitReply;return proto.buckets.pb.InitReply.deserializeBinaryFromReader(r,t)},proto.buckets.pb.InitReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=new proto.buckets.pb.Root;t.readMessage(r,proto.buckets.pb.Root.deserializeBinaryFromReader),e.setRoot(r);break;case 2:r=new proto.buckets.pb.LinksReply;t.readMessage(r,proto.buckets.pb.LinksReply.deserializeBinaryFromReader),e.setLinks(r);break;default:t.skipField()}}return e},proto.buckets.pb.InitReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.InitReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.InitReply.serializeBinaryToWriter=function(e,t){var r=void 0;null!=(r=e.getRoot())&&t.writeMessage(1,r,proto.buckets.pb.Root.serializeBinaryToWriter),null!=(r=e.getLinks())&&t.writeMessage(2,r,proto.buckets.pb.LinksReply.serializeBinaryToWriter)},proto.buckets.pb.InitReply.prototype.getRoot=function(){return o.Message.getWrapperField(this,proto.buckets.pb.Root,1)},proto.buckets.pb.InitReply.prototype.setRoot=function(e){return o.Message.setWrapperField(this,1,e)},proto.buckets.pb.InitReply.prototype.clearRoot=function(){return this.setRoot(void 0)},proto.buckets.pb.InitReply.prototype.hasRoot=function(){return null!=o.Message.getField(this,1)},proto.buckets.pb.InitReply.prototype.getLinks=function(){return o.Message.getWrapperField(this,proto.buckets.pb.LinksReply,2)},proto.buckets.pb.InitReply.prototype.setLinks=function(e){return o.Message.setWrapperField(this,2,e)},proto.buckets.pb.InitReply.prototype.clearLinks=function(){return this.setLinks(void 0)},proto.buckets.pb.InitReply.prototype.hasLinks=function(){return null!=o.Message.getField(this,2)},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.LinksRequest.prototype.toObject=function(e){return proto.buckets.pb.LinksRequest.toObject(e,this)},proto.buckets.pb.LinksRequest.toObject=function(e,t){var r={key:o.Message.getFieldWithDefault(t,1,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.LinksRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.LinksRequest;return proto.buckets.pb.LinksRequest.deserializeBinaryFromReader(r,t)},proto.buckets.pb.LinksRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setKey(r);break;default:t.skipField()}}return e},proto.buckets.pb.LinksRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.LinksRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.LinksRequest.serializeBinaryToWriter=function(e,t){var r;(r=e.getKey()).length>0&&t.writeString(1,r)},proto.buckets.pb.LinksRequest.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.buckets.pb.LinksRequest.prototype.setKey=function(e){return o.Message.setProto3StringField(this,1,e)},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.LinksReply.prototype.toObject=function(e){return proto.buckets.pb.LinksReply.toObject(e,this)},proto.buckets.pb.LinksReply.toObject=function(e,t){var r={url:o.Message.getFieldWithDefault(t,1,""),www:o.Message.getFieldWithDefault(t,2,""),ipns:o.Message.getFieldWithDefault(t,3,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.LinksReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.LinksReply;return proto.buckets.pb.LinksReply.deserializeBinaryFromReader(r,t)},proto.buckets.pb.LinksReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setUrl(r);break;case 2:r=t.readString();e.setWww(r);break;case 3:r=t.readString();e.setIpns(r);break;default:t.skipField()}}return e},proto.buckets.pb.LinksReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.LinksReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.LinksReply.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getUrl()).length>0&&t.writeString(1,r),(r=e.getWww()).length>0&&t.writeString(2,r),(r=e.getIpns()).length>0&&t.writeString(3,r)},proto.buckets.pb.LinksReply.prototype.getUrl=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.buckets.pb.LinksReply.prototype.setUrl=function(e){return o.Message.setProto3StringField(this,1,e)},proto.buckets.pb.LinksReply.prototype.getWww=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.buckets.pb.LinksReply.prototype.setWww=function(e){return o.Message.setProto3StringField(this,2,e)},proto.buckets.pb.LinksReply.prototype.getIpns=function(){return o.Message.getFieldWithDefault(this,3,"")},proto.buckets.pb.LinksReply.prototype.setIpns=function(e){return o.Message.setProto3StringField(this,3,e)},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.Root.prototype.toObject=function(e){return proto.buckets.pb.Root.toObject(e,this)},proto.buckets.pb.Root.toObject=function(e,t){var r={key:o.Message.getFieldWithDefault(t,1,""),name:o.Message.getFieldWithDefault(t,2,""),path:o.Message.getFieldWithDefault(t,3,""),createdat:o.Message.getFieldWithDefault(t,4,0),updatedat:o.Message.getFieldWithDefault(t,5,0)};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.Root.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.Root;return proto.buckets.pb.Root.deserializeBinaryFromReader(r,t)},proto.buckets.pb.Root.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setKey(r);break;case 2:r=t.readString();e.setName(r);break;case 3:r=t.readString();e.setPath(r);break;case 4:r=t.readInt64();e.setCreatedat(r);break;case 5:r=t.readInt64();e.setUpdatedat(r);break;default:t.skipField()}}return e},proto.buckets.pb.Root.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.Root.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.Root.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getKey()).length>0&&t.writeString(1,r),(r=e.getName()).length>0&&t.writeString(2,r),(r=e.getPath()).length>0&&t.writeString(3,r),0!==(r=e.getCreatedat())&&t.writeInt64(4,r),0!==(r=e.getUpdatedat())&&t.writeInt64(5,r)},proto.buckets.pb.Root.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.buckets.pb.Root.prototype.setKey=function(e){return o.Message.setProto3StringField(this,1,e)},proto.buckets.pb.Root.prototype.getName=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.buckets.pb.Root.prototype.setName=function(e){return o.Message.setProto3StringField(this,2,e)},proto.buckets.pb.Root.prototype.getPath=function(){return o.Message.getFieldWithDefault(this,3,"")},proto.buckets.pb.Root.prototype.setPath=function(e){return o.Message.setProto3StringField(this,3,e)},proto.buckets.pb.Root.prototype.getCreatedat=function(){return o.Message.getFieldWithDefault(this,4,0)},proto.buckets.pb.Root.prototype.setCreatedat=function(e){return o.Message.setProto3IntField(this,4,e)},proto.buckets.pb.Root.prototype.getUpdatedat=function(){return o.Message.getFieldWithDefault(this,5,0)},proto.buckets.pb.Root.prototype.setUpdatedat=function(e){return o.Message.setProto3IntField(this,5,e)},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.ListRequest.prototype.toObject=function(e){return proto.buckets.pb.ListRequest.toObject(e,this)},proto.buckets.pb.ListRequest.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.ListRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.ListRequest;return proto.buckets.pb.ListRequest.deserializeBinaryFromReader(r,t)},proto.buckets.pb.ListRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.buckets.pb.ListRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.ListRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.ListRequest.serializeBinaryToWriter=function(e,t){},proto.buckets.pb.ListReply.repeatedFields_=[1],o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.ListReply.prototype.toObject=function(e){return proto.buckets.pb.ListReply.toObject(e,this)},proto.buckets.pb.ListReply.toObject=function(e,t){var r={rootsList:o.Message.toObjectList(t.getRootsList(),proto.buckets.pb.Root.toObject,e)};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.ListReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.ListReply;return proto.buckets.pb.ListReply.deserializeBinaryFromReader(r,t)},proto.buckets.pb.ListReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=new proto.buckets.pb.Root;t.readMessage(r,proto.buckets.pb.Root.deserializeBinaryFromReader),e.addRoots(r);break;default:t.skipField()}}return e},proto.buckets.pb.ListReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.ListReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.ListReply.serializeBinaryToWriter=function(e,t){var r;(r=e.getRootsList()).length>0&&t.writeRepeatedMessage(1,r,proto.buckets.pb.Root.serializeBinaryToWriter)},proto.buckets.pb.ListReply.prototype.getRootsList=function(){return o.Message.getRepeatedWrapperField(this,proto.buckets.pb.Root,1)},proto.buckets.pb.ListReply.prototype.setRootsList=function(e){return o.Message.setRepeatedWrapperField(this,1,e)},proto.buckets.pb.ListReply.prototype.addRoots=function(e,t){return o.Message.addToRepeatedWrapperField(this,1,e,proto.buckets.pb.Root,t)},proto.buckets.pb.ListReply.prototype.clearRootsList=function(){return this.setRootsList([])},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.ListPathRequest.prototype.toObject=function(e){return proto.buckets.pb.ListPathRequest.toObject(e,this)},proto.buckets.pb.ListPathRequest.toObject=function(e,t){var r={key:o.Message.getFieldWithDefault(t,1,""),path:o.Message.getFieldWithDefault(t,2,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.ListPathRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.ListPathRequest;return proto.buckets.pb.ListPathRequest.deserializeBinaryFromReader(r,t)},proto.buckets.pb.ListPathRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setKey(r);break;case 2:r=t.readString();e.setPath(r);break;default:t.skipField()}}return e},proto.buckets.pb.ListPathRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.ListPathRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.ListPathRequest.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getKey()).length>0&&t.writeString(1,r),(r=e.getPath()).length>0&&t.writeString(2,r)},proto.buckets.pb.ListPathRequest.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.buckets.pb.ListPathRequest.prototype.setKey=function(e){return o.Message.setProto3StringField(this,1,e)},proto.buckets.pb.ListPathRequest.prototype.getPath=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.buckets.pb.ListPathRequest.prototype.setPath=function(e){return o.Message.setProto3StringField(this,2,e)},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.ListPathReply.prototype.toObject=function(e){return proto.buckets.pb.ListPathReply.toObject(e,this)},proto.buckets.pb.ListPathReply.toObject=function(e,t){var r,o={item:(r=t.getItem())&&proto.buckets.pb.ListPathReply.Item.toObject(e,r),root:(r=t.getRoot())&&proto.buckets.pb.Root.toObject(e,r)};return e&&(o.$jspbMessageInstance=t),o}),proto.buckets.pb.ListPathReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.ListPathReply;return proto.buckets.pb.ListPathReply.deserializeBinaryFromReader(r,t)},proto.buckets.pb.ListPathReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=new proto.buckets.pb.ListPathReply.Item;t.readMessage(r,proto.buckets.pb.ListPathReply.Item.deserializeBinaryFromReader),e.setItem(r);break;case 2:r=new proto.buckets.pb.Root;t.readMessage(r,proto.buckets.pb.Root.deserializeBinaryFromReader),e.setRoot(r);break;default:t.skipField()}}return e},proto.buckets.pb.ListPathReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.ListPathReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.ListPathReply.serializeBinaryToWriter=function(e,t){var r=void 0;null!=(r=e.getItem())&&t.writeMessage(1,r,proto.buckets.pb.ListPathReply.Item.serializeBinaryToWriter),null!=(r=e.getRoot())&&t.writeMessage(2,r,proto.buckets.pb.Root.serializeBinaryToWriter)},proto.buckets.pb.ListPathReply.Item.repeatedFields_=[6],o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.ListPathReply.Item.prototype.toObject=function(e){return proto.buckets.pb.ListPathReply.Item.toObject(e,this)},proto.buckets.pb.ListPathReply.Item.toObject=function(e,t){var r={name:o.Message.getFieldWithDefault(t,2,""),path:o.Message.getFieldWithDefault(t,3,""),size:o.Message.getFieldWithDefault(t,4,0),isdir:o.Message.getBooleanFieldWithDefault(t,5,!1),itemsList:o.Message.toObjectList(t.getItemsList(),proto.buckets.pb.ListPathReply.Item.toObject,e)};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.ListPathReply.Item.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.ListPathReply.Item;return proto.buckets.pb.ListPathReply.Item.deserializeBinaryFromReader(r,t)},proto.buckets.pb.ListPathReply.Item.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 2:var r=t.readString();e.setName(r);break;case 3:r=t.readString();e.setPath(r);break;case 4:r=t.readInt64();e.setSize(r);break;case 5:r=t.readBool();e.setIsdir(r);break;case 6:r=new proto.buckets.pb.ListPathReply.Item;t.readMessage(r,proto.buckets.pb.ListPathReply.Item.deserializeBinaryFromReader),e.addItems(r);break;default:t.skipField()}}return e},proto.buckets.pb.ListPathReply.Item.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.ListPathReply.Item.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.ListPathReply.Item.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getName()).length>0&&t.writeString(2,r),(r=e.getPath()).length>0&&t.writeString(3,r),0!==(r=e.getSize())&&t.writeInt64(4,r),(r=e.getIsdir())&&t.writeBool(5,r),(r=e.getItemsList()).length>0&&t.writeRepeatedMessage(6,r,proto.buckets.pb.ListPathReply.Item.serializeBinaryToWriter)},proto.buckets.pb.ListPathReply.Item.prototype.getName=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.buckets.pb.ListPathReply.Item.prototype.setName=function(e){return o.Message.setProto3StringField(this,2,e)},proto.buckets.pb.ListPathReply.Item.prototype.getPath=function(){return o.Message.getFieldWithDefault(this,3,"")},proto.buckets.pb.ListPathReply.Item.prototype.setPath=function(e){return o.Message.setProto3StringField(this,3,e)},proto.buckets.pb.ListPathReply.Item.prototype.getSize=function(){return o.Message.getFieldWithDefault(this,4,0)},proto.buckets.pb.ListPathReply.Item.prototype.setSize=function(e){return o.Message.setProto3IntField(this,4,e)},proto.buckets.pb.ListPathReply.Item.prototype.getIsdir=function(){return o.Message.getBooleanFieldWithDefault(this,5,!1)},proto.buckets.pb.ListPathReply.Item.prototype.setIsdir=function(e){return o.Message.setProto3BooleanField(this,5,e)},proto.buckets.pb.ListPathReply.Item.prototype.getItemsList=function(){return o.Message.getRepeatedWrapperField(this,proto.buckets.pb.ListPathReply.Item,6)},proto.buckets.pb.ListPathReply.Item.prototype.setItemsList=function(e){return o.Message.setRepeatedWrapperField(this,6,e)},proto.buckets.pb.ListPathReply.Item.prototype.addItems=function(e,t){return o.Message.addToRepeatedWrapperField(this,6,e,proto.buckets.pb.ListPathReply.Item,t)},proto.buckets.pb.ListPathReply.Item.prototype.clearItemsList=function(){return this.setItemsList([])},proto.buckets.pb.ListPathReply.prototype.getItem=function(){return o.Message.getWrapperField(this,proto.buckets.pb.ListPathReply.Item,1)},proto.buckets.pb.ListPathReply.prototype.setItem=function(e){return o.Message.setWrapperField(this,1,e)},proto.buckets.pb.ListPathReply.prototype.clearItem=function(){return this.setItem(void 0)},proto.buckets.pb.ListPathReply.prototype.hasItem=function(){return null!=o.Message.getField(this,1)},proto.buckets.pb.ListPathReply.prototype.getRoot=function(){return o.Message.getWrapperField(this,proto.buckets.pb.Root,2)},proto.buckets.pb.ListPathReply.prototype.setRoot=function(e){return o.Message.setWrapperField(this,2,e)},proto.buckets.pb.ListPathReply.prototype.clearRoot=function(){return this.setRoot(void 0)},proto.buckets.pb.ListPathReply.prototype.hasRoot=function(){return null!=o.Message.getField(this,2)},proto.buckets.pb.PushPathRequest.oneofGroups_=[[1,2]],proto.buckets.pb.PushPathRequest.PayloadCase={PAYLOAD_NOT_SET:0,HEADER:1,CHUNK:2},proto.buckets.pb.PushPathRequest.prototype.getPayloadCase=function(){return o.Message.computeOneofCase(this,proto.buckets.pb.PushPathRequest.oneofGroups_[0])},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.PushPathRequest.prototype.toObject=function(e){return proto.buckets.pb.PushPathRequest.toObject(e,this)},proto.buckets.pb.PushPathRequest.toObject=function(e,t){var r,o={header:(r=t.getHeader())&&proto.buckets.pb.PushPathRequest.Header.toObject(e,r),chunk:t.getChunk_asB64()};return e&&(o.$jspbMessageInstance=t),o}),proto.buckets.pb.PushPathRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.PushPathRequest;return proto.buckets.pb.PushPathRequest.deserializeBinaryFromReader(r,t)},proto.buckets.pb.PushPathRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=new proto.buckets.pb.PushPathRequest.Header;t.readMessage(r,proto.buckets.pb.PushPathRequest.Header.deserializeBinaryFromReader),e.setHeader(r);break;case 2:r=t.readBytes();e.setChunk(r);break;default:t.skipField()}}return e},proto.buckets.pb.PushPathRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.PushPathRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.PushPathRequest.serializeBinaryToWriter=function(e,t){var r=void 0;null!=(r=e.getHeader())&&t.writeMessage(1,r,proto.buckets.pb.PushPathRequest.Header.serializeBinaryToWriter),null!=(r=o.Message.getField(e,2))&&t.writeBytes(2,r)},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.PushPathRequest.Header.prototype.toObject=function(e){return proto.buckets.pb.PushPathRequest.Header.toObject(e,this)},proto.buckets.pb.PushPathRequest.Header.toObject=function(e,t){var r={key:o.Message.getFieldWithDefault(t,1,""),path:o.Message.getFieldWithDefault(t,2,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.PushPathRequest.Header.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.PushPathRequest.Header;return proto.buckets.pb.PushPathRequest.Header.deserializeBinaryFromReader(r,t)},proto.buckets.pb.PushPathRequest.Header.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setKey(r);break;case 2:r=t.readString();e.setPath(r);break;default:t.skipField()}}return e},proto.buckets.pb.PushPathRequest.Header.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.PushPathRequest.Header.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.PushPathRequest.Header.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getKey()).length>0&&t.writeString(1,r),(r=e.getPath()).length>0&&t.writeString(2,r)},proto.buckets.pb.PushPathRequest.Header.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.buckets.pb.PushPathRequest.Header.prototype.setKey=function(e){return o.Message.setProto3StringField(this,1,e)},proto.buckets.pb.PushPathRequest.Header.prototype.getPath=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.buckets.pb.PushPathRequest.Header.prototype.setPath=function(e){return o.Message.setProto3StringField(this,2,e)},proto.buckets.pb.PushPathRequest.prototype.getHeader=function(){return o.Message.getWrapperField(this,proto.buckets.pb.PushPathRequest.Header,1)},proto.buckets.pb.PushPathRequest.prototype.setHeader=function(e){return o.Message.setOneofWrapperField(this,1,proto.buckets.pb.PushPathRequest.oneofGroups_[0],e)},proto.buckets.pb.PushPathRequest.prototype.clearHeader=function(){return this.setHeader(void 0)},proto.buckets.pb.PushPathRequest.prototype.hasHeader=function(){return null!=o.Message.getField(this,1)},proto.buckets.pb.PushPathRequest.prototype.getChunk=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.buckets.pb.PushPathRequest.prototype.getChunk_asB64=function(){return o.Message.bytesAsB64(this.getChunk())},proto.buckets.pb.PushPathRequest.prototype.getChunk_asU8=function(){return o.Message.bytesAsU8(this.getChunk())},proto.buckets.pb.PushPathRequest.prototype.setChunk=function(e){return o.Message.setOneofField(this,2,proto.buckets.pb.PushPathRequest.oneofGroups_[0],e)},proto.buckets.pb.PushPathRequest.prototype.clearChunk=function(){return o.Message.setOneofField(this,2,proto.buckets.pb.PushPathRequest.oneofGroups_[0],void 0)},proto.buckets.pb.PushPathRequest.prototype.hasChunk=function(){return null!=o.Message.getField(this,2)},proto.buckets.pb.PushPathReply.oneofGroups_=[[1,2]],proto.buckets.pb.PushPathReply.PayloadCase={PAYLOAD_NOT_SET:0,EVENT:1,ERROR:2},proto.buckets.pb.PushPathReply.prototype.getPayloadCase=function(){return o.Message.computeOneofCase(this,proto.buckets.pb.PushPathReply.oneofGroups_[0])},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.PushPathReply.prototype.toObject=function(e){return proto.buckets.pb.PushPathReply.toObject(e,this)},proto.buckets.pb.PushPathReply.toObject=function(e,t){var r,n={event:(r=t.getEvent())&&proto.buckets.pb.PushPathReply.Event.toObject(e,r),error:o.Message.getFieldWithDefault(t,2,"")};return e&&(n.$jspbMessageInstance=t),n}),proto.buckets.pb.PushPathReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.PushPathReply;return proto.buckets.pb.PushPathReply.deserializeBinaryFromReader(r,t)},proto.buckets.pb.PushPathReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=new proto.buckets.pb.PushPathReply.Event;t.readMessage(r,proto.buckets.pb.PushPathReply.Event.deserializeBinaryFromReader),e.setEvent(r);break;case 2:r=t.readString();e.setError(r);break;default:t.skipField()}}return e},proto.buckets.pb.PushPathReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.PushPathReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.PushPathReply.serializeBinaryToWriter=function(e,t){var r=void 0;null!=(r=e.getEvent())&&t.writeMessage(1,r,proto.buckets.pb.PushPathReply.Event.serializeBinaryToWriter),null!=(r=o.Message.getField(e,2))&&t.writeString(2,r)},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.PushPathReply.Event.prototype.toObject=function(e){return proto.buckets.pb.PushPathReply.Event.toObject(e,this)},proto.buckets.pb.PushPathReply.Event.toObject=function(e,t){var r,n={name:o.Message.getFieldWithDefault(t,1,""),path:o.Message.getFieldWithDefault(t,2,""),bytes:o.Message.getFieldWithDefault(t,3,0),size:o.Message.getFieldWithDefault(t,4,""),root:(r=t.getRoot())&&proto.buckets.pb.Root.toObject(e,r)};return e&&(n.$jspbMessageInstance=t),n}),proto.buckets.pb.PushPathReply.Event.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.PushPathReply.Event;return proto.buckets.pb.PushPathReply.Event.deserializeBinaryFromReader(r,t)},proto.buckets.pb.PushPathReply.Event.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setName(r);break;case 2:r=t.readString();e.setPath(r);break;case 3:r=t.readInt64();e.setBytes(r);break;case 4:r=t.readString();e.setSize(r);break;case 5:r=new proto.buckets.pb.Root;t.readMessage(r,proto.buckets.pb.Root.deserializeBinaryFromReader),e.setRoot(r);break;default:t.skipField()}}return e},proto.buckets.pb.PushPathReply.Event.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.PushPathReply.Event.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.PushPathReply.Event.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getName()).length>0&&t.writeString(1,r),(r=e.getPath()).length>0&&t.writeString(2,r),0!==(r=e.getBytes())&&t.writeInt64(3,r),(r=e.getSize()).length>0&&t.writeString(4,r),null!=(r=e.getRoot())&&t.writeMessage(5,r,proto.buckets.pb.Root.serializeBinaryToWriter)},proto.buckets.pb.PushPathReply.Event.prototype.getName=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.buckets.pb.PushPathReply.Event.prototype.setName=function(e){return o.Message.setProto3StringField(this,1,e)},proto.buckets.pb.PushPathReply.Event.prototype.getPath=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.buckets.pb.PushPathReply.Event.prototype.setPath=function(e){return o.Message.setProto3StringField(this,2,e)},proto.buckets.pb.PushPathReply.Event.prototype.getBytes=function(){return o.Message.getFieldWithDefault(this,3,0)},proto.buckets.pb.PushPathReply.Event.prototype.setBytes=function(e){return o.Message.setProto3IntField(this,3,e)},proto.buckets.pb.PushPathReply.Event.prototype.getSize=function(){return o.Message.getFieldWithDefault(this,4,"")},proto.buckets.pb.PushPathReply.Event.prototype.setSize=function(e){return o.Message.setProto3StringField(this,4,e)},proto.buckets.pb.PushPathReply.Event.prototype.getRoot=function(){return o.Message.getWrapperField(this,proto.buckets.pb.Root,5)},proto.buckets.pb.PushPathReply.Event.prototype.setRoot=function(e){return o.Message.setWrapperField(this,5,e)},proto.buckets.pb.PushPathReply.Event.prototype.clearRoot=function(){return this.setRoot(void 0)},proto.buckets.pb.PushPathReply.Event.prototype.hasRoot=function(){return null!=o.Message.getField(this,5)},proto.buckets.pb.PushPathReply.prototype.getEvent=function(){return o.Message.getWrapperField(this,proto.buckets.pb.PushPathReply.Event,1)},proto.buckets.pb.PushPathReply.prototype.setEvent=function(e){return o.Message.setOneofWrapperField(this,1,proto.buckets.pb.PushPathReply.oneofGroups_[0],e)},proto.buckets.pb.PushPathReply.prototype.clearEvent=function(){return this.setEvent(void 0)},proto.buckets.pb.PushPathReply.prototype.hasEvent=function(){return null!=o.Message.getField(this,1)},proto.buckets.pb.PushPathReply.prototype.getError=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.buckets.pb.PushPathReply.prototype.setError=function(e){return o.Message.setOneofField(this,2,proto.buckets.pb.PushPathReply.oneofGroups_[0],e)},proto.buckets.pb.PushPathReply.prototype.clearError=function(){return o.Message.setOneofField(this,2,proto.buckets.pb.PushPathReply.oneofGroups_[0],void 0)},proto.buckets.pb.PushPathReply.prototype.hasError=function(){return null!=o.Message.getField(this,2)},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.PullPathRequest.prototype.toObject=function(e){return proto.buckets.pb.PullPathRequest.toObject(e,this)},proto.buckets.pb.PullPathRequest.toObject=function(e,t){var r={key:o.Message.getFieldWithDefault(t,1,""),path:o.Message.getFieldWithDefault(t,2,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.PullPathRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.PullPathRequest;return proto.buckets.pb.PullPathRequest.deserializeBinaryFromReader(r,t)},proto.buckets.pb.PullPathRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setKey(r);break;case 2:r=t.readString();e.setPath(r);break;default:t.skipField()}}return e},proto.buckets.pb.PullPathRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.PullPathRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.PullPathRequest.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getKey()).length>0&&t.writeString(1,r),(r=e.getPath()).length>0&&t.writeString(2,r)},proto.buckets.pb.PullPathRequest.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.buckets.pb.PullPathRequest.prototype.setKey=function(e){return o.Message.setProto3StringField(this,1,e)},proto.buckets.pb.PullPathRequest.prototype.getPath=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.buckets.pb.PullPathRequest.prototype.setPath=function(e){return o.Message.setProto3StringField(this,2,e)},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.PullPathReply.prototype.toObject=function(e){return proto.buckets.pb.PullPathReply.toObject(e,this)},proto.buckets.pb.PullPathReply.toObject=function(e,t){var r={chunk:t.getChunk_asB64()};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.PullPathReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.PullPathReply;return proto.buckets.pb.PullPathReply.deserializeBinaryFromReader(r,t)},proto.buckets.pb.PullPathReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readBytes();e.setChunk(r);break;default:t.skipField()}}return e},proto.buckets.pb.PullPathReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.PullPathReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.PullPathReply.serializeBinaryToWriter=function(e,t){var r;(r=e.getChunk_asU8()).length>0&&t.writeBytes(1,r)},proto.buckets.pb.PullPathReply.prototype.getChunk=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.buckets.pb.PullPathReply.prototype.getChunk_asB64=function(){return o.Message.bytesAsB64(this.getChunk())},proto.buckets.pb.PullPathReply.prototype.getChunk_asU8=function(){return o.Message.bytesAsU8(this.getChunk())},proto.buckets.pb.PullPathReply.prototype.setChunk=function(e){return o.Message.setProto3BytesField(this,1,e)},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.RemoveRequest.prototype.toObject=function(e){return proto.buckets.pb.RemoveRequest.toObject(e,this)},proto.buckets.pb.RemoveRequest.toObject=function(e,t){var r={key:o.Message.getFieldWithDefault(t,1,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.RemoveRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.RemoveRequest;return proto.buckets.pb.RemoveRequest.deserializeBinaryFromReader(r,t)},proto.buckets.pb.RemoveRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setKey(r);break;default:t.skipField()}}return e},proto.buckets.pb.RemoveRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.RemoveRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.RemoveRequest.serializeBinaryToWriter=function(e,t){var r;(r=e.getKey()).length>0&&t.writeString(1,r)},proto.buckets.pb.RemoveRequest.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.buckets.pb.RemoveRequest.prototype.setKey=function(e){return o.Message.setProto3StringField(this,1,e)},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.RemoveReply.prototype.toObject=function(e){return proto.buckets.pb.RemoveReply.toObject(e,this)},proto.buckets.pb.RemoveReply.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.RemoveReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.RemoveReply;return proto.buckets.pb.RemoveReply.deserializeBinaryFromReader(r,t)},proto.buckets.pb.RemoveReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.buckets.pb.RemoveReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.RemoveReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.RemoveReply.serializeBinaryToWriter=function(e,t){},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.RemovePathRequest.prototype.toObject=function(e){return proto.buckets.pb.RemovePathRequest.toObject(e,this)},proto.buckets.pb.RemovePathRequest.toObject=function(e,t){var r={key:o.Message.getFieldWithDefault(t,1,""),path:o.Message.getFieldWithDefault(t,2,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.RemovePathRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.RemovePathRequest;return proto.buckets.pb.RemovePathRequest.deserializeBinaryFromReader(r,t)},proto.buckets.pb.RemovePathRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setKey(r);break;case 2:r=t.readString();e.setPath(r);break;default:t.skipField()}}return e},proto.buckets.pb.RemovePathRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.RemovePathRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.RemovePathRequest.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getKey()).length>0&&t.writeString(1,r),(r=e.getPath()).length>0&&t.writeString(2,r)},proto.buckets.pb.RemovePathRequest.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.buckets.pb.RemovePathRequest.prototype.setKey=function(e){return o.Message.setProto3StringField(this,1,e)},proto.buckets.pb.RemovePathRequest.prototype.getPath=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.buckets.pb.RemovePathRequest.prototype.setPath=function(e){return o.Message.setProto3StringField(this,2,e)},o.Message.GENERATE_TO_OBJECT&&(proto.buckets.pb.RemovePathReply.prototype.toObject=function(e){return proto.buckets.pb.RemovePathReply.toObject(e,this)},proto.buckets.pb.RemovePathReply.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.buckets.pb.RemovePathReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.buckets.pb.RemovePathReply;return proto.buckets.pb.RemovePathReply.deserializeBinaryFromReader(r,t)},proto.buckets.pb.RemovePathReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.buckets.pb.RemovePathReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.buckets.pb.RemovePathReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.buckets.pb.RemovePathReply.serializeBinaryToWriter=function(e,t){},n.object.extend(t,proto.buckets.pb)},function(e,t,r){"use strict";const{Buffer:o}=r(0),n=r(39),s=r(4),i=r(48);function a(e){t.decode(e)}t.names=i.names,t.codes=i.codes,t.defaultLengths=i.defaultLengths,t.toHexString=function(e){if(!o.isBuffer(e))throw new Error("must be passed a buffer");return e.toString("hex")},t.fromHexString=function(e){return o.from(e,"hex")},t.toB58String=function(e){if(!o.isBuffer(e))throw new Error("must be passed a buffer");return n.encode("base58btc",e).toString().slice(1)},t.fromB58String=function(e){let t=e;return o.isBuffer(e)&&(t=e.toString()),n.decode("z"+t)},t.decode=function(e){if(!o.isBuffer(e))throw new Error("multihash must be a Buffer");if(e.length<2)throw new Error("multihash too short. must be > 2 bytes.");const r=s.decode(e);if(!t.isValidCode(r))throw new Error("multihash unknown function code: 0x"+r.toString(16));e=e.slice(s.decode.bytes);const n=s.decode(e);if(n<0)throw new Error("multihash invalid length: "+n);if((e=e.slice(s.decode.bytes)).length!==n)throw new Error("multihash length inconsistent: 0x"+e.toString("hex"));return{code:r,name:i.codes[r],length:n,digest:e}},t.encode=function(e,r,n){if(!e||void 0===r)throw new Error("multihash encode requires at least two args: digest, code");const i=t.coerceCode(r);if(!o.isBuffer(e))throw new Error("digest should be a Buffer");if(null==n&&(n=e.length),n&&e.length!==n)throw new Error("digest length should be equal to specified length.");return o.concat([o.from(s.encode(i)),o.from(s.encode(n)),e])},t.coerceCode=function(e){let r=e;if("string"==typeof e){if(void 0===i.names[e])throw new Error("Unrecognized hash function named: "+e);r=i.names[e]}if("number"!=typeof r)throw new Error("Hash function code should be a number. Got: "+r);if(void 0===i.codes[r]&&!t.isAppCode(r))throw new Error("Unrecognized function code: "+r);return r},t.isAppCode=function(e){return e>0&&e<16},t.isValidCode=function(e){return!!t.isAppCode(e)||!!i.codes[e]},t.validate=a,t.prefix=function(e){return a(e),e.slice(0,2)}},function(e,t,r){"use strict";const o=r(4),{Buffer:n}=r(0);function s(e){return parseInt(e.toString("hex"),16)}function i(e){let t=e.toString(16);return t.length%2==1&&(t="0"+t),n.from(t,"hex")}e.exports={numberToBuffer:i,bufferToNumber:s,varintBufferEncode:function(e){return n.from(o.encode(s(e)))},varintBufferDecode:function(e){return i(o.decode(e))},varintEncode:function(e){return n.from(o.encode(e))}}},function(e,t,r){var o=r(9),n=o,s=Function("return this")();n.exportSymbol("proto.users.pb.GetThreadReply",null,s),n.exportSymbol("proto.users.pb.GetThreadRequest",null,s),n.exportSymbol("proto.users.pb.ListThreadsReply",null,s),n.exportSymbol("proto.users.pb.ListThreadsRequest",null,s),proto.users.pb.ListThreadsRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.users.pb.ListThreadsRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.users.pb.ListThreadsRequest.displayName="proto.users.pb.ListThreadsRequest"),proto.users.pb.ListThreadsReply=function(e){o.Message.initialize(this,e,0,-1,proto.users.pb.ListThreadsReply.repeatedFields_,null)},n.inherits(proto.users.pb.ListThreadsReply,o.Message),n.DEBUG&&!COMPILED&&(proto.users.pb.ListThreadsReply.displayName="proto.users.pb.ListThreadsReply"),proto.users.pb.GetThreadRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.users.pb.GetThreadRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.users.pb.GetThreadRequest.displayName="proto.users.pb.GetThreadRequest"),proto.users.pb.GetThreadReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.users.pb.GetThreadReply,o.Message),n.DEBUG&&!COMPILED&&(proto.users.pb.GetThreadReply.displayName="proto.users.pb.GetThreadReply"),o.Message.GENERATE_TO_OBJECT&&(proto.users.pb.ListThreadsRequest.prototype.toObject=function(e){return proto.users.pb.ListThreadsRequest.toObject(e,this)},proto.users.pb.ListThreadsRequest.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.users.pb.ListThreadsRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.users.pb.ListThreadsRequest;return proto.users.pb.ListThreadsRequest.deserializeBinaryFromReader(r,t)},proto.users.pb.ListThreadsRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.users.pb.ListThreadsRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.users.pb.ListThreadsRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.users.pb.ListThreadsRequest.serializeBinaryToWriter=function(e,t){},proto.users.pb.ListThreadsReply.repeatedFields_=[1],o.Message.GENERATE_TO_OBJECT&&(proto.users.pb.ListThreadsReply.prototype.toObject=function(e){return proto.users.pb.ListThreadsReply.toObject(e,this)},proto.users.pb.ListThreadsReply.toObject=function(e,t){var r={listList:o.Message.toObjectList(t.getListList(),proto.users.pb.GetThreadReply.toObject,e)};return e&&(r.$jspbMessageInstance=t),r}),proto.users.pb.ListThreadsReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.users.pb.ListThreadsReply;return proto.users.pb.ListThreadsReply.deserializeBinaryFromReader(r,t)},proto.users.pb.ListThreadsReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=new proto.users.pb.GetThreadReply;t.readMessage(r,proto.users.pb.GetThreadReply.deserializeBinaryFromReader),e.addList(r);break;default:t.skipField()}}return e},proto.users.pb.ListThreadsReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.users.pb.ListThreadsReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.users.pb.ListThreadsReply.serializeBinaryToWriter=function(e,t){var r;(r=e.getListList()).length>0&&t.writeRepeatedMessage(1,r,proto.users.pb.GetThreadReply.serializeBinaryToWriter)},proto.users.pb.ListThreadsReply.prototype.getListList=function(){return o.Message.getRepeatedWrapperField(this,proto.users.pb.GetThreadReply,1)},proto.users.pb.ListThreadsReply.prototype.setListList=function(e){return o.Message.setRepeatedWrapperField(this,1,e)},proto.users.pb.ListThreadsReply.prototype.addList=function(e,t){return o.Message.addToRepeatedWrapperField(this,1,e,proto.users.pb.GetThreadReply,t)},proto.users.pb.ListThreadsReply.prototype.clearListList=function(){return this.setListList([])},o.Message.GENERATE_TO_OBJECT&&(proto.users.pb.GetThreadRequest.prototype.toObject=function(e){return proto.users.pb.GetThreadRequest.toObject(e,this)},proto.users.pb.GetThreadRequest.toObject=function(e,t){var r={name:o.Message.getFieldWithDefault(t,1,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.users.pb.GetThreadRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.users.pb.GetThreadRequest;return proto.users.pb.GetThreadRequest.deserializeBinaryFromReader(r,t)},proto.users.pb.GetThreadRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setName(r);break;default:t.skipField()}}return e},proto.users.pb.GetThreadRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.users.pb.GetThreadRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.users.pb.GetThreadRequest.serializeBinaryToWriter=function(e,t){var r;(r=e.getName()).length>0&&t.writeString(1,r)},proto.users.pb.GetThreadRequest.prototype.getName=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.users.pb.GetThreadRequest.prototype.setName=function(e){return o.Message.setProto3StringField(this,1,e)},o.Message.GENERATE_TO_OBJECT&&(proto.users.pb.GetThreadReply.prototype.toObject=function(e){return proto.users.pb.GetThreadReply.toObject(e,this)},proto.users.pb.GetThreadReply.toObject=function(e,t){var r={id:t.getId_asB64(),name:o.Message.getFieldWithDefault(t,2,""),isdb:o.Message.getBooleanFieldWithDefault(t,3,!1)};return e&&(r.$jspbMessageInstance=t),r}),proto.users.pb.GetThreadReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.users.pb.GetThreadReply;return proto.users.pb.GetThreadReply.deserializeBinaryFromReader(r,t)},proto.users.pb.GetThreadReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readBytes();e.setId(r);break;case 2:r=t.readString();e.setName(r);break;case 3:r=t.readBool();e.setIsdb(r);break;default:t.skipField()}}return e},proto.users.pb.GetThreadReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.users.pb.GetThreadReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.users.pb.GetThreadReply.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getId_asU8()).length>0&&t.writeBytes(1,r),(r=e.getName()).length>0&&t.writeString(2,r),(r=e.getIsdb())&&t.writeBool(3,r)},proto.users.pb.GetThreadReply.prototype.getId=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.users.pb.GetThreadReply.prototype.getId_asB64=function(){return o.Message.bytesAsB64(this.getId())},proto.users.pb.GetThreadReply.prototype.getId_asU8=function(){return o.Message.bytesAsU8(this.getId())},proto.users.pb.GetThreadReply.prototype.setId=function(e){return o.Message.setProto3BytesField(this,1,e)},proto.users.pb.GetThreadReply.prototype.getName=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.users.pb.GetThreadReply.prototype.setName=function(e){return o.Message.setProto3StringField(this,2,e)},proto.users.pb.GetThreadReply.prototype.getIsdb=function(){return o.Message.getBooleanFieldWithDefault(this,3,!1)},proto.users.pb.GetThreadReply.prototype.setIsdb=function(e){return o.Message.setProto3BooleanField(this,3,e)},n.object.extend(t,proto.users.pb)},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),o=0;o<r.length;o++)r[o]=arguments[o];return e.apply(t,r)}}},function(e,t,r){"use strict";var o=r(1);function n(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var s;if(r)s=r(t);else if(o.isURLSearchParams(t))s=t.toString();else{var i=[];o.forEach(t,(function(e,t){null!=e&&(o.isArray(e)?t+="[]":e=[e],o.forEach(e,(function(e){o.isDate(e)?e=e.toISOString():o.isObject(e)&&(e=JSON.stringify(e)),i.push(n(t)+"="+n(e))})))})),s=i.join("&")}if(s){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+s}return e}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";(function(t){var o=r(1),n=r(80),s={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!o.isUndefined(e)&&o.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,u={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(a=r(20)),a),transformRequest:[function(e,t){return n(t,"Accept"),n(t,"Content-Type"),o.isFormData(e)||o.isArrayBuffer(e)||o.isBuffer(e)||o.isStream(e)||o.isFile(e)||o.isBlob(e)?e:o.isArrayBufferView(e)?e.buffer:o.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):o.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};u.headers={common:{Accept:"application/json, text/plain, */*"}},o.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),o.forEach(["post","put","patch"],(function(e){u.headers[e]=o.merge(s)})),e.exports=u}).call(this,r(79))},function(e,t,r){"use strict";var o=r(1),n=r(81),s=r(17),i=r(83),a=r(86),u=r(87),g=r(21);e.exports=function(e){return new Promise((function(t,l){var p=e.data,c=e.headers;o.isFormData(p)&&delete c["Content-Type"];var h=new XMLHttpRequest;if(e.auth){var d=e.auth.username||"",f=e.auth.password||"";c.Authorization="Basic "+btoa(d+":"+f)}var b=i(e.baseURL,e.url);if(h.open(e.method.toUpperCase(),s(b,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,h.onreadystatechange=function(){if(h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in h?a(h.getAllResponseHeaders()):null,o={data:e.responseType&&"text"!==e.responseType?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:e,request:h};n(t,l,o),h=null}},h.onabort=function(){h&&(l(g("Request aborted",e,"ECONNABORTED",h)),h=null)},h.onerror=function(){l(g("Network Error",e,null,h)),h=null},h.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),l(g(t,e,"ECONNABORTED",h)),h=null},o.isStandardBrowserEnv()){var y=r(88),m=(e.withCredentials||u(b))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;m&&(c[e.xsrfHeaderName]=m)}if("setRequestHeader"in h&&o.forEach(c,(function(e,t){void 0===p&&"content-type"===t.toLowerCase()?delete c[t]:h.setRequestHeader(t,e)})),o.isUndefined(e.withCredentials)||(h.withCredentials=!!e.withCredentials),e.responseType)try{h.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){h&&(h.abort(),l(e),h=null)})),void 0===p&&(p=null),h.send(p)}))}},function(e,t,r){"use strict";var o=r(82);e.exports=function(e,t,r,n,s){var i=new Error(e);return o(i,t,r,n,s)}},function(e,t,r){"use strict";var o=r(1);e.exports=function(e,t){t=t||{};var r={},n=["url","method","params","data"],s=["headers","auth","proxy"],i=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];o.forEach(n,(function(e){void 0!==t[e]&&(r[e]=t[e])})),o.forEach(s,(function(n){o.isObject(t[n])?r[n]=o.deepMerge(e[n],t[n]):void 0!==t[n]?r[n]=t[n]:o.isObject(e[n])?r[n]=o.deepMerge(e[n]):void 0!==e[n]&&(r[n]=e[n])})),o.forEach(i,(function(o){void 0!==t[o]?r[o]=t[o]:void 0!==e[o]&&(r[o]=e[o])}));var a=n.concat(s).concat(i),u=Object.keys(t).filter((function(e){return-1===a.indexOf(e)}));return o.forEach(u,(function(o){void 0!==t[o]?r[o]=t[o]:void 0!==e[o]&&(r[o]=e[o])})),r}},function(e,t,r){"use strict";function o(e){this.message=e}o.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},o.prototype.__CANCEL__=!0,e.exports=o},function(e,t,r){var o=r(9),n=o,s=Function("return this")();n.exportSymbol("proto.hub.pb.CreateKeyRequest",null,s),n.exportSymbol("proto.hub.pb.CreateOrgRequest",null,s),n.exportSymbol("proto.hub.pb.DestroyAccountReply",null,s),n.exportSymbol("proto.hub.pb.DestroyAccountRequest",null,s),n.exportSymbol("proto.hub.pb.GetKeyReply",null,s),n.exportSymbol("proto.hub.pb.GetOrgReply",null,s),n.exportSymbol("proto.hub.pb.GetOrgReply.Member",null,s),n.exportSymbol("proto.hub.pb.GetOrgRequest",null,s),n.exportSymbol("proto.hub.pb.GetSessionInfoReply",null,s),n.exportSymbol("proto.hub.pb.GetSessionInfoRequest",null,s),n.exportSymbol("proto.hub.pb.InvalidateKeyReply",null,s),n.exportSymbol("proto.hub.pb.InvalidateKeyRequest",null,s),n.exportSymbol("proto.hub.pb.InviteToOrgReply",null,s),n.exportSymbol("proto.hub.pb.InviteToOrgRequest",null,s),n.exportSymbol("proto.hub.pb.IsOrgNameAvailableReply",null,s),n.exportSymbol("proto.hub.pb.IsOrgNameAvailableRequest",null,s),n.exportSymbol("proto.hub.pb.IsUsernameAvailableReply",null,s),n.exportSymbol("proto.hub.pb.IsUsernameAvailableRequest",null,s),n.exportSymbol("proto.hub.pb.KeyType",null,s),n.exportSymbol("proto.hub.pb.LeaveOrgReply",null,s),n.exportSymbol("proto.hub.pb.LeaveOrgRequest",null,s),n.exportSymbol("proto.hub.pb.ListKeysReply",null,s),n.exportSymbol("proto.hub.pb.ListKeysRequest",null,s),n.exportSymbol("proto.hub.pb.ListOrgsReply",null,s),n.exportSymbol("proto.hub.pb.ListOrgsRequest",null,s),n.exportSymbol("proto.hub.pb.RemoveOrgReply",null,s),n.exportSymbol("proto.hub.pb.RemoveOrgRequest",null,s),n.exportSymbol("proto.hub.pb.SigninReply",null,s),n.exportSymbol("proto.hub.pb.SigninRequest",null,s),n.exportSymbol("proto.hub.pb.SignoutReply",null,s),n.exportSymbol("proto.hub.pb.SignoutRequest",null,s),n.exportSymbol("proto.hub.pb.SignupReply",null,s),n.exportSymbol("proto.hub.pb.SignupRequest",null,s),proto.hub.pb.SignupRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.SignupRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.SignupRequest.displayName="proto.hub.pb.SignupRequest"),proto.hub.pb.SignupReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.SignupReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.SignupReply.displayName="proto.hub.pb.SignupReply"),proto.hub.pb.SigninRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.SigninRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.SigninRequest.displayName="proto.hub.pb.SigninRequest"),proto.hub.pb.SigninReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.SigninReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.SigninReply.displayName="proto.hub.pb.SigninReply"),proto.hub.pb.SignoutRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.SignoutRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.SignoutRequest.displayName="proto.hub.pb.SignoutRequest"),proto.hub.pb.SignoutReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.SignoutReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.SignoutReply.displayName="proto.hub.pb.SignoutReply"),proto.hub.pb.GetSessionInfoRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.GetSessionInfoRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.GetSessionInfoRequest.displayName="proto.hub.pb.GetSessionInfoRequest"),proto.hub.pb.GetSessionInfoReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.GetSessionInfoReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.GetSessionInfoReply.displayName="proto.hub.pb.GetSessionInfoReply"),proto.hub.pb.CreateKeyRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.CreateKeyRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.CreateKeyRequest.displayName="proto.hub.pb.CreateKeyRequest"),proto.hub.pb.GetKeyReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.GetKeyReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.GetKeyReply.displayName="proto.hub.pb.GetKeyReply"),proto.hub.pb.InvalidateKeyRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.InvalidateKeyRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.InvalidateKeyRequest.displayName="proto.hub.pb.InvalidateKeyRequest"),proto.hub.pb.InvalidateKeyReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.InvalidateKeyReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.InvalidateKeyReply.displayName="proto.hub.pb.InvalidateKeyReply"),proto.hub.pb.ListKeysRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.ListKeysRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.ListKeysRequest.displayName="proto.hub.pb.ListKeysRequest"),proto.hub.pb.ListKeysReply=function(e){o.Message.initialize(this,e,0,-1,proto.hub.pb.ListKeysReply.repeatedFields_,null)},n.inherits(proto.hub.pb.ListKeysReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.ListKeysReply.displayName="proto.hub.pb.ListKeysReply"),proto.hub.pb.CreateOrgRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.CreateOrgRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.CreateOrgRequest.displayName="proto.hub.pb.CreateOrgRequest"),proto.hub.pb.GetOrgRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.GetOrgRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.GetOrgRequest.displayName="proto.hub.pb.GetOrgRequest"),proto.hub.pb.GetOrgReply=function(e){o.Message.initialize(this,e,0,-1,proto.hub.pb.GetOrgReply.repeatedFields_,null)},n.inherits(proto.hub.pb.GetOrgReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.GetOrgReply.displayName="proto.hub.pb.GetOrgReply"),proto.hub.pb.GetOrgReply.Member=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.GetOrgReply.Member,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.GetOrgReply.Member.displayName="proto.hub.pb.GetOrgReply.Member"),proto.hub.pb.ListOrgsRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.ListOrgsRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.ListOrgsRequest.displayName="proto.hub.pb.ListOrgsRequest"),proto.hub.pb.ListOrgsReply=function(e){o.Message.initialize(this,e,0,-1,proto.hub.pb.ListOrgsReply.repeatedFields_,null)},n.inherits(proto.hub.pb.ListOrgsReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.ListOrgsReply.displayName="proto.hub.pb.ListOrgsReply"),proto.hub.pb.RemoveOrgRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.RemoveOrgRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.RemoveOrgRequest.displayName="proto.hub.pb.RemoveOrgRequest"),proto.hub.pb.RemoveOrgReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.RemoveOrgReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.RemoveOrgReply.displayName="proto.hub.pb.RemoveOrgReply"),proto.hub.pb.InviteToOrgRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.InviteToOrgRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.InviteToOrgRequest.displayName="proto.hub.pb.InviteToOrgRequest"),proto.hub.pb.InviteToOrgReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.InviteToOrgReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.InviteToOrgReply.displayName="proto.hub.pb.InviteToOrgReply"),proto.hub.pb.LeaveOrgRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.LeaveOrgRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.LeaveOrgRequest.displayName="proto.hub.pb.LeaveOrgRequest"),proto.hub.pb.LeaveOrgReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.LeaveOrgReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.LeaveOrgReply.displayName="proto.hub.pb.LeaveOrgReply"),proto.hub.pb.IsUsernameAvailableRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.IsUsernameAvailableRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.IsUsernameAvailableRequest.displayName="proto.hub.pb.IsUsernameAvailableRequest"),proto.hub.pb.IsUsernameAvailableReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.IsUsernameAvailableReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.IsUsernameAvailableReply.displayName="proto.hub.pb.IsUsernameAvailableReply"),proto.hub.pb.IsOrgNameAvailableRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.IsOrgNameAvailableRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.IsOrgNameAvailableRequest.displayName="proto.hub.pb.IsOrgNameAvailableRequest"),proto.hub.pb.IsOrgNameAvailableReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.IsOrgNameAvailableReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.IsOrgNameAvailableReply.displayName="proto.hub.pb.IsOrgNameAvailableReply"),proto.hub.pb.DestroyAccountRequest=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.DestroyAccountRequest,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.DestroyAccountRequest.displayName="proto.hub.pb.DestroyAccountRequest"),proto.hub.pb.DestroyAccountReply=function(e){o.Message.initialize(this,e,0,-1,null,null)},n.inherits(proto.hub.pb.DestroyAccountReply,o.Message),n.DEBUG&&!COMPILED&&(proto.hub.pb.DestroyAccountReply.displayName="proto.hub.pb.DestroyAccountReply"),o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.SignupRequest.prototype.toObject=function(e){return proto.hub.pb.SignupRequest.toObject(e,this)},proto.hub.pb.SignupRequest.toObject=function(e,t){var r={username:o.Message.getFieldWithDefault(t,1,""),email:o.Message.getFieldWithDefault(t,2,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.SignupRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.SignupRequest;return proto.hub.pb.SignupRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.SignupRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setUsername(r);break;case 2:r=t.readString();e.setEmail(r);break;default:t.skipField()}}return e},proto.hub.pb.SignupRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.SignupRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.SignupRequest.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getUsername()).length>0&&t.writeString(1,r),(r=e.getEmail()).length>0&&t.writeString(2,r)},proto.hub.pb.SignupRequest.prototype.getUsername=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.SignupRequest.prototype.setUsername=function(e){return o.Message.setProto3StringField(this,1,e)},proto.hub.pb.SignupRequest.prototype.getEmail=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.hub.pb.SignupRequest.prototype.setEmail=function(e){return o.Message.setProto3StringField(this,2,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.SignupReply.prototype.toObject=function(e){return proto.hub.pb.SignupReply.toObject(e,this)},proto.hub.pb.SignupReply.toObject=function(e,t){var r={key:t.getKey_asB64(),session:o.Message.getFieldWithDefault(t,2,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.SignupReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.SignupReply;return proto.hub.pb.SignupReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.SignupReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readBytes();e.setKey(r);break;case 2:r=t.readString();e.setSession(r);break;default:t.skipField()}}return e},proto.hub.pb.SignupReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.SignupReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.SignupReply.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getKey_asU8()).length>0&&t.writeBytes(1,r),(r=e.getSession()).length>0&&t.writeString(2,r)},proto.hub.pb.SignupReply.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.SignupReply.prototype.getKey_asB64=function(){return o.Message.bytesAsB64(this.getKey())},proto.hub.pb.SignupReply.prototype.getKey_asU8=function(){return o.Message.bytesAsU8(this.getKey())},proto.hub.pb.SignupReply.prototype.setKey=function(e){return o.Message.setProto3BytesField(this,1,e)},proto.hub.pb.SignupReply.prototype.getSession=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.hub.pb.SignupReply.prototype.setSession=function(e){return o.Message.setProto3StringField(this,2,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.SigninRequest.prototype.toObject=function(e){return proto.hub.pb.SigninRequest.toObject(e,this)},proto.hub.pb.SigninRequest.toObject=function(e,t){var r={usernameoremail:o.Message.getFieldWithDefault(t,1,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.SigninRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.SigninRequest;return proto.hub.pb.SigninRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.SigninRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setUsernameoremail(r);break;default:t.skipField()}}return e},proto.hub.pb.SigninRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.SigninRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.SigninRequest.serializeBinaryToWriter=function(e,t){var r;(r=e.getUsernameoremail()).length>0&&t.writeString(1,r)},proto.hub.pb.SigninRequest.prototype.getUsernameoremail=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.SigninRequest.prototype.setUsernameoremail=function(e){return o.Message.setProto3StringField(this,1,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.SigninReply.prototype.toObject=function(e){return proto.hub.pb.SigninReply.toObject(e,this)},proto.hub.pb.SigninReply.toObject=function(e,t){var r={key:t.getKey_asB64(),session:o.Message.getFieldWithDefault(t,2,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.SigninReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.SigninReply;return proto.hub.pb.SigninReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.SigninReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readBytes();e.setKey(r);break;case 2:r=t.readString();e.setSession(r);break;default:t.skipField()}}return e},proto.hub.pb.SigninReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.SigninReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.SigninReply.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getKey_asU8()).length>0&&t.writeBytes(1,r),(r=e.getSession()).length>0&&t.writeString(2,r)},proto.hub.pb.SigninReply.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.SigninReply.prototype.getKey_asB64=function(){return o.Message.bytesAsB64(this.getKey())},proto.hub.pb.SigninReply.prototype.getKey_asU8=function(){return o.Message.bytesAsU8(this.getKey())},proto.hub.pb.SigninReply.prototype.setKey=function(e){return o.Message.setProto3BytesField(this,1,e)},proto.hub.pb.SigninReply.prototype.getSession=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.hub.pb.SigninReply.prototype.setSession=function(e){return o.Message.setProto3StringField(this,2,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.SignoutRequest.prototype.toObject=function(e){return proto.hub.pb.SignoutRequest.toObject(e,this)},proto.hub.pb.SignoutRequest.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.SignoutRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.SignoutRequest;return proto.hub.pb.SignoutRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.SignoutRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.SignoutRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.SignoutRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.SignoutRequest.serializeBinaryToWriter=function(e,t){},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.SignoutReply.prototype.toObject=function(e){return proto.hub.pb.SignoutReply.toObject(e,this)},proto.hub.pb.SignoutReply.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.SignoutReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.SignoutReply;return proto.hub.pb.SignoutReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.SignoutReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.SignoutReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.SignoutReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.SignoutReply.serializeBinaryToWriter=function(e,t){},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.GetSessionInfoRequest.prototype.toObject=function(e){return proto.hub.pb.GetSessionInfoRequest.toObject(e,this)},proto.hub.pb.GetSessionInfoRequest.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.GetSessionInfoRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.GetSessionInfoRequest;return proto.hub.pb.GetSessionInfoRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.GetSessionInfoRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.GetSessionInfoRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.GetSessionInfoRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.GetSessionInfoRequest.serializeBinaryToWriter=function(e,t){},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.GetSessionInfoReply.prototype.toObject=function(e){return proto.hub.pb.GetSessionInfoReply.toObject(e,this)},proto.hub.pb.GetSessionInfoReply.toObject=function(e,t){var r={key:t.getKey_asB64(),username:o.Message.getFieldWithDefault(t,2,""),email:o.Message.getFieldWithDefault(t,3,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.GetSessionInfoReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.GetSessionInfoReply;return proto.hub.pb.GetSessionInfoReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.GetSessionInfoReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readBytes();e.setKey(r);break;case 2:r=t.readString();e.setUsername(r);break;case 3:r=t.readString();e.setEmail(r);break;default:t.skipField()}}return e},proto.hub.pb.GetSessionInfoReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.GetSessionInfoReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.GetSessionInfoReply.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getKey_asU8()).length>0&&t.writeBytes(1,r),(r=e.getUsername()).length>0&&t.writeString(2,r),(r=e.getEmail()).length>0&&t.writeString(3,r)},proto.hub.pb.GetSessionInfoReply.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.GetSessionInfoReply.prototype.getKey_asB64=function(){return o.Message.bytesAsB64(this.getKey())},proto.hub.pb.GetSessionInfoReply.prototype.getKey_asU8=function(){return o.Message.bytesAsU8(this.getKey())},proto.hub.pb.GetSessionInfoReply.prototype.setKey=function(e){return o.Message.setProto3BytesField(this,1,e)},proto.hub.pb.GetSessionInfoReply.prototype.getUsername=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.hub.pb.GetSessionInfoReply.prototype.setUsername=function(e){return o.Message.setProto3StringField(this,2,e)},proto.hub.pb.GetSessionInfoReply.prototype.getEmail=function(){return o.Message.getFieldWithDefault(this,3,"")},proto.hub.pb.GetSessionInfoReply.prototype.setEmail=function(e){return o.Message.setProto3StringField(this,3,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.CreateKeyRequest.prototype.toObject=function(e){return proto.hub.pb.CreateKeyRequest.toObject(e,this)},proto.hub.pb.CreateKeyRequest.toObject=function(e,t){var r={type:o.Message.getFieldWithDefault(t,1,0)};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.CreateKeyRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.CreateKeyRequest;return proto.hub.pb.CreateKeyRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.CreateKeyRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readEnum();e.setType(r);break;default:t.skipField()}}return e},proto.hub.pb.CreateKeyRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.CreateKeyRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.CreateKeyRequest.serializeBinaryToWriter=function(e,t){var r;0!==(r=e.getType())&&t.writeEnum(1,r)},proto.hub.pb.CreateKeyRequest.prototype.getType=function(){return o.Message.getFieldWithDefault(this,1,0)},proto.hub.pb.CreateKeyRequest.prototype.setType=function(e){return o.Message.setProto3EnumField(this,1,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.GetKeyReply.prototype.toObject=function(e){return proto.hub.pb.GetKeyReply.toObject(e,this)},proto.hub.pb.GetKeyReply.toObject=function(e,t){var r={key:o.Message.getFieldWithDefault(t,1,""),secret:o.Message.getFieldWithDefault(t,2,""),type:o.Message.getFieldWithDefault(t,3,0),valid:o.Message.getBooleanFieldWithDefault(t,4,!1),threads:o.Message.getFieldWithDefault(t,5,0)};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.GetKeyReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.GetKeyReply;return proto.hub.pb.GetKeyReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.GetKeyReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setKey(r);break;case 2:r=t.readString();e.setSecret(r);break;case 3:r=t.readEnum();e.setType(r);break;case 4:r=t.readBool();e.setValid(r);break;case 5:r=t.readInt32();e.setThreads(r);break;default:t.skipField()}}return e},proto.hub.pb.GetKeyReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.GetKeyReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.GetKeyReply.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getKey()).length>0&&t.writeString(1,r),(r=e.getSecret()).length>0&&t.writeString(2,r),0!==(r=e.getType())&&t.writeEnum(3,r),(r=e.getValid())&&t.writeBool(4,r),0!==(r=e.getThreads())&&t.writeInt32(5,r)},proto.hub.pb.GetKeyReply.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.GetKeyReply.prototype.setKey=function(e){return o.Message.setProto3StringField(this,1,e)},proto.hub.pb.GetKeyReply.prototype.getSecret=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.hub.pb.GetKeyReply.prototype.setSecret=function(e){return o.Message.setProto3StringField(this,2,e)},proto.hub.pb.GetKeyReply.prototype.getType=function(){return o.Message.getFieldWithDefault(this,3,0)},proto.hub.pb.GetKeyReply.prototype.setType=function(e){return o.Message.setProto3EnumField(this,3,e)},proto.hub.pb.GetKeyReply.prototype.getValid=function(){return o.Message.getBooleanFieldWithDefault(this,4,!1)},proto.hub.pb.GetKeyReply.prototype.setValid=function(e){return o.Message.setProto3BooleanField(this,4,e)},proto.hub.pb.GetKeyReply.prototype.getThreads=function(){return o.Message.getFieldWithDefault(this,5,0)},proto.hub.pb.GetKeyReply.prototype.setThreads=function(e){return o.Message.setProto3IntField(this,5,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.InvalidateKeyRequest.prototype.toObject=function(e){return proto.hub.pb.InvalidateKeyRequest.toObject(e,this)},proto.hub.pb.InvalidateKeyRequest.toObject=function(e,t){var r={key:o.Message.getFieldWithDefault(t,1,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.InvalidateKeyRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.InvalidateKeyRequest;return proto.hub.pb.InvalidateKeyRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.InvalidateKeyRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setKey(r);break;default:t.skipField()}}return e},proto.hub.pb.InvalidateKeyRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.InvalidateKeyRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.InvalidateKeyRequest.serializeBinaryToWriter=function(e,t){var r;(r=e.getKey()).length>0&&t.writeString(1,r)},proto.hub.pb.InvalidateKeyRequest.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.InvalidateKeyRequest.prototype.setKey=function(e){return o.Message.setProto3StringField(this,1,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.InvalidateKeyReply.prototype.toObject=function(e){return proto.hub.pb.InvalidateKeyReply.toObject(e,this)},proto.hub.pb.InvalidateKeyReply.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.InvalidateKeyReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.InvalidateKeyReply;return proto.hub.pb.InvalidateKeyReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.InvalidateKeyReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.InvalidateKeyReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.InvalidateKeyReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.InvalidateKeyReply.serializeBinaryToWriter=function(e,t){},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.ListKeysRequest.prototype.toObject=function(e){return proto.hub.pb.ListKeysRequest.toObject(e,this)},proto.hub.pb.ListKeysRequest.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.ListKeysRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.ListKeysRequest;return proto.hub.pb.ListKeysRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.ListKeysRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.ListKeysRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.ListKeysRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.ListKeysRequest.serializeBinaryToWriter=function(e,t){},proto.hub.pb.ListKeysReply.repeatedFields_=[1],o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.ListKeysReply.prototype.toObject=function(e){return proto.hub.pb.ListKeysReply.toObject(e,this)},proto.hub.pb.ListKeysReply.toObject=function(e,t){var r={listList:o.Message.toObjectList(t.getListList(),proto.hub.pb.GetKeyReply.toObject,e)};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.ListKeysReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.ListKeysReply;return proto.hub.pb.ListKeysReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.ListKeysReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=new proto.hub.pb.GetKeyReply;t.readMessage(r,proto.hub.pb.GetKeyReply.deserializeBinaryFromReader),e.addList(r);break;default:t.skipField()}}return e},proto.hub.pb.ListKeysReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.ListKeysReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.ListKeysReply.serializeBinaryToWriter=function(e,t){var r;(r=e.getListList()).length>0&&t.writeRepeatedMessage(1,r,proto.hub.pb.GetKeyReply.serializeBinaryToWriter)},proto.hub.pb.ListKeysReply.prototype.getListList=function(){return o.Message.getRepeatedWrapperField(this,proto.hub.pb.GetKeyReply,1)},proto.hub.pb.ListKeysReply.prototype.setListList=function(e){return o.Message.setRepeatedWrapperField(this,1,e)},proto.hub.pb.ListKeysReply.prototype.addList=function(e,t){return o.Message.addToRepeatedWrapperField(this,1,e,proto.hub.pb.GetKeyReply,t)},proto.hub.pb.ListKeysReply.prototype.clearListList=function(){return this.setListList([])},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.CreateOrgRequest.prototype.toObject=function(e){return proto.hub.pb.CreateOrgRequest.toObject(e,this)},proto.hub.pb.CreateOrgRequest.toObject=function(e,t){var r={name:o.Message.getFieldWithDefault(t,1,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.CreateOrgRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.CreateOrgRequest;return proto.hub.pb.CreateOrgRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.CreateOrgRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setName(r);break;default:t.skipField()}}return e},proto.hub.pb.CreateOrgRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.CreateOrgRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.CreateOrgRequest.serializeBinaryToWriter=function(e,t){var r;(r=e.getName()).length>0&&t.writeString(1,r)},proto.hub.pb.CreateOrgRequest.prototype.getName=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.CreateOrgRequest.prototype.setName=function(e){return o.Message.setProto3StringField(this,1,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.GetOrgRequest.prototype.toObject=function(e){return proto.hub.pb.GetOrgRequest.toObject(e,this)},proto.hub.pb.GetOrgRequest.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.GetOrgRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.GetOrgRequest;return proto.hub.pb.GetOrgRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.GetOrgRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.GetOrgRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.GetOrgRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.GetOrgRequest.serializeBinaryToWriter=function(e,t){},proto.hub.pb.GetOrgReply.repeatedFields_=[5],o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.GetOrgReply.prototype.toObject=function(e){return proto.hub.pb.GetOrgReply.toObject(e,this)},proto.hub.pb.GetOrgReply.toObject=function(e,t){var r={key:t.getKey_asB64(),name:o.Message.getFieldWithDefault(t,2,""),slug:o.Message.getFieldWithDefault(t,3,""),host:o.Message.getFieldWithDefault(t,4,""),membersList:o.Message.toObjectList(t.getMembersList(),proto.hub.pb.GetOrgReply.Member.toObject,e),createdat:o.Message.getFieldWithDefault(t,6,0)};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.GetOrgReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.GetOrgReply;return proto.hub.pb.GetOrgReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.GetOrgReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readBytes();e.setKey(r);break;case 2:r=t.readString();e.setName(r);break;case 3:r=t.readString();e.setSlug(r);break;case 4:r=t.readString();e.setHost(r);break;case 5:r=new proto.hub.pb.GetOrgReply.Member;t.readMessage(r,proto.hub.pb.GetOrgReply.Member.deserializeBinaryFromReader),e.addMembers(r);break;case 6:r=t.readInt64();e.setCreatedat(r);break;default:t.skipField()}}return e},proto.hub.pb.GetOrgReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.GetOrgReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.GetOrgReply.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getKey_asU8()).length>0&&t.writeBytes(1,r),(r=e.getName()).length>0&&t.writeString(2,r),(r=e.getSlug()).length>0&&t.writeString(3,r),(r=e.getHost()).length>0&&t.writeString(4,r),(r=e.getMembersList()).length>0&&t.writeRepeatedMessage(5,r,proto.hub.pb.GetOrgReply.Member.serializeBinaryToWriter),0!==(r=e.getCreatedat())&&t.writeInt64(6,r)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.GetOrgReply.Member.prototype.toObject=function(e){return proto.hub.pb.GetOrgReply.Member.toObject(e,this)},proto.hub.pb.GetOrgReply.Member.toObject=function(e,t){var r={key:t.getKey_asB64(),username:o.Message.getFieldWithDefault(t,2,""),role:o.Message.getFieldWithDefault(t,3,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.GetOrgReply.Member.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.GetOrgReply.Member;return proto.hub.pb.GetOrgReply.Member.deserializeBinaryFromReader(r,t)},proto.hub.pb.GetOrgReply.Member.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readBytes();e.setKey(r);break;case 2:r=t.readString();e.setUsername(r);break;case 3:r=t.readString();e.setRole(r);break;default:t.skipField()}}return e},proto.hub.pb.GetOrgReply.Member.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.GetOrgReply.Member.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.GetOrgReply.Member.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getKey_asU8()).length>0&&t.writeBytes(1,r),(r=e.getUsername()).length>0&&t.writeString(2,r),(r=e.getRole()).length>0&&t.writeString(3,r)},proto.hub.pb.GetOrgReply.Member.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.GetOrgReply.Member.prototype.getKey_asB64=function(){return o.Message.bytesAsB64(this.getKey())},proto.hub.pb.GetOrgReply.Member.prototype.getKey_asU8=function(){return o.Message.bytesAsU8(this.getKey())},proto.hub.pb.GetOrgReply.Member.prototype.setKey=function(e){return o.Message.setProto3BytesField(this,1,e)},proto.hub.pb.GetOrgReply.Member.prototype.getUsername=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.hub.pb.GetOrgReply.Member.prototype.setUsername=function(e){return o.Message.setProto3StringField(this,2,e)},proto.hub.pb.GetOrgReply.Member.prototype.getRole=function(){return o.Message.getFieldWithDefault(this,3,"")},proto.hub.pb.GetOrgReply.Member.prototype.setRole=function(e){return o.Message.setProto3StringField(this,3,e)},proto.hub.pb.GetOrgReply.prototype.getKey=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.GetOrgReply.prototype.getKey_asB64=function(){return o.Message.bytesAsB64(this.getKey())},proto.hub.pb.GetOrgReply.prototype.getKey_asU8=function(){return o.Message.bytesAsU8(this.getKey())},proto.hub.pb.GetOrgReply.prototype.setKey=function(e){return o.Message.setProto3BytesField(this,1,e)},proto.hub.pb.GetOrgReply.prototype.getName=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.hub.pb.GetOrgReply.prototype.setName=function(e){return o.Message.setProto3StringField(this,2,e)},proto.hub.pb.GetOrgReply.prototype.getSlug=function(){return o.Message.getFieldWithDefault(this,3,"")},proto.hub.pb.GetOrgReply.prototype.setSlug=function(e){return o.Message.setProto3StringField(this,3,e)},proto.hub.pb.GetOrgReply.prototype.getHost=function(){return o.Message.getFieldWithDefault(this,4,"")},proto.hub.pb.GetOrgReply.prototype.setHost=function(e){return o.Message.setProto3StringField(this,4,e)},proto.hub.pb.GetOrgReply.prototype.getMembersList=function(){return o.Message.getRepeatedWrapperField(this,proto.hub.pb.GetOrgReply.Member,5)},proto.hub.pb.GetOrgReply.prototype.setMembersList=function(e){return o.Message.setRepeatedWrapperField(this,5,e)},proto.hub.pb.GetOrgReply.prototype.addMembers=function(e,t){return o.Message.addToRepeatedWrapperField(this,5,e,proto.hub.pb.GetOrgReply.Member,t)},proto.hub.pb.GetOrgReply.prototype.clearMembersList=function(){return this.setMembersList([])},proto.hub.pb.GetOrgReply.prototype.getCreatedat=function(){return o.Message.getFieldWithDefault(this,6,0)},proto.hub.pb.GetOrgReply.prototype.setCreatedat=function(e){return o.Message.setProto3IntField(this,6,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.ListOrgsRequest.prototype.toObject=function(e){return proto.hub.pb.ListOrgsRequest.toObject(e,this)},proto.hub.pb.ListOrgsRequest.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.ListOrgsRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.ListOrgsRequest;return proto.hub.pb.ListOrgsRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.ListOrgsRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.ListOrgsRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.ListOrgsRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.ListOrgsRequest.serializeBinaryToWriter=function(e,t){},proto.hub.pb.ListOrgsReply.repeatedFields_=[1],o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.ListOrgsReply.prototype.toObject=function(e){return proto.hub.pb.ListOrgsReply.toObject(e,this)},proto.hub.pb.ListOrgsReply.toObject=function(e,t){var r={listList:o.Message.toObjectList(t.getListList(),proto.hub.pb.GetOrgReply.toObject,e)};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.ListOrgsReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.ListOrgsReply;return proto.hub.pb.ListOrgsReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.ListOrgsReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=new proto.hub.pb.GetOrgReply;t.readMessage(r,proto.hub.pb.GetOrgReply.deserializeBinaryFromReader),e.addList(r);break;default:t.skipField()}}return e},proto.hub.pb.ListOrgsReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.ListOrgsReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.ListOrgsReply.serializeBinaryToWriter=function(e,t){var r;(r=e.getListList()).length>0&&t.writeRepeatedMessage(1,r,proto.hub.pb.GetOrgReply.serializeBinaryToWriter)},proto.hub.pb.ListOrgsReply.prototype.getListList=function(){return o.Message.getRepeatedWrapperField(this,proto.hub.pb.GetOrgReply,1)},proto.hub.pb.ListOrgsReply.prototype.setListList=function(e){return o.Message.setRepeatedWrapperField(this,1,e)},proto.hub.pb.ListOrgsReply.prototype.addList=function(e,t){return o.Message.addToRepeatedWrapperField(this,1,e,proto.hub.pb.GetOrgReply,t)},proto.hub.pb.ListOrgsReply.prototype.clearListList=function(){return this.setListList([])},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.RemoveOrgRequest.prototype.toObject=function(e){return proto.hub.pb.RemoveOrgRequest.toObject(e,this)},proto.hub.pb.RemoveOrgRequest.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.RemoveOrgRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.RemoveOrgRequest;return proto.hub.pb.RemoveOrgRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.RemoveOrgRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.RemoveOrgRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.RemoveOrgRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.RemoveOrgRequest.serializeBinaryToWriter=function(e,t){},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.RemoveOrgReply.prototype.toObject=function(e){return proto.hub.pb.RemoveOrgReply.toObject(e,this)},proto.hub.pb.RemoveOrgReply.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.RemoveOrgReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.RemoveOrgReply;return proto.hub.pb.RemoveOrgReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.RemoveOrgReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.RemoveOrgReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.RemoveOrgReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.RemoveOrgReply.serializeBinaryToWriter=function(e,t){},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.InviteToOrgRequest.prototype.toObject=function(e){return proto.hub.pb.InviteToOrgRequest.toObject(e,this)},proto.hub.pb.InviteToOrgRequest.toObject=function(e,t){var r={email:o.Message.getFieldWithDefault(t,1,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.InviteToOrgRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.InviteToOrgRequest;return proto.hub.pb.InviteToOrgRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.InviteToOrgRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setEmail(r);break;default:t.skipField()}}return e},proto.hub.pb.InviteToOrgRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.InviteToOrgRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.InviteToOrgRequest.serializeBinaryToWriter=function(e,t){var r;(r=e.getEmail()).length>0&&t.writeString(1,r)},proto.hub.pb.InviteToOrgRequest.prototype.getEmail=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.InviteToOrgRequest.prototype.setEmail=function(e){return o.Message.setProto3StringField(this,1,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.InviteToOrgReply.prototype.toObject=function(e){return proto.hub.pb.InviteToOrgReply.toObject(e,this)},proto.hub.pb.InviteToOrgReply.toObject=function(e,t){var r={token:o.Message.getFieldWithDefault(t,1,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.InviteToOrgReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.InviteToOrgReply;return proto.hub.pb.InviteToOrgReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.InviteToOrgReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setToken(r);break;default:t.skipField()}}return e},proto.hub.pb.InviteToOrgReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.InviteToOrgReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.InviteToOrgReply.serializeBinaryToWriter=function(e,t){var r;(r=e.getToken()).length>0&&t.writeString(1,r)},proto.hub.pb.InviteToOrgReply.prototype.getToken=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.InviteToOrgReply.prototype.setToken=function(e){return o.Message.setProto3StringField(this,1,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.LeaveOrgRequest.prototype.toObject=function(e){return proto.hub.pb.LeaveOrgRequest.toObject(e,this)},proto.hub.pb.LeaveOrgRequest.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.LeaveOrgRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.LeaveOrgRequest;return proto.hub.pb.LeaveOrgRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.LeaveOrgRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.LeaveOrgRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.LeaveOrgRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.LeaveOrgRequest.serializeBinaryToWriter=function(e,t){},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.LeaveOrgReply.prototype.toObject=function(e){return proto.hub.pb.LeaveOrgReply.toObject(e,this)},proto.hub.pb.LeaveOrgReply.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.LeaveOrgReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.LeaveOrgReply;return proto.hub.pb.LeaveOrgReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.LeaveOrgReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.LeaveOrgReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.LeaveOrgReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.LeaveOrgReply.serializeBinaryToWriter=function(e,t){},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.IsUsernameAvailableRequest.prototype.toObject=function(e){return proto.hub.pb.IsUsernameAvailableRequest.toObject(e,this)},proto.hub.pb.IsUsernameAvailableRequest.toObject=function(e,t){var r={username:o.Message.getFieldWithDefault(t,1,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.IsUsernameAvailableRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.IsUsernameAvailableRequest;return proto.hub.pb.IsUsernameAvailableRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.IsUsernameAvailableRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setUsername(r);break;default:t.skipField()}}return e},proto.hub.pb.IsUsernameAvailableRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.IsUsernameAvailableRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.IsUsernameAvailableRequest.serializeBinaryToWriter=function(e,t){var r;(r=e.getUsername()).length>0&&t.writeString(1,r)},proto.hub.pb.IsUsernameAvailableRequest.prototype.getUsername=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.IsUsernameAvailableRequest.prototype.setUsername=function(e){return o.Message.setProto3StringField(this,1,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.IsUsernameAvailableReply.prototype.toObject=function(e){return proto.hub.pb.IsUsernameAvailableReply.toObject(e,this)},proto.hub.pb.IsUsernameAvailableReply.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.IsUsernameAvailableReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.IsUsernameAvailableReply;return proto.hub.pb.IsUsernameAvailableReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.IsUsernameAvailableReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.IsUsernameAvailableReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.IsUsernameAvailableReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.IsUsernameAvailableReply.serializeBinaryToWriter=function(e,t){},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.IsOrgNameAvailableRequest.prototype.toObject=function(e){return proto.hub.pb.IsOrgNameAvailableRequest.toObject(e,this)},proto.hub.pb.IsOrgNameAvailableRequest.toObject=function(e,t){var r={name:o.Message.getFieldWithDefault(t,1,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.IsOrgNameAvailableRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.IsOrgNameAvailableRequest;return proto.hub.pb.IsOrgNameAvailableRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.IsOrgNameAvailableRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setName(r);break;default:t.skipField()}}return e},proto.hub.pb.IsOrgNameAvailableRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.IsOrgNameAvailableRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.IsOrgNameAvailableRequest.serializeBinaryToWriter=function(e,t){var r;(r=e.getName()).length>0&&t.writeString(1,r)},proto.hub.pb.IsOrgNameAvailableRequest.prototype.getName=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.IsOrgNameAvailableRequest.prototype.setName=function(e){return o.Message.setProto3StringField(this,1,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.IsOrgNameAvailableReply.prototype.toObject=function(e){return proto.hub.pb.IsOrgNameAvailableReply.toObject(e,this)},proto.hub.pb.IsOrgNameAvailableReply.toObject=function(e,t){var r={slug:o.Message.getFieldWithDefault(t,1,""),host:o.Message.getFieldWithDefault(t,2,"")};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.IsOrgNameAvailableReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.IsOrgNameAvailableReply;return proto.hub.pb.IsOrgNameAvailableReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.IsOrgNameAvailableReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){switch(t.getFieldNumber()){case 1:var r=t.readString();e.setSlug(r);break;case 2:r=t.readString();e.setHost(r);break;default:t.skipField()}}return e},proto.hub.pb.IsOrgNameAvailableReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.IsOrgNameAvailableReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.IsOrgNameAvailableReply.serializeBinaryToWriter=function(e,t){var r=void 0;(r=e.getSlug()).length>0&&t.writeString(1,r),(r=e.getHost()).length>0&&t.writeString(2,r)},proto.hub.pb.IsOrgNameAvailableReply.prototype.getSlug=function(){return o.Message.getFieldWithDefault(this,1,"")},proto.hub.pb.IsOrgNameAvailableReply.prototype.setSlug=function(e){return o.Message.setProto3StringField(this,1,e)},proto.hub.pb.IsOrgNameAvailableReply.prototype.getHost=function(){return o.Message.getFieldWithDefault(this,2,"")},proto.hub.pb.IsOrgNameAvailableReply.prototype.setHost=function(e){return o.Message.setProto3StringField(this,2,e)},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.DestroyAccountRequest.prototype.toObject=function(e){return proto.hub.pb.DestroyAccountRequest.toObject(e,this)},proto.hub.pb.DestroyAccountRequest.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.DestroyAccountRequest.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.DestroyAccountRequest;return proto.hub.pb.DestroyAccountRequest.deserializeBinaryFromReader(r,t)},proto.hub.pb.DestroyAccountRequest.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.DestroyAccountRequest.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.DestroyAccountRequest.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.DestroyAccountRequest.serializeBinaryToWriter=function(e,t){},o.Message.GENERATE_TO_OBJECT&&(proto.hub.pb.DestroyAccountReply.prototype.toObject=function(e){return proto.hub.pb.DestroyAccountReply.toObject(e,this)},proto.hub.pb.DestroyAccountReply.toObject=function(e,t){var r={};return e&&(r.$jspbMessageInstance=t),r}),proto.hub.pb.DestroyAccountReply.deserializeBinary=function(e){var t=new o.BinaryReader(e),r=new proto.hub.pb.DestroyAccountReply;return proto.hub.pb.DestroyAccountReply.deserializeBinaryFromReader(r,t)},proto.hub.pb.DestroyAccountReply.deserializeBinaryFromReader=function(e,t){for(;t.nextField()&&!t.isEndGroup();){t.getFieldNumber();t.skipField()}return e},proto.hub.pb.DestroyAccountReply.prototype.serializeBinary=function(){var e=new o.BinaryWriter;return proto.hub.pb.DestroyAccountReply.serializeBinaryToWriter(this,e),e.getResultBuffer()},proto.hub.pb.DestroyAccountReply.serializeBinaryToWriter=function(e,t){},proto.hub.pb.KeyType={ACCOUNT:0,USER:1},n.object.extend(t,proto.hub.pb)},function(e,t,r){!function(){function t(e,t,r){this.next=r,r&&(r.prev=this),this.prev=t,t&&(t.next=this),this.data=e}function r(){if(!(this instanceof r))return new r;this._head=null,this._tail=null,this.length=0}r.prototype={push:function(e){this._tail=new t(e,this._tail,null),this._head||(this._head=this._tail),this.length++},pop:function(){if(0!==this.length){var e=this._tail;return this._tail=e.prev,e.prev&&(e.prev=this._tail.next=null),this.length--,1===this.length?this._head=this._tail:0===this.length&&(this._head=this._tail=null),e.data}},unshift:function(e){this._head=new t(e,null,this._head),this._tail||(this._tail=this._head),this.length++},shift:function(){if(0!==this.length){var e=this._head;return this._head=e.next,e.next&&(e.next=this._head.prev=null),this.length--,1===this.length?this._tail=this._head:0===this.length&&(this._head=this._tail=null),e.data}},item:function(e){e<0&&(e=this.length+e);for(var t=this._head;e-- >0&&t;)t=t.next;return t?t.data:void 0},slice:function(e,t){if(e||(e=0),t||(t=this.length),t<0&&(t=this.length+t),e<0&&(e=this.length+e),t===e)return[];if(t<e)throw new Error("invalid offset: "+e+","+t+" (length="+this.length+")");for(var r=t-e,o=new Array(r),n=0,s=this._head;e-- >0&&s;)s=s.next;for(;n<r&&s;)o[n++]=s.data,s=s.next;return o},drop:function(){r.call(this)},forEach:function(e,t){for(var r=this._head,o=0,n=this.length;o<n&&r;)e.call(t||this,r.data,o,this),r=r.next,o++},map:function(e,t){var o=new r;return this.forEach((function(r,n,s){o.push(e.call(t||s,r,n,s))})),o},filter:function(e,t){var o=new r;return this.forEach((function(r,n,s){e.call(t||s,r,n,s)&&o.push(r)})),o},reduce:function(e,t,r){var o=0,n=this._head,s=this.length;for(t||(o=1,t=n&&n.data,n=n&&n.next);o<s&&n;)t=e.call(r||this,t,n.data,this),o++,n=n.next;return t}},e.exports=r}()},function(e,t,r){"use strict";function o(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,"__esModule",{value:!0});var n=r(5);t.Context=n.Context,o(r(36)),o(r(63));var s=r(72);t.createAPISig=s.createAPISig},function(e,t,r){"use strict";t.byteLength=function(e){var t=g(e),r=t[0],o=t[1];return 3*(r+o)/4-o},t.toByteArray=function(e){var t,r,o=g(e),i=o[0],a=o[1],u=new s(function(e,t,r){return 3*(t+r)/4-r}(0,i,a)),l=0,p=a>0?i-4:i;for(r=0;r<p;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],u[l++]=t>>16&255,u[l++]=t>>8&255,u[l++]=255&t;2===a&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,u[l++]=255&t);1===a&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,u[l++]=t>>8&255,u[l++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,n=r%3,s=[],i=0,a=r-n;i<a;i+=16383)s.push(l(e,i,i+16383>a?a:i+16383));1===n?(t=e[r-1],s.push(o[t>>2]+o[t<<4&63]+"==")):2===n&&(t=(e[r-2]<<8)+e[r-1],s.push(o[t>>10]+o[t>>4&63]+o[t<<2&63]+"="));return s.join("")};for(var o=[],n=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=i.length;a<u;++a)o[a]=i[a],n[i.charCodeAt(a)]=a;function g(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function l(e,t,r){for(var n,s,i=[],a=t;a<r;a+=3)n=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),i.push(o[(s=n)>>18&63]+o[s>>12&63]+o[s>>6&63]+o[63&s]);return i.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,o,n){var s,i,a=8*n-o-1,u=(1<<a)-1,g=u>>1,l=-7,p=r?n-1:0,c=r?-1:1,h=e[t+p];for(p+=c,s=h&(1<<-l)-1,h>>=-l,l+=a;l>0;s=256*s+e[t+p],p+=c,l-=8);for(i=s&(1<<-l)-1,s>>=-l,l+=o;l>0;i=256*i+e[t+p],p+=c,l-=8);if(0===s)s=1-g;else{if(s===u)return i?NaN:1/0*(h?-1:1);i+=Math.pow(2,o),s-=g}return(h?-1:1)*i*Math.pow(2,s-o)},t.write=function(e,t,r,o,n,s){var i,a,u,g=8*s-n-1,l=(1<<g)-1,p=l>>1,c=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,h=o?0:s-1,d=o?1:-1,f=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,i=l):(i=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-i))<1&&(i--,u*=2),(t+=i+p>=1?c/u:c*Math.pow(2,1-p))*u>=2&&(i++,u/=2),i+p>=l?(a=0,i=l):i+p>=1?(a=(t*u-1)*Math.pow(2,n),i+=p):(a=t*Math.pow(2,p-1)*Math.pow(2,n),i=0));n>=8;e[r+h]=255&a,h+=d,a/=256,n-=8);for(i=i<<n|a,g+=n;g>0;e[r+h]=255&i,h+=d,i/=256,g-=8);e[r+h-d]|=128*f}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){"use strict";const o=r(31),n=r(8),s=r(33),i=r(34),a=r(35),u=[["base1","1","","1"],["base2","0",n,"01"],["base8","7",n,"01234567"],["base10","9",n,"0123456789"],["base16","f",s,"0123456789abcdef"],["base32","b",i,"abcdefghijklmnopqrstuvwxyz234567"],["base32pad","c",i,"abcdefghijklmnopqrstuvwxyz234567="],["base32hex","v",i,"0123456789abcdefghijklmnopqrstuv"],["base32hexpad","t",i,"0123456789abcdefghijklmnopqrstuv="],["base32z","h",i,"ybndrfg8ejkmcpqxot1uwisza345h769"],["base58flickr","Z",n,"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"],["base58btc","z",n,"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"],["base64","m",a,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"],["base64pad","M",a,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="],["base64url","u",a,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"],["base64urlpad","U",a,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_="]],g=u.reduce((e,t)=>(e[t[0]]=new o(t[0],t[1],t[2],t[3]),e),{}),l=u.reduce((e,t)=>(e[t[1]]=g[t[0]],e),{});e.exports={names:g,codes:l}},function(e,t,r){"use strict";e.exports=class{constructor(e,t,r,o){this.name=e,this.code=t,this.alphabet=o,r&&o&&(this.engine=r(o))}encode(e){return this.engine.encode(e)}decode(e){return this.engine.decode(e)}isImplemented(){return this.engine}}},function(e,t,r){var o=r(0),n=o.Buffer;function s(e,t){for(var r in e)t[r]=e[r]}function i(e,t,r){return n(e,t,r)}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?e.exports=o:(s(o,t),t.Buffer=i),i.prototype=Object.create(n.prototype),s(n,i),i.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return n(e,t,r)},i.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var o=n(e);return void 0!==t?"string"==typeof r?o.fill(t,r):o.fill(t):o.fill(0),o},i.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n(e)},i.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return o.SlowBuffer(e)}},function(e,t,r){"use strict";const{Buffer:o}=r(0);e.exports=function(e){return{encode:e=>"string"==typeof e?o.from(e).toString("hex"):e.toString("hex"),decode(t){for(const r of t)if(e.indexOf(r)<0)throw new Error("invalid base16 character");return o.from(t,"hex")}}}},function(e,t,r){"use strict";function o(e,t){const r=e.byteLength,o=new Uint8Array(e),n=t.indexOf("=")===t.length-1;n&&(t=t.substring(0,t.length-1));let s=0,i=0,a="";for(let e=0;e<r;e++)for(i=i<<8|o[e],s+=8;s>=5;)a+=t[i>>>s-5&31],s-=5;if(s>0&&(a+=t[i<<5-s&31]),n)for(;a.length%8!=0;)a+="=";return a}e.exports=function(e){return{encode:t=>o("string"==typeof t?Uint8Array.from(t):t,e),decode(t){for(const r of t)if(e.indexOf(r)<0)throw new Error("invalid base32 character");return function(e,t){const r=(e=e.replace(new RegExp("=","g"),"")).length;let o=0,n=0,s=0;const i=new Uint8Array(5*r/8|0);for(let a=0;a<r;a++)n=n<<5|t.indexOf(e[a]),o+=5,o>=8&&(i[s++]=n>>>o-8&255,o-=8);return i.buffer}(t,e)}}}},function(e,t,r){"use strict";const{Buffer:o}=r(0);e.exports=function(e){const t=e.indexOf("=")>-1,r=e.indexOf("-")>-1&&e.indexOf("_")>-1;return{encode(e){let n="";n="string"==typeof e?o.from(e).toString("base64"):e.toString("base64"),r&&(n=n.replace(/\+/g,"-").replace(/\//g,"_"));const s=n.indexOf("=");return s>0&&!t&&(n=n.substring(0,s)),n},decode(t){for(const r of t)if(e.indexOf(r)<0)throw new Error("invalid base64 character");return o.from(t,"base64")}}}},function(e,t,r){"use strict";(function(e){var o=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(n,s){function i(e){try{u(o.next(e))}catch(e){s(e)}}function a(e){try{u(o.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,a)}u((o=o.apply(e,t||[])).next())}))},n=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(r){t[r]=e[r]&&function(t){return new Promise((function(o,n){(function(e,t,r,o){Promise.resolve(o).then((function(t){e({value:t,done:r})}),t)})(o,n,(t=e[r](t)).done,t.value)}))}}},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const a=s(r(11)),u=i(r(12)),g=r(37),l=s(r(38)),p=r(93),c=r(2),h=r(5),d=r(62),f=a.default.getLogger("buckets");t.Buckets=class{constructor(e=new h.Context){this.context=e,this.serviceHost=e.host,this.rpcOptions={transport:e.transport,debug:e.debug}}init(e,t){return o(this,void 0,void 0,(function*(){f.debug("init request");const r=new u.InitRequest;return r.setName(e),(yield this.unary(g.API.Init,r,t)).toObject()}))}list(e){return o(this,void 0,void 0,(function*(){f.debug("list request");const t=new u.ListRequest;return(yield this.unary(g.API.List,t,e)).toObject().rootsList}))}listPath(e,t,r){return o(this,void 0,void 0,(function*(){f.debug("list path request");const o=new u.ListPathRequest;return o.setKey(e),o.setPath(t),(yield this.unary(g.API.ListPath,o,r)).toObject()}))}remove(e,t){return o(this,void 0,void 0,(function*(){f.debug("remove request");const r=new u.RemoveRequest;r.setKey(e),yield this.unary(g.API.Remove,r,t)}))}removePath(e,t,r){return o(this,void 0,void 0,(function*(){f.debug("remove path request");const o=new u.RemovePathRequest;o.setKey(e),o.setPath(t),yield this.unary(g.API.RemovePath,o,r)}))}pushPath(e,t,r,s,i){return o(this,void 0,void 0,(function*(){return new Promise((a,p)=>o(this,void 0,void 0,(function*(){var o,h;const f=(yield d.normaliseInput(r).next()).value,b=c.grpc.client(g.API.PushPath,{host:this.serviceHost,transport:this.rpcOptions.transport,debug:this.rpcOptions.debug});if(b.onMessage(e=>{var t,r,o;if(e.hasError())p(new Error(e.getError()));else if(e.hasEvent()){const n=null===(t=e.getEvent())||void 0===t?void 0:t.toObject();if(null==n?void 0:n.path){const e=n.path.startsWith("/ipfs/")?n.path.split("/ipfs/")[1]:n.path,t=new l.default(e),s={path:{path:"/ipfs/"+t.toString(),cid:t,root:t,remainder:""},root:null!==(o=null===(r=n.root)||void 0===r?void 0:r.path)&&void 0!==o?o:""};a(s)}else(null==i?void 0:i.progress)&&i.progress(null==n?void 0:n.bytes)}else p(new Error("Invalid reply"))}),b.onEnd(e=>{e===c.grpc.Code.OK?a():p(new Error(e.toString()))}),f){const r=new u.PushPathRequest.Header;r.setPath(f.path||t),r.setKey(e);const i=new u.PushPathRequest;if(i.setHeader(r),b.start(this.context.withContext(s).toJSON()),b.send(i),f.content){try{for(var y,m=n(f.content);!(y=yield m.next()).done;){const e=y.value,t=new u.PushPathRequest;t.setChunk(e),b.send(t)}}catch(e){o={error:e}}finally{try{y&&!y.done&&(h=m.return)&&(yield h.call(m))}finally{if(o)throw o.error}}b.finishSend()}}})))}))}pullPath(t,r,n,s){const i=this.context.withContext(n).toJSON(),a=new p.Channel,l=new u.PullPathRequest;l.setKey(t),l.setPath(r);let h=0;const d=c.grpc.invoke(g.API.PullPath,{host:this.serviceHost,transport:this.rpcOptions.transport,debug:this.rpcOptions.debug,request:l,metadata:i,onMessage:e=>o(this,void 0,void 0,(function*(){const t=e.getChunk_asU8();yield a.push(t),h+=t.byteLength,(null==s?void 0:s.progress)&&s.progress(h)})),onEnd:(t,r,n)=>o(this,void 0,void 0,(function*(){if(t!==c.grpc.Code.OK)throw new Error(r);yield a.push(e.alloc(0),!0)}))});return a.wrap(()=>d.close())}unary(e,t,r){return new Promise((o,n)=>{const s=this.context.withContext(r);c.grpc.unary(e,{request:t,host:this.serviceHost,transport:this.rpcOptions.transport,debug:this.rpcOptions.debug,metadata:s.toJSON(),onEnd:e=>{const{status:t,statusMessage:r,message:s}=e;t===c.grpc.Code.OK?s?o(s):o():n(new Error(r))}})})}}}).call(this,r(0).Buffer)},function(e,t,r){var o=r(12),n=r(2).grpc,s=function(){function e(){}return e.serviceName="buckets.pb.API",e}();function i(e,t){this.serviceHost=e,this.options=t||{}}s.Init={methodName:"Init",service:s,requestStream:!1,responseStream:!1,requestType:o.InitRequest,responseType:o.InitReply},s.Links={methodName:"Links",service:s,requestStream:!1,responseStream:!1,requestType:o.LinksRequest,responseType:o.LinksReply},s.List={methodName:"List",service:s,requestStream:!1,responseStream:!1,requestType:o.ListRequest,responseType:o.ListReply},s.ListPath={methodName:"ListPath",service:s,requestStream:!1,responseStream:!1,requestType:o.ListPathRequest,responseType:o.ListPathReply},s.PushPath={methodName:"PushPath",service:s,requestStream:!0,responseStream:!0,requestType:o.PushPathRequest,responseType:o.PushPathReply},s.PullPath={methodName:"PullPath",service:s,requestStream:!1,responseStream:!0,requestType:o.PullPathRequest,responseType:o.PullPathReply},s.Remove={methodName:"Remove",service:s,requestStream:!1,responseStream:!1,requestType:o.RemoveRequest,responseType:o.RemoveReply},s.RemovePath={methodName:"RemovePath",service:s,requestStream:!1,responseStream:!1,requestType:o.RemovePathRequest,responseType:o.RemovePathReply},t.API=s,i.prototype.init=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.Init,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.links=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.Links,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.list=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.List,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.listPath=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.ListPath,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.pushPath=function(e){var t={data:[],end:[],status:[]},r=n.client(s.PushPath,{host:this.serviceHost,metadata:e,transport:this.options.transport});return r.onEnd((function(e,r,o){t.status.forEach((function(t){t({code:e,details:r,metadata:o})})),t.end.forEach((function(t){t({code:e,details:r,metadata:o})})),t=null})),r.onMessage((function(e){t.data.forEach((function(t){t(e)}))})),r.start(e),{on:function(e,r){return t[e].push(r),this},write:function(e){return r.send(e),this},end:function(){r.finishSend()},cancel:function(){t=null,r.close()}}},i.prototype.pullPath=function(e,t){var r={data:[],end:[],status:[]},o=n.invoke(s.PullPath,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onMessage:function(e){r.data.forEach((function(t){t(e)}))},onEnd:function(e,t,o){r.status.forEach((function(r){r({code:e,details:t,metadata:o})})),r.end.forEach((function(r){r({code:e,details:t,metadata:o})})),r=null}});return{on:function(e,t){return r[e].push(t),this},cancel:function(){r=null,o.close()}}},i.prototype.remove=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.Remove,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.removePath=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.RemovePath,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},t.APIClient=i},function(e,t,r){"use strict";const{Buffer:o}=r(0),n=r(13),s=r(49),i=r(55),a=r(3),u=r(60),g=r(61);class l{constructor(e,t,r,a){if(p.isCID(e)){const t=e;return this.version=t.version,this.codec=t.codec,this.multihash=o.from(t.multihash),void(this.multibaseName=t.multibaseName||(0===t.version?"base58btc":"base32"))}if("string"==typeof e){const t=s.isEncoded(e);if(t){const r=s.decode(e);this.version=parseInt(r.slice(0,1).toString("hex"),16),this.codec=i.getCodec(r.slice(1)),this.multihash=i.rmPrefix(r.slice(1)),this.multibaseName=t}else this.version=0,this.codec="dag-pb",this.multihash=n.fromB58String(e),this.multibaseName="base58btc";return l.validateCID(this),void Object.defineProperty(this,"string",{value:e})}if(o.isBuffer(e)){const t=e.slice(0,1),r=parseInt(t.toString("hex"),16);if(1===r){const t=e;this.version=r,this.codec=i.getCodec(t.slice(1)),this.multihash=i.rmPrefix(t.slice(1)),this.multibaseName="base32"}else this.version=0,this.codec="dag-pb",this.multihash=e,this.multibaseName="base58btc";l.validateCID(this)}else this.version=e,this.codec=t,this.multihash=r,this.multibaseName=a||(0===e?"base58btc":"base32"),l.validateCID(this)}get buffer(){let e=this._buffer;if(!e){if(0===this.version)e=this.multihash;else{if(1!==this.version)throw new Error("unsupported version");e=o.concat([o.from("01","hex"),i.getCodeVarint(this.codec),this.multihash])}Object.defineProperty(this,"_buffer",{value:e})}return e}get prefix(){return o.concat([o.from("0"+this.version,"hex"),i.getCodeVarint(this.codec),n.prefix(this.multihash)])}toV0(){if("dag-pb"!==this.codec)throw new Error("Cannot convert a non dag-pb CID to CIDv0");const{name:e,length:t}=n.decode(this.multihash);if("sha2-256"!==e)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");if(32!==t)throw new Error("Cannot convert non 32 byte multihash CID to CIDv0");return new p(0,this.codec,this.multihash)}toV1(){return new p(1,this.codec,this.multihash)}toBaseEncodedString(e=this.multibaseName){if(this.string&&e===this.multibaseName)return this.string;let t=null;if(0===this.version){if("base58btc"!==e)throw new Error("not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()");t=n.toB58String(this.multihash)}else{if(1!==this.version)throw new Error("unsupported version");t=s.encode(e,this.buffer).toString()}return e===this.multibaseName&&Object.defineProperty(this,"string",{value:t}),t}[Symbol.for("nodejs.util.inspect.custom")](){return"CID("+this.toString()+")"}toString(e){return this.toBaseEncodedString(e)}toJSON(){return{codec:this.codec,version:this.version,hash:this.multihash}}equals(e){return this.codec===e.codec&&this.version===e.version&&this.multihash.equals(e.multihash)}static validateCID(e){const t=u.checkCIDComponents(e);if(t)throw new Error(t)}}const p=g(l,{className:"CID",symbolName:"@ipld/js-cid/CID"});p.codecs=a,e.exports=p},function(e,t,r){"use strict";const{Buffer:o}=r(0),n=r(40);function s(e,t){if(!t)throw new Error("requires an encoded buffer");const r=i(e),n=o.from(r.code);return function(e,t){i(e).decode(t.toString())}(r.name,t),o.concat([n,t])}function i(e){let t;if(n.names[e])t=n.names[e];else{if(!n.codes[e])throw new Error("Unsupported encoding");t=n.codes[e]}if(!t.isImplemented())throw new Error("Base "+e+" is not implemented yet");return t}(t=e.exports=s).encode=function(e,t){const r=i(e);return s(r.name,o.from(r.encode(t)))},t.decode=function(e){o.isBuffer(e)&&(e=e.toString());const t=e.substring(0,1);"string"==typeof(e=e.substring(1,e.length))&&(e=o.from(e));const r=i(t);return o.from(r.decode(e.toString()))},t.isEncoded=function(e){o.isBuffer(e)&&(e=e.toString());if("[object String]"!==Object.prototype.toString.call(e))return!1;const t=e.substring(0,1);try{return i(t).name}catch(e){return!1}},t.names=Object.freeze(Object.keys(n.names)),t.codes=Object.freeze(Object.keys(n.codes))},function(e,t,r){"use strict";const o=r(41),n=r(8),s=r(42),i=r(43),a=r(44),u=[["base1","1","","1"],["base2","0",n,"01"],["base8","7",n,"01234567"],["base10","9",n,"0123456789"],["base16","f",s,"0123456789abcdef"],["base32","b",i,"abcdefghijklmnopqrstuvwxyz234567"],["base32pad","c",i,"abcdefghijklmnopqrstuvwxyz234567="],["base32hex","v",i,"0123456789abcdefghijklmnopqrstuv"],["base32hexpad","t",i,"0123456789abcdefghijklmnopqrstuv="],["base32z","h",i,"ybndrfg8ejkmcpqxot1uwisza345h769"],["base58flickr","Z",n,"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"],["base58btc","z",n,"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"],["base64","m",a,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"],["base64pad","M",a,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="],["base64url","u",a,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"],["base64urlpad","U",a,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_="]],g=u.reduce((e,t)=>(e[t[0]]=new o(t[0],t[1],t[2],t[3]),e),{}),l=u.reduce((e,t)=>(e[t[1]]=g[t[0]],e),{});e.exports={names:g,codes:l}},function(e,t,r){"use strict";e.exports=class{constructor(e,t,r,o){this.name=e,this.code=t,this.alphabet=o,r&&o&&(this.engine=r(o))}encode(e){return this.engine.encode(e)}decode(e){return this.engine.decode(e)}isImplemented(){return this.engine}}},function(e,t,r){"use strict";const{Buffer:o}=r(0);e.exports=function(e){return{encode:e=>"string"==typeof e?o.from(e).toString("hex"):e.toString("hex"),decode(t){for(const r of t)if(e.indexOf(r)<0)throw new Error("invalid base16 character");return o.from(t,"hex")}}}},function(e,t,r){"use strict";function o(e,t){const r=e.byteLength,o=new Uint8Array(e),n=t.indexOf("=")===t.length-1;n&&(t=t.substring(0,t.length-1));let s=0,i=0,a="";for(let e=0;e<r;e++)for(i=i<<8|o[e],s+=8;s>=5;)a+=t[i>>>s-5&31],s-=5;if(s>0&&(a+=t[i<<5-s&31]),n)for(;a.length%8!=0;)a+="=";return a}e.exports=function(e){return{encode:t=>o("string"==typeof t?Uint8Array.from(t):t,e),decode(t){for(const r of t)if(e.indexOf(r)<0)throw new Error("invalid base32 character");return function(e,t){const r=(e=e.replace(new RegExp("=","g"),"")).length;let o=0,n=0,s=0;const i=new Uint8Array(5*r/8|0);for(let a=0;a<r;a++)n=n<<5|t.indexOf(e[a]),o+=5,o>=8&&(i[s++]=n>>>o-8&255,o-=8);return i.buffer}(t,e)}}}},function(e,t,r){"use strict";const{Buffer:o}=r(0);e.exports=function(e){const t=e.indexOf("=")>-1,r=e.indexOf("-")>-1&&e.indexOf("_")>-1;return{encode(e){let n="";n="string"==typeof e?o.from(e).toString("base64"):e.toString("base64"),r&&(n=n.replace(/\+/g,"-").replace(/\//g,"_"));const s=n.indexOf("=");return s>0&&!t&&(n=n.substring(0,s)),n},decode(t){for(const r of t)if(e.indexOf(r)<0)throw new Error("invalid base64 character");return o.from(t,"base64")}}}},function(e,t){e.exports=function e(t,o,n){o=o||[];var s=n=n||0;for(;t>=r;)o[n++]=255&t|128,t/=128;for(;-128&t;)o[n++]=255&t|128,t>>>=7;return o[n]=0|t,e.bytes=n-s+1,o};var r=Math.pow(2,31)},function(e,t){e.exports=function e(t,r){var o,n=0,s=0,i=r=r||0,a=t.length;do{if(i>=a)throw e.bytes=0,new RangeError("Could not decode varint");o=t[i++],n+=s<28?(127&o)<<s:(127&o)*Math.pow(2,s),s+=7}while(o>=128);return e.bytes=i-r,n}},function(e,t){var r=Math.pow(2,7),o=Math.pow(2,14),n=Math.pow(2,21),s=Math.pow(2,28),i=Math.pow(2,35),a=Math.pow(2,42),u=Math.pow(2,49),g=Math.pow(2,56),l=Math.pow(2,63);e.exports=function(e){return e<r?1:e<o?2:e<n?3:e<s?4:e<i?5:e<a?6:e<u?7:e<g?8:e<l?9:10}},function(e,t,r){"use strict";t.names=Object.freeze({identity:0,sha1:17,"sha2-256":18,"sha2-512":19,"dbl-sha2-256":86,"sha3-224":23,"sha3-256":22,"sha3-384":21,"sha3-512":20,"shake-128":24,"shake-256":25,"keccak-224":26,"keccak-256":27,"keccak-384":28,"keccak-512":29,"murmur3-128":34,"murmur3-32":35,md4:212,md5:213,"blake2b-8":45569,"blake2b-16":45570,"blake2b-24":45571,"blake2b-32":45572,"blake2b-40":45573,"blake2b-48":45574,"blake2b-56":45575,"blake2b-64":45576,"blake2b-72":45577,"blake2b-80":45578,"blake2b-88":45579,"blake2b-96":45580,"blake2b-104":45581,"blake2b-112":45582,"blake2b-120":45583,"blake2b-128":45584,"blake2b-136":45585,"blake2b-144":45586,"blake2b-152":45587,"blake2b-160":45588,"blake2b-168":45589,"blake2b-176":45590,"blake2b-184":45591,"blake2b-192":45592,"blake2b-200":45593,"blake2b-208":45594,"blake2b-216":45595,"blake2b-224":45596,"blake2b-232":45597,"blake2b-240":45598,"blake2b-248":45599,"blake2b-256":45600,"blake2b-264":45601,"blake2b-272":45602,"blake2b-280":45603,"blake2b-288":45604,"blake2b-296":45605,"blake2b-304":45606,"blake2b-312":45607,"blake2b-320":45608,"blake2b-328":45609,"blake2b-336":45610,"blake2b-344":45611,"blake2b-352":45612,"blake2b-360":45613,"blake2b-368":45614,"blake2b-376":45615,"blake2b-384":45616,"blake2b-392":45617,"blake2b-400":45618,"blake2b-408":45619,"blake2b-416":45620,"blake2b-424":45621,"blake2b-432":45622,"blake2b-440":45623,"blake2b-448":45624,"blake2b-456":45625,"blake2b-464":45626,"blake2b-472":45627,"blake2b-480":45628,"blake2b-488":45629,"blake2b-496":45630,"blake2b-504":45631,"blake2b-512":45632,"blake2s-8":45633,"blake2s-16":45634,"blake2s-24":45635,"blake2s-32":45636,"blake2s-40":45637,"blake2s-48":45638,"blake2s-56":45639,"blake2s-64":45640,"blake2s-72":45641,"blake2s-80":45642,"blake2s-88":45643,"blake2s-96":45644,"blake2s-104":45645,"blake2s-112":45646,"blake2s-120":45647,"blake2s-128":45648,"blake2s-136":45649,"blake2s-144":45650,"blake2s-152":45651,"blake2s-160":45652,"blake2s-168":45653,"blake2s-176":45654,"blake2s-184":45655,"blake2s-192":45656,"blake2s-200":45657,"blake2s-208":45658,"blake2s-216":45659,"blake2s-224":45660,"blake2s-232":45661,"blake2s-240":45662,"blake2s-248":45663,"blake2s-256":45664,"Skein256-8":45825,"Skein256-16":45826,"Skein256-24":45827,"Skein256-32":45828,"Skein256-40":45829,"Skein256-48":45830,"Skein256-56":45831,"Skein256-64":45832,"Skein256-72":45833,"Skein256-80":45834,"Skein256-88":45835,"Skein256-96":45836,"Skein256-104":45837,"Skein256-112":45838,"Skein256-120":45839,"Skein256-128":45840,"Skein256-136":45841,"Skein256-144":45842,"Skein256-152":45843,"Skein256-160":45844,"Skein256-168":45845,"Skein256-176":45846,"Skein256-184":45847,"Skein256-192":45848,"Skein256-200":45849,"Skein256-208":45850,"Skein256-216":45851,"Skein256-224":45852,"Skein256-232":45853,"Skein256-240":45854,"Skein256-248":45855,"Skein256-256":45856,"Skein512-8":45857,"Skein512-16":45858,"Skein512-24":45859,"Skein512-32":45860,"Skein512-40":45861,"Skein512-48":45862,"Skein512-56":45863,"Skein512-64":45864,"Skein512-72":45865,"Skein512-80":45866,"Skein512-88":45867,"Skein512-96":45868,"Skein512-104":45869,"Skein512-112":45870,"Skein512-120":45871,"Skein512-128":45872,"Skein512-136":45873,"Skein512-144":45874,"Skein512-152":45875,"Skein512-160":45876,"Skein512-168":45877,"Skein512-176":45878,"Skein512-184":45879,"Skein512-192":45880,"Skein512-200":45881,"Skein512-208":45882,"Skein512-216":45883,"Skein512-224":45884,"Skein512-232":45885,"Skein512-240":45886,"Skein512-248":45887,"Skein512-256":45888,"Skein512-264":45889,"Skein512-272":45890,"Skein512-280":45891,"Skein512-288":45892,"Skein512-296":45893,"Skein512-304":45894,"Skein512-312":45895,"Skein512-320":45896,"Skein512-328":45897,"Skein512-336":45898,"Skein512-344":45899,"Skein512-352":45900,"Skein512-360":45901,"Skein512-368":45902,"Skein512-376":45903,"Skein512-384":45904,"Skein512-392":45905,"Skein512-400":45906,"Skein512-408":45907,"Skein512-416":45908,"Skein512-424":45909,"Skein512-432":45910,"Skein512-440":45911,"Skein512-448":45912,"Skein512-456":45913,"Skein512-464":45914,"Skein512-472":45915,"Skein512-480":45916,"Skein512-488":45917,"Skein512-496":45918,"Skein512-504":45919,"Skein512-512":45920,"Skein1024-8":45921,"Skein1024-16":45922,"Skein1024-24":45923,"Skein1024-32":45924,"Skein1024-40":45925,"Skein1024-48":45926,"Skein1024-56":45927,"Skein1024-64":45928,"Skein1024-72":45929,"Skein1024-80":45930,"Skein1024-88":45931,"Skein1024-96":45932,"Skein1024-104":45933,"Skein1024-112":45934,"Skein1024-120":45935,"Skein1024-128":45936,"Skein1024-136":45937,"Skein1024-144":45938,"Skein1024-152":45939,"Skein1024-160":45940,"Skein1024-168":45941,"Skein1024-176":45942,"Skein1024-184":45943,"Skein1024-192":45944,"Skein1024-200":45945,"Skein1024-208":45946,"Skein1024-216":45947,"Skein1024-224":45948,"Skein1024-232":45949,"Skein1024-240":45950,"Skein1024-248":45951,"Skein1024-256":45952,"Skein1024-264":45953,"Skein1024-272":45954,"Skein1024-280":45955,"Skein1024-288":45956,"Skein1024-296":45957,"Skein1024-304":45958,"Skein1024-312":45959,"Skein1024-320":45960,"Skein1024-328":45961,"Skein1024-336":45962,"Skein1024-344":45963,"Skein1024-352":45964,"Skein1024-360":45965,"Skein1024-368":45966,"Skein1024-376":45967,"Skein1024-384":45968,"Skein1024-392":45969,"Skein1024-400":45970,"Skein1024-408":45971,"Skein1024-416":45972,"Skein1024-424":45973,"Skein1024-432":45974,"Skein1024-440":45975,"Skein1024-448":45976,"Skein1024-456":45977,"Skein1024-464":45978,"Skein1024-472":45979,"Skein1024-480":45980,"Skein1024-488":45981,"Skein1024-496":45982,"Skein1024-504":45983,"Skein1024-512":45984,"Skein1024-520":45985,"Skein1024-528":45986,"Skein1024-536":45987,"Skein1024-544":45988,"Skein1024-552":45989,"Skein1024-560":45990,"Skein1024-568":45991,"Skein1024-576":45992,"Skein1024-584":45993,"Skein1024-592":45994,"Skein1024-600":45995,"Skein1024-608":45996,"Skein1024-616":45997,"Skein1024-624":45998,"Skein1024-632":45999,"Skein1024-640":46e3,"Skein1024-648":46001,"Skein1024-656":46002,"Skein1024-664":46003,"Skein1024-672":46004,"Skein1024-680":46005,"Skein1024-688":46006,"Skein1024-696":46007,"Skein1024-704":46008,"Skein1024-712":46009,"Skein1024-720":46010,"Skein1024-728":46011,"Skein1024-736":46012,"Skein1024-744":46013,"Skein1024-752":46014,"Skein1024-760":46015,"Skein1024-768":46016,"Skein1024-776":46017,"Skein1024-784":46018,"Skein1024-792":46019,"Skein1024-800":46020,"Skein1024-808":46021,"Skein1024-816":46022,"Skein1024-824":46023,"Skein1024-832":46024,"Skein1024-840":46025,"Skein1024-848":46026,"Skein1024-856":46027,"Skein1024-864":46028,"Skein1024-872":46029,"Skein1024-880":46030,"Skein1024-888":46031,"Skein1024-896":46032,"Skein1024-904":46033,"Skein1024-912":46034,"Skein1024-920":46035,"Skein1024-928":46036,"Skein1024-936":46037,"Skein1024-944":46038,"Skein1024-952":46039,"Skein1024-960":46040,"Skein1024-968":46041,"Skein1024-976":46042,"Skein1024-984":46043,"Skein1024-992":46044,"Skein1024-1000":46045,"Skein1024-1008":46046,"Skein1024-1016":46047,"Skein1024-1024":46048}),t.codes=Object.freeze({0:"identity",17:"sha1",18:"sha2-256",19:"sha2-512",86:"dbl-sha2-256",23:"sha3-224",22:"sha3-256",21:"sha3-384",20:"sha3-512",24:"shake-128",25:"shake-256",26:"keccak-224",27:"keccak-256",28:"keccak-384",29:"keccak-512",34:"murmur3-128",35:"murmur3-32",212:"md4",213:"md5",45569:"blake2b-8",45570:"blake2b-16",45571:"blake2b-24",45572:"blake2b-32",45573:"blake2b-40",45574:"blake2b-48",45575:"blake2b-56",45576:"blake2b-64",45577:"blake2b-72",45578:"blake2b-80",45579:"blake2b-88",45580:"blake2b-96",45581:"blake2b-104",45582:"blake2b-112",45583:"blake2b-120",45584:"blake2b-128",45585:"blake2b-136",45586:"blake2b-144",45587:"blake2b-152",45588:"blake2b-160",45589:"blake2b-168",45590:"blake2b-176",45591:"blake2b-184",45592:"blake2b-192",45593:"blake2b-200",45594:"blake2b-208",45595:"blake2b-216",45596:"blake2b-224",45597:"blake2b-232",45598:"blake2b-240",45599:"blake2b-248",45600:"blake2b-256",45601:"blake2b-264",45602:"blake2b-272",45603:"blake2b-280",45604:"blake2b-288",45605:"blake2b-296",45606:"blake2b-304",45607:"blake2b-312",45608:"blake2b-320",45609:"blake2b-328",45610:"blake2b-336",45611:"blake2b-344",45612:"blake2b-352",45613:"blake2b-360",45614:"blake2b-368",45615:"blake2b-376",45616:"blake2b-384",45617:"blake2b-392",45618:"blake2b-400",45619:"blake2b-408",45620:"blake2b-416",45621:"blake2b-424",45622:"blake2b-432",45623:"blake2b-440",45624:"blake2b-448",45625:"blake2b-456",45626:"blake2b-464",45627:"blake2b-472",45628:"blake2b-480",45629:"blake2b-488",45630:"blake2b-496",45631:"blake2b-504",45632:"blake2b-512",45633:"blake2s-8",45634:"blake2s-16",45635:"blake2s-24",45636:"blake2s-32",45637:"blake2s-40",45638:"blake2s-48",45639:"blake2s-56",45640:"blake2s-64",45641:"blake2s-72",45642:"blake2s-80",45643:"blake2s-88",45644:"blake2s-96",45645:"blake2s-104",45646:"blake2s-112",45647:"blake2s-120",45648:"blake2s-128",45649:"blake2s-136",45650:"blake2s-144",45651:"blake2s-152",45652:"blake2s-160",45653:"blake2s-168",45654:"blake2s-176",45655:"blake2s-184",45656:"blake2s-192",45657:"blake2s-200",45658:"blake2s-208",45659:"blake2s-216",45660:"blake2s-224",45661:"blake2s-232",45662:"blake2s-240",45663:"blake2s-248",45664:"blake2s-256",45825:"Skein256-8",45826:"Skein256-16",45827:"Skein256-24",45828:"Skein256-32",45829:"Skein256-40",45830:"Skein256-48",45831:"Skein256-56",45832:"Skein256-64",45833:"Skein256-72",45834:"Skein256-80",45835:"Skein256-88",45836:"Skein256-96",45837:"Skein256-104",45838:"Skein256-112",45839:"Skein256-120",45840:"Skein256-128",45841:"Skein256-136",45842:"Skein256-144",45843:"Skein256-152",45844:"Skein256-160",45845:"Skein256-168",45846:"Skein256-176",45847:"Skein256-184",45848:"Skein256-192",45849:"Skein256-200",45850:"Skein256-208",45851:"Skein256-216",45852:"Skein256-224",45853:"Skein256-232",45854:"Skein256-240",45855:"Skein256-248",45856:"Skein256-256",45857:"Skein512-8",45858:"Skein512-16",45859:"Skein512-24",45860:"Skein512-32",45861:"Skein512-40",45862:"Skein512-48",45863:"Skein512-56",45864:"Skein512-64",45865:"Skein512-72",45866:"Skein512-80",45867:"Skein512-88",45868:"Skein512-96",45869:"Skein512-104",45870:"Skein512-112",45871:"Skein512-120",45872:"Skein512-128",45873:"Skein512-136",45874:"Skein512-144",45875:"Skein512-152",45876:"Skein512-160",45877:"Skein512-168",45878:"Skein512-176",45879:"Skein512-184",45880:"Skein512-192",45881:"Skein512-200",45882:"Skein512-208",45883:"Skein512-216",45884:"Skein512-224",45885:"Skein512-232",45886:"Skein512-240",45887:"Skein512-248",45888:"Skein512-256",45889:"Skein512-264",45890:"Skein512-272",45891:"Skein512-280",45892:"Skein512-288",45893:"Skein512-296",45894:"Skein512-304",45895:"Skein512-312",45896:"Skein512-320",45897:"Skein512-328",45898:"Skein512-336",45899:"Skein512-344",45900:"Skein512-352",45901:"Skein512-360",45902:"Skein512-368",45903:"Skein512-376",45904:"Skein512-384",45905:"Skein512-392",45906:"Skein512-400",45907:"Skein512-408",45908:"Skein512-416",45909:"Skein512-424",45910:"Skein512-432",45911:"Skein512-440",45912:"Skein512-448",45913:"Skein512-456",45914:"Skein512-464",45915:"Skein512-472",45916:"Skein512-480",45917:"Skein512-488",45918:"Skein512-496",45919:"Skein512-504",45920:"Skein512-512",45921:"Skein1024-8",45922:"Skein1024-16",45923:"Skein1024-24",45924:"Skein1024-32",45925:"Skein1024-40",45926:"Skein1024-48",45927:"Skein1024-56",45928:"Skein1024-64",45929:"Skein1024-72",45930:"Skein1024-80",45931:"Skein1024-88",45932:"Skein1024-96",45933:"Skein1024-104",45934:"Skein1024-112",45935:"Skein1024-120",45936:"Skein1024-128",45937:"Skein1024-136",45938:"Skein1024-144",45939:"Skein1024-152",45940:"Skein1024-160",45941:"Skein1024-168",45942:"Skein1024-176",45943:"Skein1024-184",45944:"Skein1024-192",45945:"Skein1024-200",45946:"Skein1024-208",45947:"Skein1024-216",45948:"Skein1024-224",45949:"Skein1024-232",45950:"Skein1024-240",45951:"Skein1024-248",45952:"Skein1024-256",45953:"Skein1024-264",45954:"Skein1024-272",45955:"Skein1024-280",45956:"Skein1024-288",45957:"Skein1024-296",45958:"Skein1024-304",45959:"Skein1024-312",45960:"Skein1024-320",45961:"Skein1024-328",45962:"Skein1024-336",45963:"Skein1024-344",45964:"Skein1024-352",45965:"Skein1024-360",45966:"Skein1024-368",45967:"Skein1024-376",45968:"Skein1024-384",45969:"Skein1024-392",45970:"Skein1024-400",45971:"Skein1024-408",45972:"Skein1024-416",45973:"Skein1024-424",45974:"Skein1024-432",45975:"Skein1024-440",45976:"Skein1024-448",45977:"Skein1024-456",45978:"Skein1024-464",45979:"Skein1024-472",45980:"Skein1024-480",45981:"Skein1024-488",45982:"Skein1024-496",45983:"Skein1024-504",45984:"Skein1024-512",45985:"Skein1024-520",45986:"Skein1024-528",45987:"Skein1024-536",45988:"Skein1024-544",45989:"Skein1024-552",45990:"Skein1024-560",45991:"Skein1024-568",45992:"Skein1024-576",45993:"Skein1024-584",45994:"Skein1024-592",45995:"Skein1024-600",45996:"Skein1024-608",45997:"Skein1024-616",45998:"Skein1024-624",45999:"Skein1024-632",46e3:"Skein1024-640",46001:"Skein1024-648",46002:"Skein1024-656",46003:"Skein1024-664",46004:"Skein1024-672",46005:"Skein1024-680",46006:"Skein1024-688",46007:"Skein1024-696",46008:"Skein1024-704",46009:"Skein1024-712",46010:"Skein1024-720",46011:"Skein1024-728",46012:"Skein1024-736",46013:"Skein1024-744",46014:"Skein1024-752",46015:"Skein1024-760",46016:"Skein1024-768",46017:"Skein1024-776",46018:"Skein1024-784",46019:"Skein1024-792",46020:"Skein1024-800",46021:"Skein1024-808",46022:"Skein1024-816",46023:"Skein1024-824",46024:"Skein1024-832",46025:"Skein1024-840",46026:"Skein1024-848",46027:"Skein1024-856",46028:"Skein1024-864",46029:"Skein1024-872",46030:"Skein1024-880",46031:"Skein1024-888",46032:"Skein1024-896",46033:"Skein1024-904",46034:"Skein1024-912",46035:"Skein1024-920",46036:"Skein1024-928",46037:"Skein1024-936",46038:"Skein1024-944",46039:"Skein1024-952",46040:"Skein1024-960",46041:"Skein1024-968",46042:"Skein1024-976",46043:"Skein1024-984",46044:"Skein1024-992",46045:"Skein1024-1000",46046:"Skein1024-1008",46047:"Skein1024-1016",46048:"Skein1024-1024"}),t.defaultLengths=Object.freeze({17:20,18:32,19:64,86:32,23:28,22:32,21:48,20:64,24:32,25:64,26:28,27:32,28:48,29:64,34:32,45569:1,45570:2,45571:3,45572:4,45573:5,45574:6,45575:7,45576:8,45577:9,45578:10,45579:11,45580:12,45581:13,45582:14,45583:15,45584:16,45585:17,45586:18,45587:19,45588:20,45589:21,45590:22,45591:23,45592:24,45593:25,45594:26,45595:27,45596:28,45597:29,45598:30,45599:31,45600:32,45601:33,45602:34,45603:35,45604:36,45605:37,45606:38,45607:39,45608:40,45609:41,45610:42,45611:43,45612:44,45613:45,45614:46,45615:47,45616:48,45617:49,45618:50,45619:51,45620:52,45621:53,45622:54,45623:55,45624:56,45625:57,45626:58,45627:59,45628:60,45629:61,45630:62,45631:63,45632:64,45633:1,45634:2,45635:3,45636:4,45637:5,45638:6,45639:7,45640:8,45641:9,45642:10,45643:11,45644:12,45645:13,45646:14,45647:15,45648:16,45649:17,45650:18,45651:19,45652:20,45653:21,45654:22,45655:23,45656:24,45657:25,45658:26,45659:27,45660:28,45661:29,45662:30,45663:31,45664:32,45825:1,45826:2,45827:3,45828:4,45829:5,45830:6,45831:7,45832:8,45833:9,45834:10,45835:11,45836:12,45837:13,45838:14,45839:15,45840:16,45841:17,45842:18,45843:19,45844:20,45845:21,45846:22,45847:23,45848:24,45849:25,45850:26,45851:27,45852:28,45853:29,45854:30,45855:31,45856:32,45857:1,45858:2,45859:3,45860:4,45861:5,45862:6,45863:7,45864:8,45865:9,45866:10,45867:11,45868:12,45869:13,45870:14,45871:15,45872:16,45873:17,45874:18,45875:19,45876:20,45877:21,45878:22,45879:23,45880:24,45881:25,45882:26,45883:27,45884:28,45885:29,45886:30,45887:31,45888:32,45889:33,45890:34,45891:35,45892:36,45893:37,45894:38,45895:39,45896:40,45897:41,45898:42,45899:43,45900:44,45901:45,45902:46,45903:47,45904:48,45905:49,45906:50,45907:51,45908:52,45909:53,45910:54,45911:55,45912:56,45913:57,45914:58,45915:59,45916:60,45917:61,45918:62,45919:63,45920:64,45921:1,45922:2,45923:3,45924:4,45925:5,45926:6,45927:7,45928:8,45929:9,45930:10,45931:11,45932:12,45933:13,45934:14,45935:15,45936:16,45937:17,45938:18,45939:19,45940:20,45941:21,45942:22,45943:23,45944:24,45945:25,45946:26,45947:27,45948:28,45949:29,45950:30,45951:31,45952:32,45953:33,45954:34,45955:35,45956:36,45957:37,45958:38,45959:39,45960:40,45961:41,45962:42,45963:43,45964:44,45965:45,45966:46,45967:47,45968:48,45969:49,45970:50,45971:51,45972:52,45973:53,45974:54,45975:55,45976:56,45977:57,45978:58,45979:59,45980:60,45981:61,45982:62,45983:63,45984:64,45985:65,45986:66,45987:67,45988:68,45989:69,45990:70,45991:71,45992:72,45993:73,45994:74,45995:75,45996:76,45997:77,45998:78,45999:79,46e3:80,46001:81,46002:82,46003:83,46004:84,46005:85,46006:86,46007:87,46008:88,46009:89,46010:90,46011:91,46012:92,46013:93,46014:94,46015:95,46016:96,46017:97,46018:98,46019:99,46020:100,46021:101,46022:102,46023:103,46024:104,46025:105,46026:106,46027:107,46028:108,46029:109,46030:110,46031:111,46032:112,46033:113,46034:114,46035:115,46036:116,46037:117,46038:118,46039:119,46040:120,46041:121,46042:122,46043:123,46044:124,46045:125,46046:126,46047:127,46048:128})},function(e,t,r){"use strict";const{Buffer:o}=r(0),n=r(50);function s(e,t){if(!t)throw new Error("requires an encoded buffer");const r=i(e),n=o.from(r.code);return function(e,t){i(e).decode(t.toString())}(r.name,t),o.concat([n,t])}function i(e){let t;if(n.names[e])t=n.names[e];else{if(!n.codes[e])throw new Error("Unsupported encoding");t=n.codes[e]}if(!t.isImplemented())throw new Error("Base "+e+" is not implemented yet");return t}(t=e.exports=s).encode=function(e,t){const r=i(e);return s(r.name,o.from(r.encode(t)))},t.decode=function(e){o.isBuffer(e)&&(e=e.toString());const t=e.substring(0,1);"string"==typeof(e=e.substring(1,e.length))&&(e=o.from(e));const r=i(t);return o.from(r.decode(e.toString()))},t.isEncoded=function(e){o.isBuffer(e)&&(e=e.toString());if("[object String]"!==Object.prototype.toString.call(e))return!1;const t=e.substring(0,1);try{return i(t).name}catch(e){return!1}},t.names=Object.freeze(Object.keys(n.names)),t.codes=Object.freeze(Object.keys(n.codes))},function(e,t,r){"use strict";const o=r(51),n=r(8),s=r(52),i=r(53),a=r(54),u=[["base1","1","","1"],["base2","0",n,"01"],["base8","7",n,"01234567"],["base10","9",n,"0123456789"],["base16","f",s,"0123456789abcdef"],["base32","b",i,"abcdefghijklmnopqrstuvwxyz234567"],["base32pad","c",i,"abcdefghijklmnopqrstuvwxyz234567="],["base32hex","v",i,"0123456789abcdefghijklmnopqrstuv"],["base32hexpad","t",i,"0123456789abcdefghijklmnopqrstuv="],["base32z","h",i,"ybndrfg8ejkmcpqxot1uwisza345h769"],["base58flickr","Z",n,"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"],["base58btc","z",n,"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"],["base64","m",a,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"],["base64pad","M",a,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="],["base64url","u",a,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"],["base64urlpad","U",a,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_="]],g=u.reduce((e,t)=>(e[t[0]]=new o(t[0],t[1],t[2],t[3]),e),{}),l=u.reduce((e,t)=>(e[t[1]]=g[t[0]],e),{});e.exports={names:g,codes:l}},function(e,t,r){"use strict";e.exports=class{constructor(e,t,r,o){this.name=e,this.code=t,this.alphabet=o,r&&o&&(this.engine=r(o))}encode(e){return this.engine.encode(e)}decode(e){return this.engine.decode(e)}isImplemented(){return this.engine}}},function(e,t,r){"use strict";const{Buffer:o}=r(0);e.exports=function(e){return{encode:e=>"string"==typeof e?o.from(e).toString("hex"):e.toString("hex"),decode(t){for(const r of t)if(e.indexOf(r)<0)throw new Error("invalid base16 character");return o.from(t,"hex")}}}},function(e,t,r){"use strict";function o(e,t){const r=e.byteLength,o=new Uint8Array(e),n=t.indexOf("=")===t.length-1;n&&(t=t.substring(0,t.length-1));let s=0,i=0,a="";for(let e=0;e<r;e++)for(i=i<<8|o[e],s+=8;s>=5;)a+=t[i>>>s-5&31],s-=5;if(s>0&&(a+=t[i<<5-s&31]),n)for(;a.length%8!=0;)a+="=";return a}e.exports=function(e){return{encode:t=>o("string"==typeof t?Uint8Array.from(t):t,e),decode(t){for(const r of t)if(e.indexOf(r)<0)throw new Error("invalid base32 character");return function(e,t){const r=(e=e.replace(new RegExp("=","g"),"")).length;let o=0,n=0,s=0;const i=new Uint8Array(5*r/8|0);for(let a=0;a<r;a++)n=n<<5|t.indexOf(e[a]),o+=5,o>=8&&(i[s++]=n>>>o-8&255,o-=8);return i.buffer}(t,e)}}}},function(e,t,r){"use strict";const{Buffer:o}=r(0);e.exports=function(e){const t=e.indexOf("=")>-1,r=e.indexOf("-")>-1&&e.indexOf("_")>-1;return{encode(e){let n="";n="string"==typeof e?o.from(e).toString("base64"):e.toString("base64"),r&&(n=n.replace(/\+/g,"-").replace(/\//g,"_"));const s=n.indexOf("=");return s>0&&!t&&(n=n.substring(0,s)),n},decode(t){for(const r of t)if(e.indexOf(r)<0)throw new Error("invalid base64 character");return o.from(t,"base64")}}}},function(e,t,r){"use strict";const{Buffer:o}=r(0),n=r(4),s=r(56),i=r(57),a=r(14);(t=e.exports).addPrefix=(e,t)=>{let r;if(o.isBuffer(e))r=a.varintBufferEncode(e);else{if(!i[e])throw new Error("multicodec not recognized");r=i[e]}return o.concat([r,t])},t.rmPrefix=e=>(n.decode(e),e.slice(n.decode.bytes)),t.getCodec=e=>{const t=n.decode(e),r=s.get(t);if(void 0===r)throw new Error(`Code ${t} not found`);return r},t.getName=e=>s.get(e),t.getNumber=e=>{const t=i[e];if(void 0===t)throw new Error("Codec `"+e+"` not found");return a.varintBufferDecode(t)[0]},t.getCode=e=>n.decode(e),t.getCodeVarint=e=>{const t=i[e];if(void 0===t)throw new Error("Codec `"+e+"` not found");return t},t.getVarint=e=>n.encode(e);const u=r(58);Object.assign(t,u),t.print=r(59)},function(e,t,r){"use strict";const o=r(3),n=new Map;for(const e in o){const t=o[e];n.set(t,e)}e.exports=Object.freeze(n)},function(e,t,r){"use strict";const o=r(3),n=r(14).varintEncode,s={};for(const e in o){const t=o[e];s[e]=n(t)}e.exports=Object.freeze(s)},function(e,t,r){"use strict";const o=r(3),n={};for(const[e,t]of Object.entries(o))n[e.toUpperCase().replace(/-/g,"_")]=t;e.exports=Object.freeze(n)},function(e,t,r){"use strict";const o=r(3),n={};for(const[e,t]of Object.entries(o))void 0===n[t]&&(n[t]=e);e.exports=Object.freeze(n)},function(e,t,r){"use strict";const o=r(13),{Buffer:n}=r(0);var s={checkCIDComponents:function(e){if(null==e)return"null values are not valid CIDs";if(0!==e.version&&1!==e.version)return"Invalid version, must be a number equal to 1 or 0";if("string"!=typeof e.codec)return"codec must be string";if(0===e.version){if("dag-pb"!==e.codec)return"codec must be 'dag-pb' for CIDv0";if("base58btc"!==e.multibaseName)return"multibaseName must be 'base58btc' for CIDv0"}if(!n.isBuffer(e.multihash))return"multihash must be a Buffer";try{o.validate(e.multihash)}catch(e){let t=e.message;return t||(t="Multihash validation failed"),t}}};e.exports=s},function(e,t,r){"use strict";e.exports=function(e,{className:t,symbolName:r}){const o=Symbol.for(r),n={[t]:class extends e{constructor(...e){super(...e),Object.defineProperty(this,o,{value:!0})}get[Symbol.toStringTag](){return t}}}[t];return n["is"+t]=e=>!(!e||!e[o]),n},e.exports.proto=function(e,{className:t,symbolName:r,withoutNew:o}){const n=Symbol.for(r),s={[t]:function(...t){if(o&&!(this instanceof s))return new s(...t);const r=e.call(this,...t)||this;return r&&!r[n]&&Object.defineProperty(r,n,{value:!0}),r}}[t];return s.prototype=Object.create(e.prototype),s.prototype.constructor=s,Object.defineProperty(s.prototype,Symbol.toStringTag,{get:()=>t}),s["is"+t]=e=>!(!e||!e[n]),s}},function(e,t,r){"use strict";var o=this&&this.__await||function(e){return this instanceof o?(this.v=e,this):new o(e)},n=this&&this.__asyncGenerator||function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,s=r.apply(e,t||[]),i=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(e){s[e]&&(n[e]=function(t){return new Promise((function(r,o){i.push([e,t,r,o])>1||u(e,t)}))})}function u(e,t){try{(r=s[e](t)).value instanceof o?Promise.resolve(r.value.v).then(g,l):p(i[0][2],r)}catch(e){p(i[0][3],e)}var r}function g(e){u("next",e)}function l(e){u("throw",e)}function p(e,t){e(t),i.shift(),i.length&&u(i[0][0],i[0][1])}},s=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(r){t[r]=e[r]&&function(t){return new Promise((function(o,n){(function(e,t,r,o){Promise.resolve(o).then((function(t){e({value:t,done:r})}),t)})(o,n,(t=e[r](t)).done,t.value)}))}}},i=this&&this.__asyncDelegator||function(e){var t,r;return t={},n("next"),n("throw",(function(e){throw e})),n("return"),t[Symbol.iterator]=function(){return this},t;function n(n,s){t[n]=e[n]?function(t){return(r=!r)?{value:o(e[n](t)),done:"return"===n}:s?s(t):t}:s}};Object.defineProperty(t,"__esModule",{value:!0});const a=r(0);function u(e){const t={path:e.path||"",mode:e.mode,mtime:e.mtime};return e.content?t.content=g(e.content):e.path||(t.content=g(e)),t}function g(e){if(p(e)||"string"==typeof e)return function(){return n(this,arguments,(function*(){yield yield o(l(e))}))}();if(c(e))return function(e){if("function"==typeof e.stream)return d(e.stream());return function(e,t){return n(this,arguments,(function*(){t=t||{};const r=new globalThis.FileReader,n=t.chunkSize||1048576;let s=t.offset||0;for(;;){const t=yield o(new Promise((t,o)=>{r.onloadend=e=>{var r;const o=null===(r=e.target)||void 0===r?void 0:r.result;t(0===o.byteLength?null:o)},r.onerror=o;const i=s+n,a=e.slice(s,i);r.readAsArrayBuffer(a),s=i}));if(null==t)return yield o(void 0);yield yield o(a.Buffer.from(t))}}))}(e)}(e);if("function"==typeof e.getReader)return d(e);if(e[Symbol.iterator])return function(){return n(this,arguments,(function*(){const t=e[Symbol.iterator](),r=t.next();if(r.done)return yield o(t);if(Number.isInteger(r.value))return yield yield o(l(Array.from(function*(){yield r.value,yield*t}()))),yield o(void 0);if(p(r.value)){yield yield o(l(r.value));for(const e of t)yield yield o(l(e));return yield o(void 0)}throw new Error("Unexpected input: "+typeof e)}))}();if(e[Symbol.asyncIterator])return function(){return n(this,arguments,(function*(){var t,r;try{for(var n,i=s(e);!(n=yield o(i.next())).done;){const e=n.value;yield yield o(l(e))}}catch(e){t={error:e}}finally{try{n&&!n.done&&(r=i.return)&&(yield o(r.call(i)))}finally{if(t)throw t.error}}}))}();throw new Error("Unexpected input: "+e)}function l(e){return p(e)?e:a.Buffer.from(e)}function p(e){return a.Buffer.isBuffer(e)||ArrayBuffer.isView(e)||e instanceof ArrayBuffer}function c(e){return void 0!==globalThis.Blob&&e instanceof globalThis.Blob}function h(e){return"object"==typeof e&&(e.path||e.content)}function d(e){return n(this,arguments,(function*(){const t=e.getReader();for(;;){const e=yield o(t.read());if(e.done)return yield o(void 0);yield yield o(e.value)}}))}t.normaliseInput=function(e){if(null==e)throw new Error("Unexpected input: "+e);if("string"==typeof e||e instanceof String)return function(){return n(this,arguments,(function*(){yield yield o(u(e))}))}();if(p(e)||c(e))return function(){return n(this,arguments,(function*(){yield yield o(u(e))}))}();if(e[Symbol.iterator])return function(){return n(this,arguments,(function*(){const t=e[Symbol.iterator](),r=t.next();if(r.done)return yield o(t);if(Number.isInteger(r.value)||p(r.value))return yield yield o(u(function*(){yield r.value,yield*t}())),yield o(void 0);if(h(r.value)||c(r.value)||"string"==typeof r.value){yield yield o(u(r.value));for(const e of t)yield yield o(u(e));return yield o(void 0)}throw new Error("Unexpected input: "+typeof e)}))}();if("function"==typeof e.getReader)return function(){return n(this,arguments,(function*(){var t,r;try{for(var n,i=s(d(e));!(n=yield o(i.next())).done;){const e=n.value;yield yield o(u(e))}}catch(e){t={error:e}}finally{try{n&&!n.done&&(r=i.return)&&(yield o(r.call(i)))}finally{if(t)throw t.error}}}))}();if(e[Symbol.asyncIterator])return function(){return n(this,arguments,(function*(){var t,r;const a=e[Symbol.asyncIterator](),g=yield o(a.next());if(g.done)return yield o(a);if(p(g.value))return yield yield o(u(function(){return n(this,arguments,(function*(){yield yield o(g.value),yield o(yield*i(s(a)))}))}())),yield o(void 0);if(h(g.value)||c(g.value)||"string"==typeof g.value){yield yield o(u(g.value));try{for(var l,d=s(a);!(l=yield o(d.next())).done;){const e=l.value;yield yield o(u(e))}}catch(e){t={error:e}}finally{try{l&&!l.done&&(r=d.return)&&(yield o(r.call(d)))}finally{if(t)throw t.error}}return yield o(void 0)}throw new Error("Unexpected input: "+typeof e)}))}();if(h(e))return function(){return n(this,arguments,(function*(){yield yield o(u(e))}))}();throw new Error("Unexpected input: "+typeof e)}},function(e,t,r){"use strict";(function(e){var o=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(n,s){function i(e){try{u(o.next(e))}catch(e){s(e)}}function a(e){try{u(o.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,a)}u((o=o.apply(e,t||[])).next())}))},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(11)),a=s(r(15)),u=r(64),g=r(5),l=r(65),p=i.default.getLogger("users");t.Users=class{constructor(e=new g.Context){this.context=e,this.client=new u.APIClient(e.host,{transport:e.transport,debug:e.debug})}getThread(t,r){return o(this,void 0,void 0,(function*(){return p.debug("get thread request"),new Promise((o,n)=>{const s=new a.GetThreadRequest;s.setName(t),this.client.getThread(s,this.context.withContext(r).toMetadata(),(t,r)=>{t&&n(t);const s=null==r?void 0:r.toObject();s&&(s.id=l.ThreadID.fromBytes(e.from(s.id,"base64")).toString()),o(s)})})}))}listThreads(t){return o(this,void 0,void 0,(function*(){return p.debug("list threads request"),new Promise((r,o)=>{const n=new a.ListThreadsRequest;this.client.listThreads(n,this.context.withContext(t).toMetadata(),(t,n)=>{t&&o(t);const s=null==n?void 0:n.toObject();s&&s.listList.forEach(t=>{t.id=l.ThreadID.fromBytes(e.from(t.id,"base64")).toString()}),r(s)})})}))}}}).call(this,r(0).Buffer)},function(e,t,r){var o=r(15),n=r(2).grpc,s=function(){function e(){}return e.serviceName="users.pb.API",e}();function i(e,t){this.serviceHost=e,this.options=t||{}}s.GetThread={methodName:"GetThread",service:s,requestStream:!1,responseStream:!1,requestType:o.GetThreadRequest,responseType:o.GetThreadReply},s.ListThreads={methodName:"ListThreads",service:s,requestStream:!1,responseStream:!1,requestType:o.ListThreadsRequest,responseType:o.ListThreadsReply},t.API=s,i.prototype.getThread=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.GetThread,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.listThreads=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.ListThreads,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},t.APIClient=i},function(e,t,r){"use strict";(function(e){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ThreadID=void 0;const n=r(4),s=o(r(66)),i=o(r(7));class a{constructor(e){this.buf=e}static fromRandom(t=a.Variant.Raw,r=32){const o=e.concat([e.from(n.encode(a.V1)),e.from(n.encode(t)),s.default(e.alloc(r))]);return new a(o)}static fromString(t){if(t.length<2)throw new Error("id too short");const r=e.from(i.default.decode(t));return a.fromBytes(r)}static fromBytes(t){let r=e.from(t);const o=n.decode(r);if(1!=o)throw new Error(`expected 1 as the id version number, got: ${o}.`);if(r=r.slice(n.decode.bytes,r.length),!(n.decode(r)in a.Variant))throw new Error("invalid variant.");if(r.slice(n.decode.bytes,r.length).length<16)throw new Error("random component too small.");return new a(e.from(t))}static getEncoding(e){if(e.length<2)throw new Error("Too Short");const t=i.default.isEncoded(e);if(!1===t)throw new Error("Invalid Encoding");return t}isDefined(){return this.buf.length>0}toBytes(){return e.from(this.buf)}equals(e){return this.buf.equals(e.buf)}version(){return n.decode(this.buf)}variant(){let t=e.from(this.buf);return n.decode(t),t=t.slice(n.decode.bytes),n.decode(t)}toString(e="base32"){switch(this.version()){case a.V1:return i.default.encode(e,this.buf).toString();default:throw new Error("unknown ID version.")}}}t.ThreadID=a,function(e){let t;e.V1=1,function(e){e[e.Raw=85]="Raw",e[e.AccessControlled=112]="AccessControlled"}(t=e.Variant||(e.Variant={}))}(a||(a={})),t.ThreadID=a}).call(this,r(0).Buffer)},function(e,t,r){(function(e){e.exports=function(e){if(e&&e.crypto&&e.crypto.getRandomValues)return e.crypto.getRandomValues.bind(e.crypto);try{return r(68)(e)}catch(t){return r(69)(e)}}("object"==typeof window?window:e)}).call(this,r(67)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){(function(t){let r=!1;"process"in t&&(r=/^v8\./.test(t.process.version)),e.exports=function(e){const t=(o="crypto",e["require"](o));var o;function n(e,t){const r=e.length;for(let o=0,n=0;o<r;o++)e[o]=t[n++]<<24|t[n++]<<16|t[n++]<<8|t[n++];return e}function s(e,t){const r=e.length;for(let o=0,n=0;o<r;o++)e[o]=(t[n++]<<24|t[n++]<<16|t[n++]<<8|t[n++])-2147483648;return e}function i(e,t){const r=e.length;for(let o=0,n=0;o<r;o++)e[o]=t[n++]<<8|t[n++];return e}function a(e,t){const r=e.length;for(let o=0,n=0;o<r;o++)e[o]=(t[n++]<<8|t[n++])-32768;return e}function u(e,t){const r=e.length;for(let o=0;o<r;o++)e[o]=t[o];return e}function g(e,t){const r=e.length;for(let o=0;o<r;o++)e[o]=t[o]-128;return e}return r?function(e){if(e instanceof Uint8Array)return t.randomFillSync(e);const r=t.randomBytes(e.byteLength);if(e instanceof Uint32Array)return n(e,r);if(e instanceof Uint16Array)return i(e,r);if(e instanceof Int32Array)return s(e,r);if(e instanceof Int16Array)return a(e,r);if(e instanceof Int8Array)return g(e,r);if(e instanceof Uint8ClampedArray)return u(e,r);throw new Error("invalid type")}:t.randomFillSync||function(e){const r=t.randomBytes(e.byteLength);if(e instanceof Uint8Array)return u(e,r);if(e instanceof Uint32Array)return n(e,r);if(e instanceof Uint16Array)return i(e,r);if(e instanceof Int32Array)return s(e,r);if(e instanceof Int16Array)return a(e,r);if(e instanceof Int8Array)return g(e,r);if(e instanceof Uint8ClampedArray)return u(e,r);throw new Error("invalid type")}}}).call(this,r(6))},function(e,t,r){e.exports=function(e){const t=r(70);let o,n;try{o=(s="require",i="react-native",e[s](i)).NativeModules.SyncRandomBytes,o&&(n=o.seed)}catch(e){}var s,i;!n&&e&&"Expo"in e&&(n=function(e){const t=e.reduce((function(e,t){return e+2*t.length}),0),r=new ArrayBuffer(t),o=new Uint16Array(r);let n=0;return e.forEach((function(e){for(var t=0,r=e.length;t<r;t++)o[n+t]=e.charCodeAt(t);n+=e.length})),o}([e.Expo.Constants.installationId,e.Expo.Constants.sessionId,"performance"in e?e.performance.now().toString(32):(new Date).toISOString(),Math.random().toString(32)]));let a=t(n),u=!1;function g(e){if(e.length>65536)throw new Error("QuotaExceeded");for(let t=(.25*e.length+1|0)-1,r=0;t>=0;t--){const t=a.int32();e[r++]=255&t,e[r++]=t>>8&255,e[r++]=t>>16&255,e[r++]=t>>24&255}return e}return!n&&o&&(u=!0,o.randomBytes().then(e=>{u=!1,a=t(e)}).catch((function(e){u=!1,console.log("WARNING: can not collect seed data: "+e.message)}))),function(e){if(u&&(u=!1,console.log("WARNING: random data is requested before the seed is done")),null==e)throw new Error("invalid type");if(e instanceof Uint8Array)return g(e);if(e instanceof Uint32Array)return function(e){const t=e.length;if(t>16384)throw new Error("QuotaExceeded");for(let r=t-1;r>=0;r--)e[r]=a.int32();return e}(e);if(e instanceof Uint16Array)return function(e){if(e.length>32767)throw new Error("QuotaExceeded");for(let t=(.5*e.length+1|0)-1,r=0;t>=0;t--){const t=a.int32();e[r++]=65535&t,e[r++]=t>>16&65535}return e}(e);if(e instanceof Int32Array)return function(e){const t=e.length;if(t>16384)throw new Error("QuotaExceeded");for(let r=t-1;r>=0;r--)e[r]=a.int32()-2147483648;return e}(e);if(e instanceof Int16Array)return function(e){if(e.length>32767)throw new Error("QuotaExceeded");for(let t=(.5*e.length+1|0)-1,r=0;t>=0;t--){const t=a.int32();e[r++]=(65535&t)-32768,e[r++]=(t>>16&65535)-32768}return e}(e);if(e instanceof Int8Array)return function(e){if(e.length>65536)throw new Error("QuotaExceeded");for(let t=(.25*e.length+1|0)-1,r=0;t>=0;t--){const t=a.int32();e[r++]=(255&t)-128,e[r++]=(t>>8&255)-128,e[r++]=(t>>16&255)-128,e[r++]=(t>>24&255)-128}return e}(e);if(e instanceof Uint8ClampedArray)return g(e);throw new Error("invalid type")}}},function(e,t,r){var o;!function(n,s,i){var a,u=i.pow(256,6),g=i.pow(2,52),l=2*g;function p(e,t,r){var o=[],p=d(function e(t,r){var o,n=[],s=typeof t;if(r&&"object"==s)for(o in t)try{n.push(e(t[o],r-1))}catch(e){}return n.length?n:"string"==s?t:t+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[e,f(s)]:null==e?function(){try{var e;return a&&(e=a.randomBytes)?e=e(256):(e=new Uint8Array(256),(n.crypto||n.msCrypto).getRandomValues(e)),f(e)}catch(e){var t=n.navigator,r=t&&t.plugins;return[+new Date,n,r,n.screen,f(s)]}}():e,3),o),b=new c(o),y=function(){for(var e=b.g(6),t=u,r=0;e<g;)e=256*(e+r),t*=256,r=b.g(1);for(;e>=l;)e/=2,t/=2,r>>>=1;return(e+r)/t};return y.int32=function(){return 0|b.g(4)},y.quick=function(){return b.g(4)/4294967296},y.double=y,d(f(b.S),s),(t.pass||r||function(e,t,r,o){return o&&(o.S&&h(o,b),e.state=function(){return h(b,{})}),r?(i.random=e,t):e})(y,p,"global"in t?t.global:this==i,t.state)}function c(e){var t,r=e.length,o=this,n=0,s=o.i=o.j=0,i=o.S=[];for(r||(e=[r++]);n<256;)i[n]=n++;for(n=0;n<256;n++)i[n]=i[s=255&s+e[n%r]+(t=i[n])],i[s]=t;(o.g=function(e){for(var t,r=0,n=o.i,s=o.j,i=o.S;e--;)t=i[n=255&n+1],r=256*r+i[255&(i[n]=i[s=255&s+t])+(i[s]=t)];return o.i=n,o.j=s,r})(256)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function d(e,t){for(var r,o=e+"",n=0;n<o.length;)t[255&n]=255&(r^=19*t[255&n])+o.charCodeAt(n++);return f(t)}function f(e){return String.fromCharCode.apply(0,e)}if(d(i.random(),s),e.exports){e.exports=p;try{a=r(71)}catch(e){}}else void 0===(o=function(){return p}.call(t,r,t,e))||(e.exports=o)}("undefined"!=typeof self?self:this,[],Math)},function(e,t){},function(e,t,r){"use strict";(function(e){var o=this&&this.__awaiter||function(e,t,r,o){return new(r||(r=Promise))((function(n,s){function i(e){try{u(o.next(e))}catch(e){s(e)}}function a(e){try{u(o.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,a)}u((o=o.apply(e,t||[])).next())}))},n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});const i=n(r(73)),a=n(r(91)),u=r(10),g=n(r(7)),l=s(r(24)),p=r(92);t.createUsername=(e=12)=>Array(e).fill(0).map(()=>Math.random().toString(36).charAt(2)).join(""),t.createEmail=()=>t.createUsername()+"@doe.com",t.confirmEmail=(e,t)=>o(void 0,void 0,void 0,(function*(){yield a.default(500);const r=yield i.default.get(`${e}/confirm/${t}`);if(200!==r.status)throw new Error(r.statusText);return!0})),t.createKey=(e,t)=>new Promise((r,o)=>{const n=new l.CreateKeyRequest;n.setType(l.KeyType[t]),new p.APIClient(e.host,{transport:e.transport,debug:e.debug}).createKey(n,e.toMetadata(),(e,t)=>{e&&o(e),r(null==t?void 0:t.toObject())})}),t.signUp=(e,r,o)=>{const n=t.createUsername(),s=t.createEmail();return new Promise((i,a)=>{const u=new l.SignupRequest;u.setEmail(s),u.setUsername(n),new p.APIClient(e.host,{transport:e.transport,debug:e.debug}).signup(u,e.toMetadata(),(e,t)=>{e&&a(e),i({user:null==t?void 0:t.toObject(),username:n,email:s})}),t.confirmEmail(r,o).catch(e=>a(e))})},t.createAPISig=(t,r=new Date(Date.now()+6e4))=>o(void 0,void 0,void 0,(function*(){const o=g.default.decode(t),n=(null!=r?r:new Date).toISOString(),s=new u.HMAC(o).update(e.from(n)).digest();return{sig:g.default.encode("base32",e.from(s)).toString(),msg:n}}))}).call(this,r(0).Buffer)},function(e,t,r){e.exports=r(74)},function(e,t,r){"use strict";var o=r(1),n=r(16),s=r(75),i=r(22);function a(e){var t=new s(e),r=n(s.prototype.request,t);return o.extend(r,s.prototype,t),o.extend(r,t),r}var u=a(r(19));u.Axios=s,u.create=function(e){return a(i(u.defaults,e))},u.Cancel=r(23),u.CancelToken=r(89),u.isCancel=r(18),u.all=function(e){return Promise.all(e)},u.spread=r(90),e.exports=u,e.exports.default=u},function(e,t,r){"use strict";var o=r(1),n=r(17),s=r(76),i=r(77),a=r(22);function u(e){this.defaults=e,this.interceptors={request:new s,response:new s}}u.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=a(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)r=r.then(t.shift(),t.shift());return r},u.prototype.getUri=function(e){return e=a(this.defaults,e),n(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},o.forEach(["delete","get","head","options"],(function(e){u.prototype[e]=function(t,r){return this.request(o.merge(r||{},{method:e,url:t}))}})),o.forEach(["post","put","patch"],(function(e){u.prototype[e]=function(t,r,n){return this.request(o.merge(n||{},{method:e,url:t,data:r}))}})),e.exports=u},function(e,t,r){"use strict";var o=r(1);function n(){this.handlers=[]}n.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},n.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},n.prototype.forEach=function(e){o.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=n},function(e,t,r){"use strict";var o=r(1),n=r(78),s=r(18),i=r(19);function a(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return a(e),e.headers=e.headers||{},e.data=n(e.data,e.headers,e.transformRequest),e.headers=o.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),o.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return a(e),t.data=n(t.data,t.headers,e.transformResponse),t}),(function(t){return s(t)||(a(e),t&&t.response&&(t.response.data=n(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,r){"use strict";var o=r(1);e.exports=function(e,t,r){return o.forEach(r,(function(r){e=r(e,t)})),e}},function(e,t){var r,o,n=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(r===setTimeout)return setTimeout(e,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(e){r=s}try{o="function"==typeof clearTimeout?clearTimeout:i}catch(e){o=i}}();var u,g=[],l=!1,p=-1;function c(){l&&u&&(l=!1,u.length?g=u.concat(g):p=-1,g.length&&h())}function h(){if(!l){var e=a(c);l=!0;for(var t=g.length;t;){for(u=g,g=[];++p<t;)u&&u[p].run();p=-1,t=g.length}u=null,l=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===i||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function f(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];g.push(new d(e,t)),1!==g.length||l||a(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=f,n.addListener=f,n.once=f,n.off=f,n.removeListener=f,n.removeAllListeners=f,n.emit=f,n.prependListener=f,n.prependOnceListener=f,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},function(e,t,r){"use strict";var o=r(1);e.exports=function(e,t){o.forEach(e,(function(r,o){o!==t&&o.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[o])}))}},function(e,t,r){"use strict";var o=r(21);e.exports=function(e,t,r){var n=r.config.validateStatus;!n||n(r.status)?e(r):t(o("Request failed with status code "+r.status,r.config,null,r.request,r))}},function(e,t,r){"use strict";e.exports=function(e,t,r,o,n){return e.config=t,r&&(e.code=r),e.request=o,e.response=n,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,r){"use strict";var o=r(84),n=r(85);e.exports=function(e,t){return e&&!o(t)?n(e,t):t}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var o=r(1),n=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,s,i={};return e?(o.forEach(e.split("\n"),(function(e){if(s=e.indexOf(":"),t=o.trim(e.substr(0,s)).toLowerCase(),r=o.trim(e.substr(s+1)),t){if(i[t]&&n.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([r]):i[t]?i[t]+", "+r:r}})),i):i}},function(e,t,r){"use strict";var o=r(1);e.exports=o.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function n(e){var o=e;return t&&(r.setAttribute("href",o),o=r.href),r.setAttribute("href",o),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=n(window.location.href),function(t){var r=o.isString(t)?n(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var o=r(1);e.exports=o.isStandardBrowserEnv()?{write:function(e,t,r,n,s,i){var a=[];a.push(e+"="+encodeURIComponent(t)),o.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),o.isString(n)&&a.push("path="+n),o.isString(s)&&a.push("domain="+s),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";var o=r(23);function n(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;e((function(e){r.reason||(r.reason=new o(e),t(r.reason))}))}n.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},n.source=function(){var e;return{token:new n((function(t){e=t})),cancel:e}},e.exports=n},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){"use strict";const o=()=>{const e=new Error("Delay aborted");return e.name="AbortError",e},n=({clearTimeout:e,setTimeout:t,willResolve:r})=>(n,{value:s,signal:i}={})=>{if(i&&i.aborted)return Promise.reject(o());let a,u,g;const l=e||clearTimeout,p=()=>{l(a),g(o())},c=()=>{i&&i.removeEventListener("abort",p)},h=new Promise((e,o)=>{u=()=>{c(),r?e(s):o(s)},g=o,a=(t||setTimeout)(u,n)});return i&&i.addEventListener("abort",p,{once:!0}),h.clear=()=>{l(a),a=null,c(),u()},h},s=n({willResolve:!0});s.reject=n({willResolve:!1}),s.createWithTimers=({clearTimeout:e,setTimeout:t})=>{const r=n({clearTimeout:e,setTimeout:t,willResolve:!0});return r.reject=n({clearTimeout:e,setTimeout:t,willResolve:!1}),r},e.exports=s,e.exports.default=s},function(e,t,r){var o=r(24),n=r(2).grpc,s=function(){function e(){}return e.serviceName="hub.pb.API",e}();function i(e,t){this.serviceHost=e,this.options=t||{}}s.Signup={methodName:"Signup",service:s,requestStream:!1,responseStream:!1,requestType:o.SignupRequest,responseType:o.SignupReply},s.Signin={methodName:"Signin",service:s,requestStream:!1,responseStream:!1,requestType:o.SigninRequest,responseType:o.SigninReply},s.Signout={methodName:"Signout",service:s,requestStream:!1,responseStream:!1,requestType:o.SignoutRequest,responseType:o.SignoutReply},s.GetSessionInfo={methodName:"GetSessionInfo",service:s,requestStream:!1,responseStream:!1,requestType:o.GetSessionInfoRequest,responseType:o.GetSessionInfoReply},s.CreateKey={methodName:"CreateKey",service:s,requestStream:!1,responseStream:!1,requestType:o.CreateKeyRequest,responseType:o.GetKeyReply},s.ListKeys={methodName:"ListKeys",service:s,requestStream:!1,responseStream:!1,requestType:o.ListKeysRequest,responseType:o.ListKeysReply},s.InvalidateKey={methodName:"InvalidateKey",service:s,requestStream:!1,responseStream:!1,requestType:o.InvalidateKeyRequest,responseType:o.InvalidateKeyReply},s.CreateOrg={methodName:"CreateOrg",service:s,requestStream:!1,responseStream:!1,requestType:o.CreateOrgRequest,responseType:o.GetOrgReply},s.GetOrg={methodName:"GetOrg",service:s,requestStream:!1,responseStream:!1,requestType:o.GetOrgRequest,responseType:o.GetOrgReply},s.ListOrgs={methodName:"ListOrgs",service:s,requestStream:!1,responseStream:!1,requestType:o.ListOrgsRequest,responseType:o.ListOrgsReply},s.RemoveOrg={methodName:"RemoveOrg",service:s,requestStream:!1,responseStream:!1,requestType:o.RemoveOrgRequest,responseType:o.RemoveOrgReply},s.InviteToOrg={methodName:"InviteToOrg",service:s,requestStream:!1,responseStream:!1,requestType:o.InviteToOrgRequest,responseType:o.InviteToOrgReply},s.LeaveOrg={methodName:"LeaveOrg",service:s,requestStream:!1,responseStream:!1,requestType:o.LeaveOrgRequest,responseType:o.LeaveOrgReply},s.IsUsernameAvailable={methodName:"IsUsernameAvailable",service:s,requestStream:!1,responseStream:!1,requestType:o.IsUsernameAvailableRequest,responseType:o.IsUsernameAvailableReply},s.IsOrgNameAvailable={methodName:"IsOrgNameAvailable",service:s,requestStream:!1,responseStream:!1,requestType:o.IsOrgNameAvailableRequest,responseType:o.IsOrgNameAvailableReply},s.DestroyAccount={methodName:"DestroyAccount",service:s,requestStream:!1,responseStream:!1,requestType:o.DestroyAccountRequest,responseType:o.DestroyAccountReply},t.API=s,i.prototype.signup=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.Signup,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.signin=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.Signin,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.signout=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.Signout,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.getSessionInfo=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.GetSessionInfo,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.createKey=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.CreateKey,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.listKeys=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.ListKeys,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.invalidateKey=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.InvalidateKey,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.createOrg=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.CreateOrg,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.getOrg=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.GetOrg,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.listOrgs=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.ListOrgs,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.removeOrg=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.RemoveOrg,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.inviteToOrg=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.InviteToOrg,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.leaveOrg=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.LeaveOrg,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.isUsernameAvailable=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.IsUsernameAvailable,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.isOrgNameAvailable=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.IsOrgNameAvailable,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},i.prototype.destroyAccount=function(e,t,r){2===arguments.length&&(r=arguments[1]);var o=n.unary(s.DestroyAccount,{request:e,host:this.serviceHost,metadata:t,transport:this.options.transport,debug:this.options.debug,onEnd:function(e){if(r)if(e.status!==n.Code.OK){var t=new Error(e.statusMessage);t.code=e.status,t.metadata=e.trailers,r(t,null)}else r(null,e.message)}});return{cancel:function(){r=null,o.close()}}},t.APIClient=i},function(e,t,r){"use strict";r.r(t),r.d(t,"Multicast",(function(){return p})),r.d(t,"Channel",(function(){return l})),r.d(t,"Deferred",(function(){return o})),r.d(t,"LastResult",(function(){return c})),r.d(t,"fromDom",(function(){return u})),r.d(t,"fromEmitter",(function(){return g}));class o{constructor(){this.promise=new Promise((e,t)=>{this.resolve=t=>(e(t),this.promise),this.reject=e=>(t(e),this.promise)})}}var n=r(25),s=r.n(n);class i{constructor(e=0){this.limit=e,this.length=0,this.list=new s.a}enqueue(e){const{list:t}=this;this.limit>0&&t.length===this.limit&&t.shift(),this.length+=1,t.push(e)}dequeue(){if(0===this.length)throw Error("Queue is empty");return this.length-=1,this.list.shift()}clear(){this.length=0,this.list.drop()}forEach(e){this.list.forEach(e)}}const a=Object.freeze({value:void 0,done:!0});Promise.resolve(a);var u=e=>(t,r,o)=>{const n=e(),s=e=>{n.push(e)};return r.addEventListener(t,s,o),n.wrap(()=>r.removeEventListener(t,s,o))};var g=e=>(t,r)=>{const o=e(),n=e=>{o.push(e)};return r.addListener(t,n),o.wrap(()=>{r.removeListener(t,n)})};class l{constructor(e=0,t=0){this.closed=!1,this.pushBuffer=new i(e),this.pullBuffer=new i(t)}next(){if(this.closed)return Promise.resolve(a);if(0===this.pushBuffer.length){const e=new o;return this.pullBuffer.enqueue(e),e.promise}const{result:e,defer:t}=this.pushBuffer.dequeue();return t.resolve(e),e.done&&this.close(),t.promise}push(e,t=!1){if(this.closed)return Promise.resolve(a);const r={value:e,done:t};if(this.pullBuffer.length>0)return this.pullBuffer.dequeue().resolve(r);const n=new o;return this.pushBuffer.enqueue({result:r,defer:n}),n.promise}[Symbol.asyncIterator](){return this}async return(e){return this.close(),{done:!0,value:e}}close(){this.closed||(this.closed=!0,this.pushBuffer.forEach(({defer:{resolve:e}})=>{e(a)}),this.pushBuffer.clear(),this.pullBuffer.forEach(({resolve:e})=>{e(a)}),this.pullBuffer.clear())}wrap(e){if(this.closed)throw Error("Balancer is closed");return{[Symbol.asyncIterator](){return this},next:()=>this.next(),return:async t=>(e&&e(),this.return(t))}}}l.fromDom=u(()=>new l),l.fromEmitter=g(()=>new l);class p{constructor(e=(()=>new l)){this.init=e,this.receivers=new Set}push(e){return this.receivers.forEach(t=>t.push(e)),this}[Symbol.asyncIterator](){const e=this.init(),{receivers:t}=this;return t.add(e),this.onStart&&1===t.size&&this.onStart(),e.wrap(()=>{t.delete(e),this.onStop&&0===t.size&&this.onStop()})}}class c{constructor(){this.buffer=new o,this.closed=!1,this.resolved=!1,this.requested=!1}push(e,t=!1){if(this.closed)throw Error("Iterator closed");const r={value:e,done:t};return!1===this.resolved?this.resolved=!0:(this.buffer=new o,this.resolved=!1),this.requested=!1,this.buffer.resolve(r),this.buffer.promise}async next(){return this.closed?a:(this.requested=!0,this.buffer.promise)}async return(e){return this.closed=!0,!this.resolved&&this.requested&&this.buffer.resolve(a),Promise.resolve({value:e,done:!0})}wrap(e){return{next:()=>this.next(),[Symbol.asyncIterator](){return this},return:t=>(e&&e(),this.return(t))}}[Symbol.asyncIterator](){return this}}c.fromDom=u(()=>new c),c.fromEmitter=g(()=>new c)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,