"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const loglevel_1 = __importDefault(require("loglevel"));
const pb = __importStar(require("@textile/users-grpc/users_pb"));
const users_pb_service_1 = require("@textile/users-grpc/users_pb_service");
const context_1 = require("@textile/context");
const threads_id_1 = require("@textile/threads-id");
const logger = loglevel_1.default.getLogger('users');
/**
 * Buckets is a web-gRPC wrapper client for communicating with the web-gRPC enabled Textile Buckets API.
 */
class Users {
    /**
     * Creates a new gRPC client instance for accessing the Textile Buckets API.
     * @param context The context to use for interacting with the APIs. Can be modified later.
     */
    constructor(context = new context_1.Context()) {
        this.context = context;
        this.client = new users_pb_service_1.APIClient(context.host, {
            transport: context.transport,
            debug: context.debug,
        });
    }
    /**
     * Returns a Thread by name.
     * @param name The name of the Thread.
     * @param ctx Context containing gRPC headers and settings.
     * These will be merged with any internal credentials.
     */
    getThread(name, ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            logger.debug('get thread request');
            return new Promise((resolve, reject) => {
                const req = new pb.GetThreadRequest();
                req.setName(name);
                this.client.getThread(req, this.context.withContext(ctx).toMetadata(), (err, message) => {
                    if (err)
                        reject(err);
                    const msg = message === null || message === void 0 ? void 0 : message.toObject();
                    if (msg) {
                        msg.id = threads_id_1.ThreadID.fromBytes(Buffer.from(msg.id, 'base64')).toString();
                    }
                    resolve(msg);
                });
            });
        });
    }
    /**
     * Returns a list of available Threads.
     * @param ctx Context containing gRPC headers and settings.
     * These will be merged with any internal credentials.
     * @note Threads can be created using the threads or threads network clients.
     */
    listThreads(ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            logger.debug('list threads request');
            return new Promise((resolve, reject) => {
                const req = new pb.ListThreadsRequest();
                this.client.listThreads(req, this.context.withContext(ctx).toMetadata(), (err, message) => {
                    if (err)
                        reject(err);
                    const msg = message === null || message === void 0 ? void 0 : message.toObject();
                    if (msg) {
                        msg.listList.forEach((thread) => {
                            thread.id = threads_id_1.ThreadID.fromBytes(Buffer.from(thread.id, 'base64')).toString();
                        });
                    }
                    resolve(msg);
                });
            });
        });
    }
}
exports.Users = Users;
//# sourceMappingURL=users.js.map