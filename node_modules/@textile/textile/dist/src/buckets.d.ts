import * as pb from '@textile/buckets-grpc/buckets_pb';
import CID from 'cids';
import { grpc } from '@improbable-eng/grpc-web';
import { Context } from '@textile/context';
export interface PushPathResult {
    path: {
        path: string;
        cid: CID;
        root: CID;
        remainder: string;
    };
    root: string;
}
/**
 * Buckets is a web-gRPC wrapper client for communicating with the web-gRPC enabled Textile Buckets API.
 */
export declare class Buckets {
    context: Context;
    serviceHost: string;
    rpcOptions: grpc.RpcOptions;
    /**
     * Creates a new gRPC client instance for accessing the Textile Buckets API.
     * @param context The context to use for interacting with the APIs. Can be modified later.
     */
    constructor(context?: Context);
    /**
     * Initializes a new bucket.
     * @param name Human-readable bucket name. It is only meant to help identify a bucket in a UI and is not unique.
     * @param ctx Context object containing web-gRPC headers and settings.
     */
    init(name: string, ctx?: Context): Promise<pb.InitReply.AsObject>;
    /**
     * Returns a list of all bucket roots.
     * @param ctx Context object containing web-gRPC headers and settings.
     */
    list(ctx?: Context): Promise<pb.Root.AsObject[]>;
    /**
     * Returns information about a bucket path.
     * @param key Unique (IPNS compatible) identifier key for a bucket.
     * @param path A file/object (sub)-path within a bucket.
     * @param ctx Context object containing web-gRPC headers and settings.
     */
    listPath(key: string, path: string, ctx?: Context): Promise<pb.ListPathReply.AsObject>;
    /**
     * Removes an entire bucket. Files and directories will be unpinned.
     * @param key Unique (IPNS compatible) identifier key for a bucket.
     * @param ctx Context object containing web-gRPC headers and settings.
     */
    remove(key: string, ctx?: Context): Promise<void>;
    /**
     * Returns information about a bucket path.
     * @param key Unique (IPNS compatible) identifier key for a bucket.
     * @param path A file/object (sub)-path within a bucket.
     * @param ctx Context object containing web-gRPC headers and settings.
     */
    removePath(key: string, path: string, ctx?: Context): Promise<void>;
    /**
     * Pushes a file to a bucket path.
     * @param key Unique (IPNS compatible) identifier key for a bucket.
     * @param path A file/object (sub)-path within a bucket.
     * @param input The input file/stream/object.
     * @param ctx Context object containing web-gRPC headers and settings.
     * @param opts Options to control response stream. Currently only supports a progress function.
     * @note This will return the resolved path and the bucket's new root path.
     */
    pushPath(key: string, path: string, input: any, ctx?: Context, opts?: {
        progress?: (num?: number) => void;
    }): Promise<PushPathResult>;
    /**
     * Pulls the bucket path, returning the bytes of the given file.
     * @param key Unique (IPNS compatible) identifier key for a bucket.
     * @param path A file/object (sub)-path within a bucket.
     * @param ctx Context object containing web-gRPC headers and settings.
     * @param opts Options to control response stream. Currently only supports a progress function.
     */
    pullPath(key: string, path: string, ctx?: Context, opts?: {
        progress?: (num?: number) => void;
    }): AsyncIterableIterator<Uint8Array>;
    private unary;
}
