/// <reference types="node" />
import { PrivateKey, PublicKey } from 'libp2p-crypto';
export declare function publicKeyToString(key: PublicKey): string;
export declare function privateKeyToString(key: PrivateKey): string;
export declare function privateKeyFromString(str: string): Promise<PrivateKey>;
export interface Public {
    verify(data: Buffer, sig: Buffer): Promise<boolean>;
    toString(): string;
    bytes: Buffer;
}
/**
 * Identity represents an entity capable of signing a message.
 * This is a simple 'private key' interface that must be capable of returning the associated public key for
 * verification. In many cases, this will just be a private key, but callers can use any setup that suits their needs.
 * The interface is currently modeled after libp2p-crypto PrivateKey.
 */
export interface Identity {
    sign(data: Buffer): Promise<Buffer>;
    public: Public;
}
export declare class Libp2pCryptoPublicKey implements Public {
    key: PublicKey;
    constructor(key: PublicKey);
    /**
     * Verify the given signed data.
     * @param data The data to verify.
     * @param sig The signature to verify.
     */
    verify(data: Buffer, sig: Buffer): Promise<boolean>;
    /**
     * Returns base32 encoded Public key representation.
     */
    toString(): string;
    /**
     * The raw bytes of the Public key.
     */
    get bytes(): Buffer;
}
export declare class Libp2pCryptoIdentity implements Identity {
    key: PrivateKey;
    constructor(key: PrivateKey);
    /**
     * Signs the given data with the Private key,
     * @param data Data to be signed.
     */
    sign(data: Buffer): Promise<Buffer>;
    /**
     * Returns the Public key.
     */
    get public(): Libp2pCryptoPublicKey;
    /**
     * Create a random Ed25519 Identity.
     */
    static fromRandom(): Promise<Libp2pCryptoIdentity>;
    /**
     * Returns base32 encoded private key representation.
     */
    toString(): string;
    /**
     * Creates key key from base32 encoded string representation
     * @param str
     */
    static fromString(str: string): Promise<Libp2pCryptoIdentity>;
}
