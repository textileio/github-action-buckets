"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThreadKey = exports.keyToString = exports.keyFromString = exports.invalidKeyError = void 0;
const libp2p_crypto_1 = require("libp2p-crypto");
const multibase_1 = __importDefault(require("multibase"));
exports.invalidKeyError = new Error('Invalid key');
// NonceBytes is the length of GCM nonce.
const nonceBytes = 12;
// KeyBytes is the length of GCM key.
const keyBytes = 32;
/**
 * keyFromString returns a key by decoding a base32-encoded string.
 * @param k Input base32-encoded string.
 */
exports.keyFromString = (k) => {
    return multibase_1.default.decode(k);
};
/**
 * String returns the base32-encoded string representation of raw key bytes.
 * @param k Input key buffer.
 */
exports.keyToString = (k) => {
    return multibase_1.default.encode('base32', k).toString();
};
/**
 * Key is a thread encryption key with two components.
 * @param sk Network key is used to encrypt outer log record linkages.
 * @param rk Read key is used to encrypt inner record events.
 */
class ThreadKey {
    constructor(service, read) {
        this.service = service;
        this.read = read;
    }
    /**
     * Create a new set of keys.
     * @param withRead Whether to also include a random read key.
     */
    static fromRandom(withRead = true) {
        return new ThreadKey(libp2p_crypto_1.randomBytes(keyBytes), withRead ? libp2p_crypto_1.randomBytes(keyBytes) : undefined);
    }
    /**
     * Create Key from bytes.
     * @param bytes Input bytes of (possibly both) key(s).
     */
    static fromBytes(bytes) {
        if (bytes.byteLength !== keyBytes && bytes.byteLength !== keyBytes * 2) {
            throw exports.invalidKeyError;
        }
        const sk = bytes.slice(0, keyBytes);
        let rk;
        if (bytes.byteLength === keyBytes * 2) {
            rk = bytes.slice(keyBytes);
        }
        return new ThreadKey(sk, rk);
    }
    /**
     * Create Key by decoding a base32-encoded string.
     * @param s The base32-encoded string.
     */
    static fromString(s) {
        const data = multibase_1.default.decode(s);
        return this.fromBytes(data);
    }
    isDefined() {
        return this.service !== undefined;
    }
    canRead() {
        return this.read !== undefined;
    }
    toBytes() {
        if (this.read !== undefined)
            return Buffer.concat([this.service, this.read]);
        return this.service;
    }
    /**
     * Return the base32-encoded string representation of raw key bytes.
     * For example:
     * Full: "brv7t5l2h55uklz5qwpntcat26csaasfchzof3emmdy6povabcd3a2to2qdkqdkto2prfhizerqqudqsdvwherbiy4nazqxjejgdr4oy"
     * Network: "bp2vvqody5zm6yqycsnazb4kpqvycbdosos352zvpsorxce5koh7q"
     */
    toString() {
        return multibase_1.default.encode('base32', this.toBytes()).toString();
    }
}
exports.ThreadKey = ThreadKey;
//# sourceMappingURL=key.js.map