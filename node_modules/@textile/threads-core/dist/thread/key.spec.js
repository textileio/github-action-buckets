"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const key_1 = require("./key");
describe('ThreadKey', () => {
    it('should be able to create a random ThreadKey', () => {
        const k = key_1.ThreadKey.fromRandom();
        chai_1.expect(k).to.have.ownProperty('service');
        chai_1.expect(k).to.have.ownProperty('read');
    });
    it('should be able to create a network only key', () => {
        const k = key_1.ThreadKey.fromRandom(false);
        chai_1.expect(k).to.have.ownProperty('service');
        chai_1.expect(k.read).to.be.undefined;
    });
    it('should be able to create a full key from an input Buffer', () => {
        var _a;
        const k1 = key_1.ThreadKey.fromRandom();
        const b = k1.toBytes();
        const k2 = key_1.ThreadKey.fromBytes(b);
        chai_1.expect(k1.service.equals(k2.service)).to.be.true;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        chai_1.expect((_a = k1.read) === null || _a === void 0 ? void 0 : _a.equals(k2.read)).to.be.true;
    });
    it('should be able to create a network key from an input Buffer', () => {
        const k1 = key_1.ThreadKey.fromRandom(false);
        const b = k1.toBytes();
        const k2 = key_1.ThreadKey.fromBytes(b);
        chai_1.expect(k1.service.equals(k2.service)).to.be.true;
        chai_1.expect(k1.read).to.be.undefined;
    });
    it('should be able to create a full key from an input string', () => {
        var _a;
        const k1 = key_1.ThreadKey.fromRandom();
        const b = k1.toString();
        const k2 = key_1.ThreadKey.fromString(b);
        chai_1.expect(k1.service.equals(k2.service)).to.be.true;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        chai_1.expect((_a = k1.read) === null || _a === void 0 ? void 0 : _a.equals(k2.read)).to.be.true;
    });
    it('should be able to create a network key from an input string', () => {
        const k1 = key_1.ThreadKey.fromRandom(false);
        const b = k1.toString();
        const k2 = key_1.ThreadKey.fromString(b);
        chai_1.expect(k1.service.equals(k2.service)).to.be.true;
        chai_1.expect(k1.read).to.be.undefined;
    });
});
//# sourceMappingURL=key.spec.js.map