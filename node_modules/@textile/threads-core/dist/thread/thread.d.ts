import { PrivateKey, PublicKey } from 'libp2p-crypto';
import { ThreadID } from '@textile/threads-id';
import { Multiaddr } from '@textile/multiaddr';
import { LogInfo } from './log';
import { ThreadKey } from './key';
/**
 * ThreadProtocol describes the default Threads Protocol parameters
 */
export declare const ThreadProtocol: {
    /**
     * Name is the protocol slug.
     */
    name: string;
    /**
     * Code is the protocol code.
     */
    code: number;
    /**
     * Version is the current protocol version.
     */
    version: string;
    /**
     * Protocol is the threads protocol tag.
     */
    protocol: string;
};
/**
 * ThreadInfo holds a thread ID associated known logs.
 */
export interface ThreadInfo {
    /**
     * Thread ID.
     */
    id: ThreadID;
    /**
     * Set of log information.
     */
    logs?: Set<LogInfo>;
    /**
     * Symmetric encryption keys.
     */
    key?: ThreadKey;
    /**
     * The thread addrs.
     */
    addrs?: Set<Multiaddr>;
}
export interface NewThreadOptions {
    /**
     * Set of symmetric encryption keys.Can be generated with Key.fromRandom().
     */
    threadKey?: ThreadKey;
    /**
     * Asymmetric encryption key (pair). Can be either a public or private key. If a public key is specified, this
     * limits the types of operations the receiving Thread network can perform.
     */
    logKey?: PublicKey | PrivateKey;
}
