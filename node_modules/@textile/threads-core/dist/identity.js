"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Libp2pCryptoIdentity = exports.Libp2pCryptoPublicKey = exports.privateKeyFromString = exports.privateKeyToString = exports.publicKeyToString = void 0;
const libp2p_crypto_1 = require("libp2p-crypto");
const multibase_1 = __importDefault(require("multibase"));
function publicKeyToString(key) {
    return multibase_1.default.encode('base32', libp2p_crypto_1.keys.marshalPublicKey(key)).toString();
}
exports.publicKeyToString = publicKeyToString;
function privateKeyToString(key) {
    return multibase_1.default.encode('base32', libp2p_crypto_1.keys.marshalPrivateKey(key)).toString();
}
exports.privateKeyToString = privateKeyToString;
function privateKeyFromString(str) {
    return libp2p_crypto_1.keys.unmarshalPrivateKey(multibase_1.default.decode(str));
}
exports.privateKeyFromString = privateKeyFromString;
class Libp2pCryptoPublicKey {
    constructor(key) {
        this.key = key;
    }
    /**
     * Verify the given signed data.
     * @param data The data to verify.
     * @param sig The signature to verify.
     */
    verify(data, sig) {
        return this.key.verify(data, sig);
    }
    /**
     * Returns base32 encoded Public key representation.
     */
    toString() {
        return publicKeyToString(this.key);
    }
    /**
     * The raw bytes of the Public key.
     */
    get bytes() {
        return this.key.bytes;
    }
}
exports.Libp2pCryptoPublicKey = Libp2pCryptoPublicKey;
class Libp2pCryptoIdentity {
    constructor(key) {
        this.key = key;
    }
    /**
     * Signs the given data with the Private key,
     * @param data Data to be signed.
     */
    sign(data) {
        return this.key.sign(data);
    }
    /**
     * Returns the Public key.
     */
    get public() {
        return new Libp2pCryptoPublicKey(this.key.public);
    }
    /**
     * Create a random Ed25519 Identity.
     */
    static fromRandom() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Libp2pCryptoIdentity(yield libp2p_crypto_1.keys.supportedKeys.ed25519.generateKeyPair());
        });
    }
    /**
     * Returns base32 encoded private key representation.
     */
    toString() {
        return privateKeyToString(this.key);
    }
    /**
     * Creates key key from base32 encoded string representation
     * @param str
     */
    static fromString(str) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Libp2pCryptoIdentity(yield privateKeyFromString(str));
        });
    }
}
exports.Libp2pCryptoIdentity = Libp2pCryptoIdentity;
//# sourceMappingURL=identity.js.map