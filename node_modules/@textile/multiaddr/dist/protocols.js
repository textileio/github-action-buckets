"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.protocols = void 0;
const V = -1;
const _table = [
    [4, 32, 'ip4'],
    [6, 16, 'tcp'],
    [33, 16, 'dccp'],
    [41, 128, 'ip6'],
    [42, V, 'ip6zone'],
    [53, V, 'dns', true],
    [54, V, 'dns4', true],
    [55, V, 'dns6', true],
    [56, V, 'dnsaddr', true],
    [132, 16, 'sctp'],
    [273, 16, 'udp'],
    [275, 0, 'p2p-webrtc-star'],
    [276, 0, 'p2p-webrtc-direct'],
    [277, 0, 'p2p-stardust'],
    [290, 0, 'p2p-circuit'],
    [301, 0, 'udt'],
    [302, 0, 'utp'],
    [400, V, 'unix', false, 'path'],
    [406, V, 'thread'],
    // `ipfs` is added before `p2p` for legacy support.
    // All text representations will default to `p2p`, but `ipfs` will
    // still be supported
    [421, V, 'ipfs'],
    // `p2p` is the preferred name for 421, and is now the default
    [421, V, 'p2p'],
    [443, 0, 'https'],
    [444, 96, 'onion'],
    [445, 296, 'onion3'],
    [446, V, 'garlic64'],
    [460, 0, 'quic'],
    [477, 0, 'ws'],
    [478, 0, 'wss'],
    [479, 0, 'p2p-websocket-star'],
    [480, 0, 'http'],
];
function p([code, size, name, resolvable, path]) {
    return {
        code: code,
        size: size,
        name: name,
        resolvable: Boolean(resolvable),
        path: Boolean(path),
    };
}
const _names = {};
const _codes = {};
// populate tables
_table.forEach(row => {
    const proto = p(row);
    _codes[proto.code] = proto;
    _names[proto.name] = proto;
});
function Protocols(proto) {
    if (typeof proto === 'number') {
        if (Protocols.codes[proto]) {
            return Protocols.codes[proto];
        }
        throw new Error('no protocol with code: ' + proto);
    }
    else if (typeof proto === 'string' || proto instanceof String) {
        if (Protocols.names[proto]) {
            return Protocols.names[proto];
        }
        throw new Error('no protocol with name: ' + proto);
    }
    throw new Error('invalid protocol id type: ' + proto);
}
exports.protocols = Protocols;
// eslint-disable-next-line @typescript-eslint/no-namespace
(function (Protocols) {
    Protocols.V = -1;
    Protocols.lengthPrefixedVarSize = Protocols.V;
    Protocols.table = _table;
    Protocols.codes = _codes;
    Protocols.names = _names;
    Protocols.object = p;
})(Protocols || (Protocols = {}));
exports.protocols = Protocols;
//# sourceMappingURL=protocols.js.map