var threads=function(t){function e(e){for(var o,s,u=e[0],f=e[1],c=e[2],a=0,d=[];a<u.length;a++)s=u[a],Object.prototype.hasOwnProperty.call(n,s)&&n[s]&&d.push(n[s][0]),n[s]=0;for(o in f)Object.prototype.hasOwnProperty.call(f,o)&&(t[o]=f[o]);for(l&&l(e);d.length;)d.shift()();return i.push.apply(i,c||[]),r()}function r(){for(var t,e=0;e<i.length;e++){for(var r=i[e],o=!0,u=1;u<r.length;u++){var f=r[u];0!==n[f]&&(o=!1)}o&&(i.splice(e--,1),t=s(s.s=r[0]))}return t}var o={},n={0:0},i=[];function s(e){if(o[e])return o[e].exports;var r=o[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=o,s.d=function(t,e,r){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(s.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)s.d(r,o,function(e){return t[e]}.bind(null,o));return r},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="";var u=window.webpackJsonpthreads=window.webpackJsonpthreads||[],f=u.push.bind(u);u.push=e,u=u.slice();for(var c=0;c<u.length;c++)e(u[c]);var l=f;return i.push([10,1]),r()}({10:function(t,e,r){"use strict";(function(t){var o=this&&this.__createBinding||(Object.create?function(t,e,r,o){void 0===o&&(o=r),Object.defineProperty(t,o,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,o){void 0===o&&(o=r),t[o]=e[r]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&o(e,t,r);return n(e,t),e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.Multiaddr=void 0;const u=s(r(1)),f=s(r(6)),c=s(r(31)),l=r(4),a=i(r(32));let d=(()=>{class e{constructor(r){if(this.buffer=t.alloc(0),this.toJSON=this.toString,!(this instanceof e))return new e(r);if(null==r&&(r=""),r instanceof t)this.buffer=a.fromBuffer(r);else if("string"==typeof r||r instanceof String){if(r.length>0&&"/"!==r.charAt(0))throw new Error(`multiaddr "${r}" must start with a "/"`);this.buffer=a.fromString(r)}else{if(!(r.buffer&&r.protos&&r.protoCodes))throw new Error("addr must be a string, Buffer, or another Multiaddr");this.buffer=a.fromBuffer(r.buffer)}}toString(){return a.bufferToString(this.buffer)}toOptions(){const t={},e=this.toString().split("/");return t.family="ip4"===e[1]?"ipv4":"ipv6",t.host=e[2],t.transport=e[3],t.port=parseInt(e[4]),t}inspect(){return"<Multiaddr "+this.buffer.toString("hex")+" - "+a.bufferToString(this.buffer)+">"}protos(){return this.protoCodes().map(t=>Object.assign({},l.protocols(t)))}protoCodes(){const t=[],e=this.buffer;let r=0;for(;r<e.length;){const o=u.default.decode(e,r),n=u.default.decode.bytes,i=l.protocols(o);r+=a.sizeForAddr(i,e.slice(r+n))+n,t.push(o)}return t}protoNames(){return this.protos().map(t=>t.name)}tuples(){return a.bufferToTuples(this.buffer)}stringTuples(){const t=a.bufferToTuples(this.buffer);return a.tuplesToStringTuples(t)}encapsulate(t){return t=new e(t),new e(this.toString()+t.toString())}decapsulate(t){const r=t.toString(),o=this.toString(),n=o.lastIndexOf(r);if(n<0)throw new Error("Address "+this+" does not contain subaddress: "+t);return new e(o.slice(0,n))}decapsulateCode(t){const r=this.tuples();for(let o=r.length-1;o>=0;o--)if(r[o][0]===t)return new e(a.tuplesToBuffer(r.slice(0,o)));return this}getPeerId(){let t;try{t=(this.stringTuples().filter(t=>{if(t[0]===l.protocols.names.ipfs.code)return!0}).pop()||[])[1],t=c.default.encode(new f.default(t||"").multihash)}catch(e){t=void 0}return t}getPath(){let t=null;try{t=this.stringTuples().filter(t=>{if(l.protocols(t[0]).path)return!0})[0][1]}catch(e){t=null}return t}equals(t){return this.buffer.equals(t.buffer)}nodeAddress(){const t=this.protoCodes(),e=this.protoNames(),r=this.toString().split("/").slice(1);if(r.length<4)throw new Error('multiaddr must have a valid format: "/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}".');if(4!==t[0]&&41!==t[0]&&54!==t[0]&&55!==t[0])throw new Error(`no protocol with name: "'${e[0]}'". Must have a valid family name: "{ip4, ip6, dns4, dns6}".`);if("tcp"!==r[2]&&"udp"!==r[2])throw new Error(`no protocol with name: "'${e[1]}'". Must have a valid transport protocol: "{tcp, udp}".`);return{family:41===t[0]||55===t[0]?6:4,address:r[1],port:parseInt(r[3])}}static fromNodeAddress(t,r){if(!t)throw new Error("requires node address object");if(!r)throw new Error("requires transport protocol");const o="IPv6"===t.family?"ip6":"ip4";return new e("/"+[o,t.address,r,t.port].join("/"))}static isThinWaistAddress(t){const e=(t||this).protos();return 2===e.length&&((4===e[0].code||41===e[0].code)&&!(6!==e[1].code&&273!==e[1].code))}static isName(t){return!!e.isMultiaddr(t)&&t.protos().some(t=>t.resolvable)}static resolve(t){return e.isMultiaddr(t)&&e.isName(t)?Promise.reject(new Error("not implemented yet")):Promise.reject(Error("not a valid name"))}static isMultiaddr(t){return t}}return e.protocols=l.protocols,e})();e.Multiaddr=d}).call(this,r(0).Buffer)},32:function(t,e,r){"use strict";(function(t){var o=this&&this.__createBinding||(Object.create?function(t,e,r,o){void 0===o&&(o=r),Object.defineProperty(t,o,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,o){void 0===o&&(o=r),t[o]=e[r]}),n=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.hasOwnProperty.call(t,r)&&o(e,t,r);return n(e,t),e},s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.protoFromTuple=e.ParseError=e.cleanPath=e.isValidBuffer=e.fromBuffer=e.fromString=e.stringToBuffer=e.bufferToString=e.bufferToTuples=e.sizeForAddr=e.tuplesToBuffer=e.tuplesToStringTuples=e.stringTuplesToTuples=e.stringTuplesToString=e.stringToStringTuples=void 0;const u=s(r(1)),f=i(r(33)),c=r(4);function l(t){const e=[],r=t.split("/").slice(1);if(1===r.length&&""===r[0])return[];for(let o=0;o<r.length;o++){const n=r[o],i=c.protocols(n);if(0!==i.size){if(o++,o>=r.length)throw T("invalid address: "+t);if(i.path){e.push([n,y(r.slice(o).join("/"))]);break}e.push([n,r[o]])}else e.push([n])}return e}function a(t){const e=[];return t.map(t=>{const r=_(t);e.push(r.name),t.length>1&&e.push(t[1])}),y(e.join("/"))}function d(t){return t.map(t=>{Array.isArray(t)||(t=[t]);const e=_(t);return t.length>1?[e.code,f.toBuffer(e.code,t[1])]:[e.code]})}function p(t){return t.map(t=>{const e=_(t);return t.length>1?[e.code,f.toString(e.code,t[1])]:[e.code]})}function h(e){return w(t.concat(e.map(e=>{const r=_(e);let o=t.from(u.default.encode(r.code));return e.length>1&&(o=t.concat([o,e[1]])),o})))}function g(t,e){if(t.size>0)return t.size/8;if(0===t.size)return 0;return u.default.decode(e)+u.default.decode.bytes}function b(t){const e=[];let r=0;for(;r<t.length;){const o=u.default.decode(t,r),n=u.default.decode.bytes,i=g(c.protocols(o),t.slice(r+n));if(0===i){e.push([o]),r+=n;continue}const s=t.slice(r+n,r+n+i);if(r+=i+n,r>t.length)throw T("Invalid address buffer: "+t.toString("hex"));e.push([o,s])}return e}function m(t){return h(d(l(t=y(t))))}function w(e){const r=v(e);if(r)throw r;return t.from(e)}function v(t){try{b(t)}catch(t){return t}}function y(t){return"/"+t.trim().split("/").filter(t=>t).join("/")}function T(t){return new Error("Error parsing address: "+t)}function _(t){return c.protocols(t[0])}e.stringToStringTuples=l,e.stringTuplesToString=a,e.stringTuplesToTuples=d,e.tuplesToStringTuples=p,e.tuplesToBuffer=h,e.sizeForAddr=g,e.bufferToTuples=b,e.bufferToString=function(t){return a(p(b(t)))},e.stringToBuffer=m,e.fromString=function(t){return m(t)},e.fromBuffer=w,e.isValidBuffer=function(t){return void 0===v(t)},e.cleanPath=y,e.ParseError=T,e.protoFromTuple=_}).call(this,r(0).Buffer)},33:function(t,e,r){"use strict";(function(t){var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.toBuffer=e.toString=void 0;const n=o(r(1)),i=r(34),s=r(4),u=r(53);e.toString=function(t,e){switch(s.protocols(t).code){case 406:return function(t){const e=n.default.decode(t);if((t=t.slice(n.default.decode.bytes)).length!==e)throw new Error("inconsistent lengths");return i.ThreadID.fromBytes(t).toString()}(e);default:return u.toString(t,e)}},e.toBuffer=function(e,r){switch(s.protocols(e).code){case 406:return function(e){const r=i.ThreadID.fromString(e).toBytes(),o=t.from(n.default.encode(r.length));return t.concat([o,r])}(r);default:return u.toBuffer(e,r)}}}).call(this,r(0).Buffer)},34:function(t,e,r){"use strict";(function(t){var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.ThreadID=void 0;const n=r(35),i=o(r(39)),s=o(r(45));class u{constructor(t){this.buf=t}static fromRandom(e=u.Variant.Raw,r=32){const o=t.concat([t.from(n.encode(u.V1)),t.from(n.encode(e)),i.default(t.alloc(r))]);return new u(o)}static fromString(e){if(e.length<2)throw new Error("id too short");const r=t.from(s.default.decode(e));return u.fromBytes(r)}static fromBytes(e){let r=t.from(e);const o=n.decode(r);if(1!=o)throw new Error(`expected 1 as the id version number, got: ${o}.`);if(r=r.slice(n.decode.bytes,r.length),!(n.decode(r)in u.Variant))throw new Error("invalid variant.");if(r.slice(n.decode.bytes,r.length).length<16)throw new Error("random component too small.");return new u(t.from(e))}static getEncoding(t){if(t.length<2)throw new Error("Too Short");const e=s.default.isEncoded(t);if(!1===e)throw new Error("Invalid Encoding");return e}isDefined(){return this.buf.length>0}toBytes(){return t.from(this.buf)}equals(t){return this.buf.equals(t.buf)}version(){return n.decode(this.buf)}variant(){let e=t.from(this.buf);return n.decode(e),e=e.slice(n.decode.bytes),n.decode(e)}toString(t="base32"){switch(this.version()){case u.V1:return s.default.encode(t,this.buf).toString();default:throw new Error("unknown ID version.")}}}e.ThreadID=u,function(t){let e;t.V1=1,function(t){t[t.Raw=85]="Raw",t[t.AccessControlled=112]="AccessControlled"}(e=t.Variant||(t.Variant={}))}(u||(u={})),e.ThreadID=u}).call(this,r(0).Buffer)},4:function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.protocols=void 0;const o=-1,n=[[4,32,"ip4"],[6,16,"tcp"],[33,16,"dccp"],[41,128,"ip6"],[42,o,"ip6zone"],[53,o,"dns",!0],[54,o,"dns4",!0],[55,o,"dns6",!0],[56,o,"dnsaddr",!0],[132,16,"sctp"],[273,16,"udp"],[275,0,"p2p-webrtc-star"],[276,0,"p2p-webrtc-direct"],[277,0,"p2p-stardust"],[290,0,"p2p-circuit"],[301,0,"udt"],[302,0,"utp"],[400,o,"unix",!1,"path"],[406,o,"thread"],[421,o,"ipfs"],[421,o,"p2p"],[443,0,"https"],[444,96,"onion"],[445,296,"onion3"],[446,o,"garlic64"],[460,0,"quic"],[477,0,"ws"],[478,0,"wss"],[479,0,"p2p-websocket-star"],[480,0,"http"]];function i([t,e,r,o,n]){return{code:t,size:e,name:r,resolvable:Boolean(o),path:Boolean(n)}}const s={},u={};function f(t){if("number"==typeof t){if(f.codes[t])return f.codes[t];throw new Error("no protocol with code: "+t)}if("string"==typeof t||t instanceof String){if(f.names[t])return f.names[t];throw new Error("no protocol with name: "+t)}throw new Error("invalid protocol id type: "+t)}n.forEach(t=>{const e=i(t);u[e.code]=e,s[e.name]=e}),e.protocols=f,function(t){t.V=-1,t.lengthPrefixedVarSize=t.V,t.table=n,t.codes=u,t.names=s,t.object=i}(f||(f={})),e.protocols=f},44:function(t,e){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,