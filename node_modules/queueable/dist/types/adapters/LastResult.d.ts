/// <reference types="node" />
import { PushAdapter } from '../common';
export default class LastResult<A> implements PushAdapter<A> {
    private buffer;
    private closed;
    private resolved;
    private requested;
    static fromDom: (type: "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "change" | "input" | "select" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel", target: EventTarget & {
        addEventListener(type: "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "change" | "input" | "select" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel", listener: (e: Event | ErrorEvent | AnimationEvent | UIEvent | DragEvent | MouseEvent | FocusEvent | KeyboardEvent | PointerEvent | ProgressEvent<EventTarget> | SecurityPolicyViolationEvent | TouchEvent | TransitionEvent | WheelEvent) => void, options?: boolean | AddEventListenerOptions | undefined): void;
        removeEventListener(type: "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "change" | "input" | "select" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel", listener: (e: Event | ErrorEvent | AnimationEvent | UIEvent | DragEvent | MouseEvent | FocusEvent | KeyboardEvent | PointerEvent | ProgressEvent<EventTarget> | SecurityPolicyViolationEvent | TouchEvent | TransitionEvent | WheelEvent) => void, options?: boolean | AddEventListenerOptions | undefined): void;
    }, options?: boolean | AddEventListenerOptions | undefined) => AsyncIterableIterator<Event | ErrorEvent | AnimationEvent | UIEvent | DragEvent | MouseEvent | FocusEvent | KeyboardEvent | PointerEvent | ProgressEvent<EventTarget> | SecurityPolicyViolationEvent | TouchEvent | TransitionEvent | WheelEvent>;
    static fromEmitter: (type: string | symbol, emitter: NodeJS.EventEmitter) => AsyncIterableIterator<any>;
    push(value: A, done?: boolean): Promise<IteratorResult<A>>;
    next(): Promise<IteratorResult<A>>;
    return(value?: A): Promise<IteratorResult<A>>;
    wrap(onReturn?: () => void): {
        next: () => Promise<IteratorResult<A, any>>;
        [Symbol.asyncIterator](): any;
        return: (value?: A | undefined) => Promise<IteratorResult<A, any>>;
    };
    [Symbol.asyncIterator](): this;
}
