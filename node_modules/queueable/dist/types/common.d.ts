export interface Returnable<A> extends AsyncIterableIterator<A> {
    return(value?: A): Promise<IteratorResult<A>>;
}
export interface PushAdapter<A> extends AsyncIterableIterator<A> {
    push(value: A): Promise<IteratorResult<A>>;
    wrap(onReturn?: () => void): AsyncIterableIterator<A>;
}
/** The result returned from closed iterators. */
export declare const doneResult: Readonly<{
    value: never;
    done: boolean;
}>;
export declare const donePromise: Promise<Readonly<{
    value: never;
    done: boolean;
}>>;
