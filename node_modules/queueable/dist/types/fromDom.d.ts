import { PushAdapter } from './common';
declare type EventMap = GlobalEventHandlersEventMap;
/**
 * Convert DOM events to an async iterable iterator.
 */
declare const fromDom: <T extends "waiting" | "error" | "abort" | "cancel" | "progress" | "ended" | "change" | "input" | "select" | "animationcancel" | "animationend" | "animationiteration" | "animationstart" | "auxclick" | "blur" | "canplay" | "canplaythrough" | "click" | "close" | "contextmenu" | "cuechange" | "dblclick" | "drag" | "dragend" | "dragenter" | "dragexit" | "dragleave" | "dragover" | "dragstart" | "drop" | "durationchange" | "emptied" | "focus" | "focusin" | "focusout" | "gotpointercapture" | "invalid" | "keydown" | "keypress" | "keyup" | "load" | "loadeddata" | "loadedmetadata" | "loadstart" | "lostpointercapture" | "mousedown" | "mouseenter" | "mouseleave" | "mousemove" | "mouseout" | "mouseover" | "mouseup" | "pause" | "play" | "playing" | "pointercancel" | "pointerdown" | "pointerenter" | "pointerleave" | "pointermove" | "pointerout" | "pointerover" | "pointerup" | "ratechange" | "reset" | "resize" | "scroll" | "securitypolicyviolation" | "seeked" | "seeking" | "selectionchange" | "selectstart" | "stalled" | "submit" | "suspend" | "timeupdate" | "toggle" | "touchcancel" | "touchend" | "touchmove" | "touchstart" | "transitioncancel" | "transitionend" | "transitionrun" | "transitionstart" | "volumechange" | "wheel">(init: () => PushAdapter<GlobalEventHandlersEventMap[T]>) => (type: T, target: Target<T, Listener<T>, boolean | AddEventListenerOptions>, options?: boolean | AddEventListenerOptions | undefined) => AsyncIterableIterator<GlobalEventHandlersEventMap[T]>;
declare type Listener<T extends keyof EventMap> = (e: EventMap[T]) => void;
declare type Target<T extends keyof EventMap, L = Listener<T>, O = boolean | AddEventListenerOptions> = EventTarget & {
    addEventListener(type: T, listener: L, options?: O): void;
    removeEventListener(type: T, listener: L, options?: O): void;
};
export default fromDom;
