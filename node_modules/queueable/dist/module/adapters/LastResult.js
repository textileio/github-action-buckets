import Deferred from '../Deferred';
import { doneResult } from '../common';
import fromDom from '../fromDom';
import fromEmitter from '../fromEmitter';
export default class LastResult {
    constructor() {
        this.buffer = new Deferred();
        this.closed = false;
        this.resolved = false;
        this.requested = false;
    }
    push(value, done = false) {
        if (this.closed) {
            throw Error('Iterator closed');
        }
        const result = {
            value,
            done,
        };
        if (this.resolved === false) {
            this.resolved = true;
        }
        else {
            this.buffer = new Deferred();
            this.resolved = false;
        }
        this.requested = false;
        this.buffer.resolve(result);
        return this.buffer.promise;
    }
    async next() {
        if (this.closed) {
            return doneResult;
        }
        this.requested = true;
        return this.buffer.promise;
    }
    async return(value) {
        this.closed = true;
        if (!this.resolved && this.requested) {
            this.buffer.resolve(doneResult);
        }
        return Promise.resolve({
            value: value,
            done: true,
        });
    }
    wrap(onReturn) {
        const wrapped = {
            next: () => this.next(),
            [Symbol.asyncIterator]() {
                return this;
            },
            return: (value) => {
                if (onReturn) {
                    onReturn();
                }
                return this.return(value);
            },
        };
        return wrapped;
    }
    [Symbol.asyncIterator]() {
        return this;
    }
}
LastResult.fromDom = fromDom(() => new LastResult());
LastResult.fromEmitter = fromEmitter(() => new LastResult());
//# sourceMappingURL=LastResult.js.map